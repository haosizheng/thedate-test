/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockEmpty, MockEmptyInterface } from "../MockEmpty";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220c10bc33404c1337d07582d10768034a09bec674e381b4c04dfd5d5f4b64dd0e264736f6c63430008040033";

export class MockEmpty__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockEmpty> {
    return super.deploy(overrides || {}) as Promise<MockEmpty>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockEmpty {
    return super.attach(address) as MockEmpty;
  }
  connect(signer: Signer): MockEmpty__factory {
    return super.connect(signer) as MockEmpty__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockEmptyInterface {
    return new utils.Interface(_abi) as MockEmptyInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockEmpty {
    return new Contract(address, _abi, signerOrProvider) as MockEmpty;
  }
}

/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockNonERC20, MockNonERC20Interface } from "../MockNonERC20";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea26469706673582212208f2815afdfde86159ea1a0abb5c3ebccf25c855a62f4332c9e50037a0752724664736f6c63430008040033";

export class MockNonERC20__factory extends ContractFactory {
  constructor(signer?: Signer) {
    super(_abi, _bytecode, signer);
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<MockNonERC20> {
    return super.deploy(overrides || {}) as Promise<MockNonERC20>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockNonERC20 {
    return super.attach(address) as MockNonERC20;
  }
  connect(signer: Signer): MockNonERC20__factory {
    return super.connect(signer) as MockNonERC20__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockNonERC20Interface {
    return new utils.Interface(_abi) as MockNonERC20Interface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): MockNonERC20 {
    return new Contract(address, _abi, signerOrProvider) as MockNonERC20;
  }
}

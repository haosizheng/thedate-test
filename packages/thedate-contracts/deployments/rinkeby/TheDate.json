{
  "address": "0x24Ce82b815B85F8d67F0f83141360B4c8Bf2D062",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "foundation_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loot_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ArtworkAirdropped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ArtworkClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBidIncrementBps",
          "type": "uint256"
        }
      ],
      "name": "AuctionMinBidIncrementBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        }
      ],
      "name": "AuctionReservePriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimingPrice",
          "type": "uint256"
        }
      ],
      "name": "ClaimingPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EngravingPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ErasingPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "NoteEngraved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NoteErased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "NoteSizeLimitChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DAO_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_days",
          "type": "uint256"
        }
      ],
      "name": "daysToDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "engraveNote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "engravingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "eraseNote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erasingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "escapeHTML",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "escapeQuotes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateSVGImage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentAuctionTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentMinimumBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHighestBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNote",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrementBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noteSizeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minBidIncrementBps_",
          "type": "uint256"
        }
      ],
      "name": "setAuctionMinBidIncrementBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reservePrice_",
          "type": "uint256"
        }
      ],
      "name": "setAuctionReservePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimingPrice_",
          "type": "uint256"
        }
      ],
      "name": "setClaimingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "engravingPrice_",
          "type": "uint256"
        }
      ],
      "name": "setEngravingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "erasingPrice_",
          "type": "uint256"
        }
      ],
      "name": "setErasingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "noteSizeLimit_",
          "type": "uint256"
        }
      ],
      "name": "setNoteSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "royaltyBps_",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "svgImageTemplate_",
          "type": "string[]"
        }
      ],
      "name": "setSVGImageTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenDescription_",
          "type": "string"
        }
      ],
      "name": "setTokenDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleLastAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "svgImageTemplate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x396dc145ffd11086a2074192c30df1e5d6e4a1230d65fe1f32aa8726978b42e3",
  "receipt": {
    "to": null,
    "from": "0xcc50cDcd9Dab7A98926B1164Ae5bb59FceFB5AF9",
    "contractAddress": "0x24Ce82b815B85F8d67F0f83141360B4c8Bf2D062",
    "transactionIndex": 34,
    "gasUsed": "5239384",
    "logsBloom": "0x
    "blockHash": "0xada78a2d2e074a4493cd3ef1905a8bb90f8eefb47d67244e15569eccfb320b43",
    "transactionHash": "0x396dc145ffd11086a2074192c30df1e5d6e4a1230d65fe1f32aa8726978b42e3",
    "logs": [
      {
        "transactionIndex": 34,
        "blockNumber": 9277914,
        "transactionHash": "0x396dc145ffd11086a2074192c30df1e5d6e4a1230d65fe1f32aa8726978b42e3",
        "address": "0x24Ce82b815B85F8d67F0f83141360B4c8Bf2D062",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc50cdcd9dab7a98926b1164ae5bb59fcefb5af9",
          "0x000000000000000000000000cc50cdcd9dab7a98926b1164ae5bb59fcefb5af9"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0xada78a2d2e074a4493cd3ef1905a8bb90f8eefb47d67244e15569eccfb320b43"
      },
      {
        "transactionIndex": 34,
        "blockNumber": 9277914,
        "transactionHash": "0x396dc145ffd11086a2074192c30df1e5d6e4a1230d65fe1f32aa8726978b42e3",
        "address": "0x24Ce82b815B85F8d67F0f83141360B4c8Bf2D062",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b2603",
          "0x000000000000000000000000cc50cdcd9dab7a98926b1164ae5bb59fcefb5af9",
          "0x000000000000000000000000cc50cdcd9dab7a98926b1164ae5bb59fcefb5af9"
        ],
        "data": "0x",
        "logIndex": 36,
        "blockHash": "0xada78a2d2e074a4493cd3ef1905a8bb90f8eefb47d67244e15569eccfb320b43"
      }
    ],
    "blockNumber": 9277914,
    "cumulativeGasUsed": "13202687",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x4234074712bAd05b1DA9d4ee366D1a0D9233A6e6",
    "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    "0x79E2d470f950f2Cf78eeF41720E8ff2cf4B3CD78"
  ],
  "solcInputHash": "5ab729a1267465e97afe5e6577d9317c",
  "metadata": "{\"compiler\":{\"version\":\"0.8.7+commit.e28d00a7\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"foundation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loot_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ArtworkAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ArtworkClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrementBps\",\"type\":\"uint256\"}],\"name\":\"AuctionMinBidIncrementBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimingPrice\",\"type\":\"uint256\"}],\"name\":\"ClaimingPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EngravingPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ErasingPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"NoteEngraved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NoteErased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"NoteSizeLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DAO_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"daysToDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"engraveNote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"engravingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"eraseNote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erasingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"escapeHTML\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"escapeQuotes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateSVGImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAuctionTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHighestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noteSizeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBidIncrementBps_\",\"type\":\"uint256\"}],\"name\":\"setAuctionMinBidIncrementBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reservePrice_\",\"type\":\"uint256\"}],\"name\":\"setAuctionReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimingPrice_\",\"type\":\"uint256\"}],\"name\":\"setClaimingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"engravingPrice_\",\"type\":\"uint256\"}],\"name\":\"setEngravingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"erasingPrice_\",\"type\":\"uint256\"}],\"name\":\"setErasingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noteSizeLimit_\",\"type\":\"uint256\"}],\"name\":\"setNoteSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyBps_\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"svgImageTemplate_\",\"type\":\"string[]\"}],\"name\":\"setSVGImageTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenDescription_\",\"type\":\"string\"}],\"name\":\"setTokenDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleLastAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"svgImageTemplate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Called with the sale price to determine how much royalty is owed and to whom.\",\"params\":{\"salePrice\":\"- the sale price of the NFT asset specified by `tokenId`\",\"tokenId\":\"- the NFT asset queried for royalty information\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for `salePrice`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TheDate.sol\":\"TheDate\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x390521fa8ac0210850198bca62e009907bdc81cb74e618d052c4ac1afc89a2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/TheDate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { ERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { AccessControl } from \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC2981 } from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract TheDate is ERC721Enumerable, AccessControl, IERC2981, ReentrancyGuard {\\n    // ==== Roles ====\\n    bytes32 public constant DAO_ROLE = keccak256(\\\"DAO_ROLE\\\");\\n\\n    // ==== Parameters ====\\n    // == DAO controlled parameters ==\\n    uint256 public claimingPrice = 0.05 ether;\\n    uint256 public reservePrice = 0.05 ether;\\n    uint256 public minBidIncrementBps = 1000;\\n    uint256 public engravingPrice = 0.01 ether;\\n    uint256 public erasingPrice = 0.1 ether;\\n    uint256 public noteSizeLimit = 100;\\n\\n    // == Admin controlled parameters ==\\n    uint256 public royaltyBps = 1000;\\n    string public tokenDescription = \\\"The Date is a metadata-based NFT art experiment about time and blockchain. \\\" \\n        \\\"Each fleeting day would be imprinted into an NFT artwork immutably lasting forever. \\\" \\n        \\\"The owner can engrave or erase a note on the artwork as an additional metadata. \\\" \\n        \\\"The Date is metadata. Feel free to use the Date in any way you want.\\\";\\n    string[] public svgImageTemplate = [''\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 500 500\\\">'\\n        '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" />'\\n        '<style>.base { fill: white; font-family: monospace; dominant-baseline: middle; text-anchor: middle; }</style>'\\n        '<text x=\\\"50%\\\" y=\\\"50%\\\" font-size=\\\"50px\\\" class=\\\"base\\\">',\\n        '{{date}}',\\n        '</text><text x=\\\"50%\\\" y=\\\"90%\\\" font-size=\\\"10px\\\" class=\\\"base\\\">',\\n        '{{note}}',\\n        '</text></svg>'];\\n\\n    // == External contracts ==\\n    address payable private immutable _foundation;\\n    address private immutable _weth;\\n    address private immutable _loot;\\n\\n    // ==== Events ====\\n    // == Parameter-related Events ==\\n    event ClaimingPriceChanged(uint256 claimingPrice);\\n    event AuctionReservePriceChanged(uint256 reservePrice);\\n    event AuctionMinBidIncrementBpsChanged(uint256 minBidIncrementBps);\\n    event EngravingPriceChanged(uint256 amount);\\n    event ErasingPriceChanged(uint256 amount);\\n    event NoteSizeLimitChanged(uint256 length);\\n\\n    // == Auction-related events ==\\n    event BidPlaced(uint256 indexed tokenId, address indexed bidder, uint256 amount);\\n    event AuctionSettled(uint256 indexed tokenId, address indexed winner, uint256 amount);\\n    event ArtworkClaimed(uint256 indexed tokenId, address indexed owner);\\n    event ArtworkAirdropped(uint256 indexed tokenId, address indexed owner);\\n\\n    // == Note-related events ==\\n    event NoteEngraved(uint256 indexed tokenId, address indexed owner, string note);\\n    event NoteErased(uint256 indexed tokenId, address indexed owner);\\n\\n    // ==== Storage ====\\n    // == Note ==\\n    mapping(uint256 => string) private _notes;\\n\\n    // == Auction ==\\n    mapping(uint256 => address) private _highestBidder;\\n    mapping(uint256 => uint256) private _highestBid;\\n\\n    // There is at most one unchaimed and auctioned token.\\n    uint256 private _lastUnchaimedAuctionedTokenId = 0;\\n\\n    // ==== Parameter Related Functions ==== \\n    // == DAO controlled parameters ==\\n    function setClaimingPrice(uint256 claimingPrice_) external onlyRole(DAO_ROLE) {\\n        claimingPrice = claimingPrice_;\\n        emit ClaimingPriceChanged(claimingPrice);\\n    }\\n\\n    function setAuctionReservePrice(uint256 reservePrice_) external onlyRole(DAO_ROLE) {\\n        reservePrice = reservePrice_;\\n        emit AuctionReservePriceChanged(reservePrice);\\n    }\\n\\n    function setAuctionMinBidIncrementBps(uint256 minBidIncrementBps_) external onlyRole(DAO_ROLE) {\\n        minBidIncrementBps = minBidIncrementBps_;\\n        emit AuctionMinBidIncrementBpsChanged(minBidIncrementBps);\\n    }\\n\\n    function setEngravingPrice(uint256 engravingPrice_) external onlyRole(DAO_ROLE) {\\n        engravingPrice = engravingPrice_;\\n        emit EngravingPriceChanged(engravingPrice);\\n    }\\n\\n    function setErasingPrice(uint256 erasingPrice_) external onlyRole(DAO_ROLE) {\\n        erasingPrice = erasingPrice_;\\n        emit ErasingPriceChanged(erasingPrice);\\n    }\\n    \\n    function setNoteSizeLimit(uint256 noteSizeLimit_) external onlyRole(DAO_ROLE) {\\n        noteSizeLimit = noteSizeLimit_;\\n        emit NoteSizeLimitChanged(noteSizeLimit);\\n    }\\n\\n    // == Admin controlled parameters ==\\n    function setRoyaltyBps(uint256 royaltyBps_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(royaltyBps_ <= 10000, \\\"royaltyBps should be within [0, 10000]\\\");\\n        royaltyBps = royaltyBps_;\\n    }\\n\\n    function setTokenDescription(string memory tokenDescription_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        tokenDescription = tokenDescription_;\\n    }\\n\\n    function setSVGImageTemplate(string[] memory svgImageTemplate_) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        svgImageTemplate = svgImageTemplate_;\\n    }\\n\\n    // ==== Owner related functions ==== \\n    // == Owner related modifiers ==\\n    modifier onlyOwner(uint256 tokenId) {\\n        require(ownerOf(tokenId) == msg.sender, \\\"Caller should be the owner of the artwork\\\");\\n        _;\\n    }\\n\\n    // == Note related operations ==\\n    modifier validNote(string memory note) {\\n        require(bytes(note).length < noteSizeLimit, \\\"Note should be shorter than noteSizeLimit\\\");\\n        _;\\n    }\\n\\n    function engraveNote(uint256 tokenId, string memory note) external payable onlyOwner(tokenId) validNote(note) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || msg.value >= engravingPrice, \\\"Should pay engravingPrice\\\");\\n        require(bytes(_notes[tokenId]).length == 0, \\\"Note should be empty before engraving\\\");\\n\\n        _notes[tokenId] = note;\\n        _foundation.transfer(msg.value);\\n        emit NoteEngraved(tokenId, ownerOf(tokenId), note);\\n    }\\n\\n    function eraseNote(uint256 tokenId) external payable onlyOwner(tokenId) {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || msg.value >= erasingPrice, \\\"Should pay erasingPrice\\\");\\n        require(bytes(_notes[tokenId]).length > 0, \\\"Note should be nonempty before erasing\\\");\\n\\n        _notes[tokenId] = \\\"\\\";\\n        _foundation.transfer(msg.value);\\n        emit NoteErased(tokenId, ownerOf(tokenId));\\n    }\\n\\n    // ==== Metadata functions ====\\n    function getDate(uint256 tokenId) public pure returns (string memory) {\\n        (uint256 year, uint256 month, uint256 day) = daysToDate(tokenId);\\n        string memory yearStr = Strings.toString(year);\\n        string memory monthStr = Strings.toString(month);\\n        if (bytes(monthStr).length == 1) {\\n            monthStr = string(abi.encodePacked(\\\"0\\\", monthStr));\\n        }\\n        string memory dayStr = Strings.toString(day);\\n        if (bytes(dayStr).length == 1) {\\n            dayStr = string(abi.encodePacked(\\\"0\\\", dayStr));\\n        }\\n        return string(abi.encodePacked(yearStr, \\\"-\\\", monthStr, \\\"-\\\", dayStr));\\n    }\\n\\n    function getNote(uint256 tokenId) public view returns (string memory) {\\n        return _notes[tokenId];\\n    }\\n    \\n    function _stringEquals(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function escapeHTML(string memory s) public pure returns (string memory) {\\n        bytes memory b = bytes(s);\\n        string memory output = \\\"\\\"; \\n        for (uint i = 0; i < b.length; i++) {\\n            if (b[i] == '<') {\\n                output = string(abi.encodePacked(output, \\\"&lt;\\\"));\\n            } else if (b[i] == '>') {\\n                output = string(abi.encodePacked(output, \\\"&gt;\\\"));\\n            } else if (b[i] == '&') {\\n                output = string(abi.encodePacked(output, \\\"&amp;\\\"));\\n            } else if (b[i] == '\\\"') {\\n                output = string(abi.encodePacked(output, \\\"&quot;\\\"));\\n            } else if (b[i] == \\\"'\\\") {\\n                output = string(abi.encodePacked(output, \\\"&apos;\\\"));\\n            } else {\\n                output = string(abi.encodePacked(output, b[i]));\\n            }\\n        }\\n        return output;\\n    }\\n\\n    function escapeQuotes(string memory symbol) public pure returns (string memory) {\\n        bytes memory symbolBytes = bytes(symbol);\\n        uint quotesCount = 0;\\n        for (uint i = 0; i < symbolBytes.length; i++) {\\n            if (symbolBytes[i] == '\\\"') {\\n                quotesCount++;\\n            }\\n        }\\n        if (quotesCount > 0) {\\n            bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\n            uint256 index;\\n            for (uint i = 0; i < symbolBytes.length; i++) {\\n                if (symbolBytes[i] == '\\\"') {\\n                    escapedBytes[index++] = '\\\\\\\\';\\n                }\\n                escapedBytes[index++] = symbolBytes[i];\\n            }\\n            return string(escapedBytes);\\n        }\\n        return symbol;\\n    }\\n\\n    function generateSVGImage(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"tokenId is non-existent\\\");\\n        string memory date = getDate(tokenId);\\n        string memory note = getNote(tokenId);\\n        \\n        string memory output = \\\"\\\";\\n        for (uint i = 0; i < svgImageTemplate.length; ++i) {\\n            string memory part;\\n            if (_stringEquals(svgImageTemplate[i], \\\"{{date}}\\\")) {\\n                part = date;\\n            } else if (_stringEquals(svgImageTemplate[i], \\\"{{note}}\\\")) {\\n                part = escapeHTML(note);\\n            } else {\\n                part = svgImageTemplate[i];\\n            }\\n            output = string(abi.encodePacked(output, part));\\n        }\\n\\n        return output;\\n    }\\n\\n    function generateMetadata(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"tokenId is non-existent\\\");\\n        string memory image = Base64.encode(\\n            bytes(generateSVGImage(tokenId))\\n        );\\n\\n        string memory json = string(abi.encodePacked(\\n            '{\\\"name\\\": \\\"The Date #', \\n            Strings.toString(tokenId),\\n            ': ', \\n            getDate(tokenId), \\n            '\\\", \\\"description\\\": \\\"',\\n            escapeQuotes(tokenDescription),\\n            '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', \\n            image, \\n            '\\\"}'\\n        ));\\n\\n        return json;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"tokenId is nonexistent\\\");\\n        string memory output = string(abi.encodePacked(\\n            'data:application/json;base64,', \\n            Base64.encode(bytes(generateMetadata(tokenId)))\\n        ));\\n\\n        return output;\\n    }\\n    \\n    // ==== Claiming related functions ====\\n    modifier enoughFund() {\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender) || \\n            IERC721(_loot).balanceOf(msg.sender) > 0 || \\n            msg.value >= claimingPrice, \\\"Should pay claimingPrice or own a Loot NFT\\\");\\n        _;\\n    }\\n\\n    function _mintUnclaimedAndUnauctioned(address to, uint256 tokenId) internal {\\n        require(tokenId < block.timestamp / 1 days, \\\"Only past tokenId is claimable\\\");\\n        require(_highestBidder[tokenId] == address(0) && _highestBid[tokenId] == 0, \\\"tokenId should not be auctioned\\\");\\n        require(!_exists(tokenId), \\\"tokenId should not be claimed\\\");\\n\\n        _mint(to, tokenId);\\n    }\\n\\n    function claim(uint256 tokenId) external payable nonReentrant enoughFund {\\n        settleLastAuction();\\n\\n        _mintUnclaimedAndUnauctioned(msg.sender, tokenId);\\n\\n        if (msg.value > 0) {\\n            _foundation.transfer(msg.value);\\n        }\\n        emit ArtworkClaimed(tokenId, msg.sender);\\n    }\\n\\n    function airdrop(address[] memory addresses, uint256[] memory tokenIds) external nonReentrant onlyRole(DEFAULT_ADMIN_ROLE) {\\n        settleLastAuction();\\n        \\n        for (uint i = 0; i < tokenIds.length; ++i) {\\n            address to = addresses[i];\\n            uint256 tokenId = tokenIds[i];\\n            _mintUnclaimedAndUnauctioned(to, tokenId);\\n\\n            emit ArtworkAirdropped(tokenId, to);\\n        }\\n    }\\n\\n    // ==== Auction related functions ==== \\n    function getHighestBid(uint256 tokenId) external view returns (address bidder, uint256 amount) {\\n        return (_highestBidder[tokenId], _highestBid[tokenId]);\\n    }\\n\\n    function settleLastAuction() public {\\n        uint256 tokenId = _lastUnchaimedAuctionedTokenId;\\n\\n        if (block.timestamp / 1 days > tokenId &&  _highestBidder[tokenId] != address(0) && _highestBid[tokenId] > 0 \\n            && !_exists(tokenId)) {\\n            _settleAuction(tokenId);\\n        }\\n    }\\n\\n    function getCurrentAuctionTokenId() public view returns (uint256) {\\n        return block.timestamp / 1 days;\\n    }\\n\\n    function getCurrentMinimumBid() public view returns (uint256 amount) {\\n        uint256 tokenId = block.timestamp / 1 days;\\n        uint256 minimumBid = _highestBid[tokenId] * (10000 + minBidIncrementBps) / 10000;\\n        if (reservePrice > minimumBid) {\\n            minimumBid = reservePrice;\\n        }\\n        return minimumBid;\\n    }\\n\\n    function placeBid() public payable nonReentrant {\\n        uint256 tokenId = block.timestamp / 1 days;\\n        uint256 amount = msg.value;\\n\\n        require(amount >= reservePrice, \\\"Must send more than reservePrice\\\");\\n        require(amount >= getCurrentMinimumBid(), \\\"Must send more than last bid by minBidIncrementBps\\\");\\n\\n        if (_highestBidder[tokenId] == address(0)) {\\n            settleLastAuction();\\n            _lastUnchaimedAuctionedTokenId = tokenId;\\n        } else {\\n            _safeTransferETHWithFallback(_highestBidder[tokenId], _highestBid[tokenId]);\\n        }\\n\\n        _highestBidder[tokenId] = msg.sender;\\n        _highestBid[tokenId] = amount;\\n\\n        emit BidPlaced(tokenId, msg.sender, amount);\\n    }\\n\\n    /// @notice Settle the auction and send the highest bid to the beneficiary.\\n    function _settleAuction(uint256 tokenId) internal {\\n        require(block.timestamp / 1 days > tokenId, \\\"Auction not yet ended\\\");\\n        require(_highestBidder[tokenId] != address(0) && _highestBid[tokenId] > 0, \\\"There should be at least a bid for the date\\\");\\n        require(!_exists(tokenId), \\\"Should not reclaim the auction\\\");\\n\\n        // It cannot be a safeMint. The Auction will never ends.\\n        _mint(_highestBidder[tokenId], tokenId);\\n        _foundation.transfer(_highestBid[tokenId]);\\n\\n        emit AuctionSettled(tokenId, _highestBidder[tokenId], _highestBid[tokenId]);\\n    }\\n\\n    /// @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\\n        if (!_safeTransferETH(to, amount)) {\\n            IWETH(_weth).deposit{ value: amount }();\\n            IERC20(_weth).transfer(to, amount);\\n        }\\n    }\\n\\n    /// @notice Transfer ETH and return the success status.\\n    /// @dev This function only forwards 30,000 gas to the callee.\\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\\n        return success;\\n    }\\n\\n    // ==== Constructor ====\\n    constructor(address foundation_,\\n                address weth_,\\n                address loot_) \\n        ERC721(\\\"The Date\\\", \\\"DATE\\\")\\n    {\\n        _foundation = payable(foundation_);\\n        _weth = weth_;\\n        _loot = loot_;\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        _setupRole(DAO_ROLE, msg.sender);\\n    }\\n\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) \\n        public view override(ERC721Enumerable, AccessControl, IERC165) returns (bool) \\n    {\\n        return ERC721Enumerable.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId) || \\n            type(IERC2981).interfaceId == interfaceId ||\\n            type(IERC165).interfaceId == interfaceId;\\n    }\\n\\n    // ==== Royalty Functions ====\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external view override returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (_foundation, (salePrice * royaltyBps) / 10000);\\n    }\\n\\n    // ==== Day =====\\n        // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function daysToDate(uint256 _days)\\n        public\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    // Default functions\\n    receive() external payable {\\n        placeBid();\\n    }\\n\\n    fallback() external payable {\\n\\n    }\\n}\\n\",\"keccak256\":\"0xf23279d1aab22345775609440d600fba92a89a43d65336cb3e057d798daeffc5\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n  function withdraw(uint wad) external;\\n  function balanceOf(address account) external view returns (uint);\\n  function transfer(address recipient, uint amount) external returns (bool);\\n  function approve(address spender, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x69e587d3fccf5bca0b9c201e1df55b9313bbe1192bc9a41bfbe42bb1d25923cf\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x66b1a2bc2ec50000600c819055600d556103e8600e819055662386f26fc10000600f5567016345785d8a0000601055606460115560125561024060405261013360e081815290620053636101003980516200006391601391602090910190620002e8565b5060408051610200810190915261013360a082018181528291620051f560c08401398152602001604051806040016040528060088152602001677b7b646174657d7d60c01b81525081526020016040518060600160405280603b815260200162005328603b91398152602001604051806040016040528060088152602001677b7b6e6f74657d7d60c01b81525081526020016040518060400160405280600d81526020016c1e17ba32bc3a1f1e17b9bb339f60991b81525081525060149060056200013092919062000377565b5060006018553480156200014357600080fd5b50604051620054963803806200549683398101604081905262000166916200046e565b6040805180820182526008815267546865204461746560c01b6020808301918252835180850190945260048452634441544560e01b908401528151919291620001b291600091620002e8565b508051620001c8906001906020840190620002e8565b50506001600b55506001600160601b0319606084811b821660805283811b821660a05282901b1660c052620001ff60003362000234565b6200022b7f3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26033362000234565b505050620004f5565b62000240828262000244565b5050565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1662000240576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620002a43390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b828054620002f690620004b8565b90600052602060002090601f0160209004810192826200031a576000855562000365565b82601f106200033557805160ff191683800117855562000365565b8280016001018555821562000365579182015b828111156200036557825182559160200191906001019062000348565b5062000373929150620003d7565b5090565b828054828255906000526020600020908101928215620003c9579160200282015b82811115620003c95782518051620003b8918491602090910190620002e8565b509160200191906001019062000398565b5062000373929150620003ee565b5b80821115620003735760008155600101620003d8565b80821115620003735760006200040582826200040f565b50600101620003ee565b5080546200041d90620004b8565b6000825580601f106200042e575050565b601f0160209004906000526020600020908101906200044e9190620003d7565b50565b80516001600160a01b03811681146200046957600080fd5b919050565b6000806000606084860312156200048457600080fd5b6200048f8462000451565b92506200049f6020850162000451565b9150620004af6040850162000451565b90509250925092565b600181811c90821680620004cd57607f821691505b60208210811415620004ef57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160601c60c05160601c614ca46200055160003960006114bb015260008181612a310152612ac6015260008181611223015281816115d00152818161180101528181612814015261351d0152614ca46000f3fe60806040526004361061035f5760003560e01c80635738f36f116101c4578063a74a3e9f116100f6578063da7a739f1161009a578063ecfc7ecc1161006c578063ecfc7ecc14610a6a578063f070d81d14610a72578063f3f5d36b14610a85578063fc43dbd014610a9b57005b8063da7a739f146109d3578063db2e1eed146109e9578063e985e9c5146109ff578063e9c2651814610a4857005b8063b88d4fde116100d3578063b88d4fde1461095d578063c63adb2b1461097d578063c87b56dd14610993578063d547741f146109b357005b8063a74a3e9f14610912578063a881884714610927578063a965a9411461093d57005b80638f288644116101685780639daec71e1161013a5780639daec71e1461089d5780639dc3d812146108bd578063a217fddf146108dd578063a22cb465146108f257005b80638f2886441461080457806391d148541461084857806395d89b4114610868578063970c43101461087d57005b806367243482116101a1578063672434821461078e57806370a08231146107ae5780637a9ae240146107ce5780638dfd1ec8146107ee57005b80635738f36f1461072e578063598acd261461074e5780636352211e1461076e57005b80632a55205a1161029d5780633c085e1211610241578063499305c411610213578063499305c4146106ae5780634d58364b146106ce5780634f558e79146106ee5780634f6ccce71461070e57005b80633c085e121461063b5780633fe800ef1461064e57806342842e0e1461066e57806347b890311461068e57005b80632f745c591161027a5780632f745c59146105d357806336568abe146105f3578063379607f514610613578063396961a31461062657005b80632a55205a146105545780632b57298b146105935780632f2ff15d146105b357005b806318160ddd116103045780631f72d831116102e15780631f72d831146104cf57806323b872dd146104ef578063248a9ca31461050f57806325e6f5161461053f57005b806318160ddd146104845780631c117150146104995780631e826bc0146104af57005b806306fdde031161033d57806306fdde03146103f4578063081812fc146104095780630954305d14610441578063095ea7b31461046457005b8062d5da021461036e578063015e1a0b1461038e57806301ffc9a7146103c457005b3661036c5761036c610ad6565b005b34801561037a57600080fd5b5061036c61038936600461431a565b610ca4565b34801561039a57600080fd5b506103ae6103a93660046142a4565b610cc8565b6040516103bb91906147af565b60405180910390f35b3480156103d057600080fd5b506103e46103df3660046142e0565b610e01565b60405190151581526020016103bb565b34801561040057600080fd5b506103ae610e57565b34801561041557600080fd5b506104296104243660046142a4565b610ee9565b6040516001600160a01b0390911681526020016103bb565b34801561044d57600080fd5b50610456610f71565b6040519081526020016103bb565b34801561047057600080fd5b5061036c61047f3660046140de565b610f85565b34801561049057600080fd5b50600854610456565b3480156104a557600080fd5b50610456600e5481565b3480156104bb57600080fd5b5061036c6104ca3660046142a4565b611096565b3480156104db57600080fd5b5061036c6104ea3660046142a4565b6110ec565b3480156104fb57600080fd5b5061036c61050a366004613fef565b61115f565b34801561051b57600080fd5b5061045661052a3660046142a4565b6000908152600a602052604090206001015490565b34801561054b57600080fd5b506103ae611190565b34801561056057600080fd5b5061057461056f3660046143a5565b61121e565b604080516001600160a01b0390931683526020830191909152016103bb565b34801561059f57600080fd5b506103ae6105ae3660046142a4565b611268565b3480156105bf57600080fd5b5061036c6105ce3660046142bd565b611330565b3480156105df57600080fd5b506104566105ee3660046140de565b611356565b3480156105ff57600080fd5b5061036c61060e3660046142bd565b6113ec565b61036c6106213660046142a4565b61146a565b34801561063257600080fd5b5061036c61164f565b61036c6106493660046142a4565b6116bf565b34801561065a57600080fd5b506103ae6106693660046142a4565b61188d565b34801561067a57600080fd5b5061036c610689366004613fef565b611bbe565b34801561069a57600080fd5b506103ae6106a936600461431a565b611bd9565b3480156106ba57600080fd5b5061036c6106c93660046141cf565b611d7f565b3480156106da57600080fd5b506103ae6106e93660046142a4565b611d9e565b3480156106fa57600080fd5b506103e46107093660046142a4565b611dc9565b34801561071a57600080fd5b506104566107293660046142a4565b611dd4565b34801561073a57600080fd5b506103ae61074936600461431a565b611e67565b34801561075a57600080fd5b5061036c6107693660046142a4565b61202d565b34801561077a57600080fd5b506104296107893660046142a4565b61207b565b34801561079a57600080fd5b5061036c6107a9366004614108565b6120f2565b3480156107ba57600080fd5b506104566107c9366004613fa1565b6121d4565b3480156107da57600080fd5b5061036c6107e93660046142a4565b61225b565b3480156107fa57600080fd5b50610456600c5481565b34801561081057600080fd5b5061057461081f3660046142a4565b6000908152601660209081526040808320546017909252909120546001600160a01b0390911691565b34801561085457600080fd5b506103e46108633660046142bd565b6122a9565b34801561087457600080fd5b506103ae6122d4565b34801561088957600080fd5b5061036c6108983660046142a4565b6122e3565b3480156108a957600080fd5b5061036c6108b83660046142a4565b612331565b3480156108c957600080fd5b5061036c6108d83660046142a4565b61237f565b3480156108e957600080fd5b50610456600081565b3480156108fe57600080fd5b5061036c61090d3660046140a7565b6123cd565b34801561091e57600080fd5b50610456612492565b34801561093357600080fd5b5061045660105481565b34801561094957600080fd5b506103ae6109583660046142a4565b6124f2565b34801561096957600080fd5b5061036c61097836600461402b565b612594565b34801561098957600080fd5b5061045660125481565b34801561099f57600080fd5b506103ae6109ae3660046142a4565b6125cc565b3480156109bf57600080fd5b5061036c6109ce3660046142bd565b612651565b3480156109df57600080fd5b50610456600f5481565b3480156109f557600080fd5b50610456600d5481565b348015610a0b57600080fd5b506103e4610a1a366004613fbc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a5457600080fd5b50610456600080516020614c0f83398151915281565b61036c610ad6565b61036c610a80366004614368565b612677565b348015610a9157600080fd5b5061045660115481565b348015610aa757600080fd5b50610abb610ab63660046142a4565b6128ad565b604080519384526020840192909252908201526060016103bb565b6002600b541415610b025760405162461bcd60e51b8152600401610af9906148ae565b60405180910390fd5b6002600b556000610b1662015180426149c1565b600d549091503490811015610b6d5760405162461bcd60e51b815260206004820181905260248201527f4d7573742073656e64206d6f7265207468616e207265736572766550726963656044820152606401610af9565b610b75612492565b811015610bdf5760405162461bcd60e51b815260206004820152603260248201527f4d7573742073656e64206d6f7265207468616e206c61737420626964206279206044820152716d696e426964496e6372656d656e7442707360701b6064820152608401610af9565b6000828152601660205260409020546001600160a01b0316610c0d57610c0361164f565b6018829055610c3b565b600082815260166020908152604080832054601790925290912054610c3b916001600160a01b031690612a21565b600082815260166020908152604080832080546001600160a01b0319163390811790915560178352928190208490555183815284917f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c47910160405180910390a350506001600b55565b6000610cb08133612b46565b8151610cc3906013906020850190613d52565b505050565b6060610cd382612baa565b610d195760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b9259081a5cc81b9bdb8b595e1a5cdd195b9d604a1b6044820152606401610af9565b6000610d2c610d278461188d565b612bc7565b90506000610d3984612d2f565b610d4285611268565b610dd560138054610d5290614b12565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7e90614b12565b8015610dcb5780601f10610da057610100808354040283529160200191610dcb565b820191906000526020600020905b815481529060010190602001808311610dae57829003601f168201915b5050505050611bd9565b84604051602001610de994939291906145bd565b60408051601f19818403018152919052949350505050565b6000610e0c82612e35565b80610e1b5750610e1b82612e5a565b80610e36575063152a902d60e11b6001600160e01b03198316145b80610e5157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610e6690614b12565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9290614b12565b8015610edf5780601f10610eb457610100808354040283529160200191610edf565b820191906000526020600020905b815481529060010190602001808311610ec257829003601f168201915b5050505050905090565b6000610ef482612baa565b610f555760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610af9565b506000908152600460205260409020546001600160a01b031690565b6000610f8062015180426149c1565b905090565b6000610f908261207b565b9050806001600160a01b0316836001600160a01b03161415610ffe5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610af9565b336001600160a01b038216148061101a575061101a8133610a1a565b61108c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610af9565b610cc38383612e7f565b600080516020614c0f8339815191526110af8133612b46565b600c8290556040518281527f696ca9f32ad4aedb63d39a2bc82f3a93b74dd917d4c64f03b7dd37a2bfa79c3e906020015b60405180910390a15050565b60006110f88133612b46565b6127108211156111595760405162461bcd60e51b815260206004820152602660248201527f726f79616c74794270732073686f756c642062652077697468696e205b302c2060448201526531303030305d60d01b6064820152608401610af9565b50601255565b6111693382612eed565b6111855760405162461bcd60e51b8152600401610af99061485d565b610cc3838383612fd3565b6013805461119d90614b12565b80601f01602080910402602001604051908101604052809291908181526020018280546111c990614b12565b80156112165780601f106111eb57610100808354040283529160200191611216565b820191906000526020600020905b8154815290600101906020018083116111f957829003601f168201915b505050505081565b6000807f0000000000000000000000000000000000000000000000000000000000000000612710601254856112539190614a5a565b61125d91906149c1565b915091509250929050565b60606000806000611278856128ad565b925092509250600061128984612d2f565b9050600061129684612d2f565b90508051600114156112c557806040516020016112b39190614594565b60405160208183030381529060405290505b60006112d084612d2f565b90508051600114156112ff57806040516020016112ed9190614594565b60405160208183030381529060405290505b82828260405160200161131493929190614511565b6040516020818303038152906040529650505050505050919050565b6000828152600a602052604090206001015461134c8133612b46565b610cc3838361317e565b6000611361836121d4565b82106113c35760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610af9565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b038116331461145c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610af9565b6114668282613204565b5050565b6002600b54141561148d5760405162461bcd60e51b8152600401610af9906148ae565b6002600b5561149d6000336122a9565b8061153f57506040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561150557600080fd5b505afa158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d919061434f565b115b8061154c5750600c543410155b6115ab5760405162461bcd60e51b815260206004820152602a60248201527f53686f756c642070617920636c61696d696e675072696365206f72206f776e206044820152691848131bdbdd0813919560b21b6064820152608401610af9565b6115b361164f565b6115bd338261326b565b341561161a576040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f19350505050158015611618573d6000803e3d6000fd5b505b604051339082907fce8230f82e484df1d81d3f449132eed44e758f95df463079b72a869f75d341cf90600090a3506001600b55565b6018548061166062015180426149c1565b11801561168357506000818152601660205260409020546001600160a01b031615155b801561169c575060008181526017602052604090205415155b80156116ae57506116ac81612baa565b155b156116bc576116bc816133a3565b50565b80336116ca8261207b565b6001600160a01b0316146116f05760405162461bcd60e51b8152600401610af990614814565b6116fb6000336122a9565b8061170857506010543410155b6117545760405162461bcd60e51b815260206004820152601760248201527f53686f756c64207061792065726173696e6750726963650000000000000000006044820152606401610af9565b6000828152601560205260408120805461176d90614b12565b9050116117cb5760405162461bcd60e51b815260206004820152602660248201527f4e6f74652073686f756c64206265206e6f6e656d707479206265666f72652065604482015265726173696e6760d01b6064820152608401610af9565b6040805160208082018084526000808452868152601590925292902090516117f39290613d52565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f19350505050158015611849573d6000803e3d6000fd5b506118538261207b565b6001600160a01b0316827ff5cd03e250f4dc67cb934696b1ae84a530d007600f8c2b64cb1097e04cd49ae960405160405180910390a35050565b606061189882612baa565b6118de5760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b9259081a5cc81b9bdb8b595e1a5cdd195b9d604a1b6044820152606401610af9565b60006118e983611268565b905060006118f6846124f2565b60408051602081019091526000808252919250905b601454811015611bb55760606119e66014838154811061192d5761192d614bbe565b90600052602060002001805461194290614b12565b80601f016020809104026020016040519081016040528092919081815260200182805461196e90614b12565b80156119bb5780601f10611990576101008083540402835291602001916119bb565b820191906000526020600020905b81548152906001019060200180831161199e57829003601f168201915b5050505050604051806040016040528060088152602001677b7b646174657d7d60c01b8152506135c1565b156119f2575083611b7f565b611ac160148381548110611a0857611a08614bbe565b906000526020600020018054611a1d90614b12565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4990614b12565b8015611a965780601f10611a6b57610100808354040283529160200191611a96565b820191906000526020600020905b815481529060010190602001808311611a7957829003601f168201915b5050505050604051806040016040528060088152602001677b7b6e6f74657d7d60c01b8152506135c1565b15611ad657611acf84611e67565b9050611b7f565b60148281548110611ae957611ae9614bbe565b906000526020600020018054611afe90614b12565b80601f0160208091040260200160405190810160405280929190818152602001828054611b2a90614b12565b8015611b775780601f10611b4c57610100808354040283529160200191611b77565b820191906000526020600020905b815481529060010190602001808311611b5a57829003601f168201915b505050505090505b8281604051602001611b9292919061443e565b60405160208183030381529060405292505080611bae90614b4d565b905061190b565b50949350505050565b610cc383838360405180602001604052806000815250612594565b6060816000805b8251811015611c3657828181518110611bfb57611bfb614bbe565b6020910101516001600160f81b031916601160f91b1415611c245781611c2081614b4d565b9250505b80611c2e81614b4d565b915050611be0565b508015611d77576000818351611c4c919061497b565b67ffffffffffffffff811115611c6457611c64614bd4565b6040519080825280601f01601f191660200182016040528015611c8e576020820181803683370190505b5090506000805b8451811015611d6c57848181518110611cb057611cb0614bbe565b6020910101516001600160f81b031916601160f91b1415611d0557601760fa1b8383611cdb81614b4d565b945081518110611ced57611ced614bbe565b60200101906001600160f81b031916908160001a9053505b848181518110611d1757611d17614bbe565b01602001516001600160f81b0319168383611d3181614b4d565b945081518110611d4357611d43614bbe565b60200101906001600160f81b031916908160001a90535080611d6481614b4d565b915050611c95565b509095945050505050565b509192915050565b6000611d8b8133612b46565b8151610cc3906014906020850190613dd6565b60148181548110611dae57600080fd5b90600052602060002001600091509050805461119d90614b12565b6000610e5182612baa565b6000611ddf60085490565b8210611e425760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610af9565b60088281548110611e5557611e55614bbe565b90600052602060002001549050919050565b6040805160208101909152600080825260609183915b825181101561202557828181518110611e9857611e98614bbe565b6020910101516001600160f81b031916600f60fa1b1415611eda5781604051602001611ec49190614497565b6040516020818303038152906040529150612013565b828181518110611eec57611eec614bbe565b6020910101516001600160f81b031916601f60f91b1415611f185781604051602001611ec491906144bf565b828181518110611f2a57611f2a614bbe565b6020910101516001600160f81b031916601360f91b1415611f565781604051602001611ec4919061456b565b828181518110611f6857611f68614bbe565b6020910101516001600160f81b031916601160f91b1415611f945781604051602001611ec491906144e7565b828181518110611fa657611fa6614bbe565b6020910101516001600160f81b031916602760f81b1415611fd25781604051602001611ec4919061446d565b81838281518110611fe557611fe5614bbe565b602001015160f81c60f81b60405160200161200192919061440f565b60405160208183030381529060405291505b8061201d81614b4d565b915050611e7d565b509392505050565b600080516020614c0f8339815191526120468133612b46565b600f8290556040518281527f6ea43baebf767c8984d2da6f4e06b71e7093fcb9d3c0c516cd51ac6b15fa11d7906020016110e0565b6000818152600260205260408120546001600160a01b031680610e515760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610af9565b6002600b5414156121155760405162461bcd60e51b8152600401610af9906148ae565b6002600b5560006121268133612b46565b61212e61164f565b60005b82518110156121c957600084828151811061214e5761214e614bbe565b60200260200101519050600084838151811061216c5761216c614bbe565b60200260200101519050612180828261326b565b6040516001600160a01b0383169082907f6f1a5977e7036a4d672e1db1ca046ec0bd742ef9a38fe8d46823fd17dae6083190600090a35050806121c290614b4d565b9050612131565b50506001600b555050565b60006001600160a01b03821661223f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610af9565b506001600160a01b031660009081526003602052604090205490565b600080516020614c0f8339815191526122748133612b46565b60118290556040518281527f808020969425956198bf055c9d59c389614dd21f915904f05b2d21ea161cd4ec906020016110e0565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060018054610e6690614b12565b600080516020614c0f8339815191526122fc8133612b46565b600e8290556040518281527ff4ec2a844abf83d803887787f1c1ce8de91c40e66ea4a395779beb8c0d904a41906020016110e0565b600080516020614c0f83398151915261234a8133612b46565b600d8290556040518281527f921c658aa55473adf5c5112e48ef56de846ddb3e4e57e8888cb24a81b3b27273906020016110e0565b600080516020614c0f8339815191526123988133612b46565b60108290556040518281527f1b5c73c6da4bab6f305baea61b3dfd41973701830ad8e35dfdf24eba3d3d6de0906020016110e0565b6001600160a01b0382163314156124265760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610af9565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000806124a262015180426149c1565b90506000612710600e546127106124b9919061497b565b6000848152601760205260409020546124d29190614a5a565b6124dc91906149c1565b905080600d541115610e515750600d5492915050565b600081815260156020526040902080546060919061250f90614b12565b80601f016020809104026020016040519081016040528092919081815260200182805461253b90614b12565b80156125885780601f1061255d57610100808354040283529160200191612588565b820191906000526020600020905b81548152906001019060200180831161256b57829003601f168201915b50505050509050919050565b61259e3383612eed565b6125ba5760405162461bcd60e51b8152600401610af99061485d565b6125c684848484613626565b50505050565b60606125d782612baa565b61261c5760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b9259081a5cc81b9bdb995e1a5cdd195b9d60521b6044820152606401610af9565b600061262a610d2784610cc8565b60405160200161263a91906146b8565b60408051601f198184030181529190529392505050565b6000828152600a602052604090206001015461266d8133612b46565b610cc38383613204565b81336126828261207b565b6001600160a01b0316146126a85760405162461bcd60e51b8152600401610af990614814565b8160115481511061270d5760405162461bcd60e51b815260206004820152602960248201527f4e6f74652073686f756c642062652073686f72746572207468616e206e6f746560448201526814da5e99531a5b5a5d60ba1b6064820152608401610af9565b6127186000336122a9565b806127255750600f543410155b6127715760405162461bcd60e51b815260206004820152601960248201527f53686f756c642070617920656e67726176696e675072696365000000000000006044820152606401610af9565b6000848152601560205260409020805461278a90614b12565b1590506127e75760405162461bcd60e51b815260206004820152602560248201527f4e6f74652073686f756c6420626520656d707479206265666f726520656e67726044820152646176696e6760d81b6064820152608401610af9565b6000848152601560209081526040909120845161280692860190613d52565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f1935050505015801561285c573d6000803e3d6000fd5b506128668461207b565b6001600160a01b0316847fed9e0bea058528ee91b5c24513bbdb6ad21da03e6bc7108b7623af9d1231e07b8560405161289f91906147af565b60405180910390a350505050565b60008080838162253d8c6128c48362010bd961493a565b6128ce919061493a565b9050600062023ab16128e18360046149d5565b6128eb9190614993565b905060046128fc8262023ab16149d5565b61290790600361493a565b6129119190614993565b61291b9083614a79565b9150600062164b0961292e84600161493a565b61293a90610fa06149d5565b6129449190614993565b90506004612954826105b56149d5565b61295e9190614993565b6129689084614a79565b61297390601f61493a565b9250600061098f6129858560506149d5565b61298f9190614993565b9050600060506129a18361098f6149d5565b6129ab9190614993565b6129b59086614a79565b90506129c2600b83614993565b94506129cf85600c6149d5565b6129da83600261493a565b6129e49190614a79565b915084836129f3603187614a79565b6129fe9060646149d5565b612a08919061493a565b612a12919061493a565b9a919950975095505050505050565b612a2b8282613659565b611466577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a8a57600080fd5b505af1158015612a9e573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506044019050602060405180830381600087803b158015612b0e57600080fd5b505af1158015612b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190614287565b612b5082826122a9565b61146657612b68816001600160a01b031660146136c7565b612b738360206136c7565b604051602001612b849291906146fd565b60408051601f198184030181529082905262461bcd60e51b8252610af9916004016147af565b6000908152600260205260409020546001600160a01b0316151590565b6060815160001415612be757505060408051602081019091526000815290565b6000604051806060016040528060408152602001614c2f6040913990506000600384516002612c16919061497b565b612c2091906149c1565b612c2b906004614a5a565b90506000612c3a82602061497b565b67ffffffffffffffff811115612c5257612c52614bd4565b6040519080825280601f01601f191660200182016040528015612c7c576020820181803683370190505b509050818152600183018586518101602084015b81831015612cea5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401612c90565b600389510660018114612d045760028114612d1557612d21565b613d3d60f01b600119830152612d21565b603d60f81b6000198301525b509398975050505050505050565b606081612d535750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612d7d5780612d6781614b4d565b9150612d769050600a836149c1565b9150612d57565b60008167ffffffffffffffff811115612d9857612d98614bd4565b6040519080825280601f01601f191660200182016040528015612dc2576020820181803683370190505b5090505b8415612e2d57612dd7600183614ab8565b9150612de4600a86614b68565b612def90603061497b565b60f81b818381518110612e0457612e04614bbe565b60200101906001600160f81b031916908160001a905350612e26600a866149c1565b9450612dc6565b949350505050565b60006001600160e01b0319821663780e9d6360e01b1480610e515750610e5182613863565b60006001600160e01b03198216637965db0b60e01b1480610e515750610e5182612e35565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612eb48261207b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612ef882612baa565b612f595760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610af9565b6000612f648361207b565b9050806001600160a01b0316846001600160a01b03161480612f9f5750836001600160a01b0316612f9484610ee9565b6001600160a01b0316145b80612e2d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612e2d565b826001600160a01b0316612fe68261207b565b6001600160a01b03161461304e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610af9565b6001600160a01b0382166130b05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610af9565b6130bb8383836138b3565b6130c6600082612e7f565b6001600160a01b03831660009081526003602052604081208054600192906130ef908490614ab8565b90915550506001600160a01b038216600090815260036020526040812080546001929061311d90849061497b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61318882826122a9565b611466576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556131c03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61320e82826122a9565b15611466576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61327862015180426149c1565b81106132c65760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79207061737420746f6b656e496420697320636c61696d61626c6500006044820152606401610af9565b6000818152601660205260409020546001600160a01b03161580156132f75750600081815260176020526040902054155b6133435760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e49642073686f756c64206e6f742062652061756374696f6e6564006044820152606401610af9565b61334c81612baa565b156133995760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e49642073686f756c64206e6f7420626520636c61696d65640000006044820152606401610af9565b61146682826138be565b806133b162015180426149c1565b116133f65760405162461bcd60e51b8152602060048201526015602482015274105d58dd1a5bdb881b9bdd081e595d08195b991959605a1b6044820152606401610af9565b6000818152601660205260409020546001600160a01b031615801590613429575060008181526017602052604090205415155b6134895760405162461bcd60e51b815260206004820152602b60248201527f54686572652073686f756c64206265206174206c65617374206120626964206660448201526a6f7220746865206461746560a81b6064820152608401610af9565b61349281612baa565b156134df5760405162461bcd60e51b815260206004820152601e60248201527f53686f756c64206e6f74207265636c61696d207468652061756374696f6e00006044820152606401610af9565b600081815260166020526040902054613501906001600160a01b0316826138be565b6000818152601760205260408082205490516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169282156108fc02929190818181858888f19350505050158015613564573d6000803e3d6000fd5b5060008181526016602090815260408083205460178352928190205490519081526001600160a01b039092169183917fc9f72b276a388619c6d185d146697036241880c36654b1a3ffdad07c24038d99910160405180910390a350565b60008151835114801561361f5750816040516020016135e091906143f3565b604051602081830303815290604052805190602001208360405160200161360791906143f3565b60405160208183030381529060405280519060200120145b9392505050565b613631848484612fd3565b61363d848484846139fd565b6125c65760405162461bcd60e51b8152600401610af9906147c2565b6040805160008082526020820190925281906001600160a01b0385169061753090859060405161368991906143f3565b600060405180830381858888f193505050503d8060008114611d6c576040519150601f19603f3d011682016040523d82523d6000602084013e611d6c565b606060006136d6836002614a5a565b6136e190600261497b565b67ffffffffffffffff8111156136f9576136f9614bd4565b6040519080825280601f01601f191660200182016040528015613723576020820181803683370190505b509050600360fc1b8160008151811061373e5761373e614bbe565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061376d5761376d614bbe565b60200101906001600160f81b031916908160001a9053506000613791846002614a5a565b61379c90600161497b565b90505b6001811115613814576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106137d0576137d0614bbe565b1a60f81b8282815181106137e6576137e6614bbe565b60200101906001600160f81b031916908160001a90535060049490941c9361380d81614afb565b905061379f565b50831561361f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610af9565b60006001600160e01b031982166380ac58cd60e01b148061389457506001600160e01b03198216635b5e139f60e01b145b80610e5157506301ffc9a760e01b6001600160e01b0319831614610e51565b610cc3838383613b0a565b6001600160a01b0382166139145760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610af9565b61391d81612baa565b1561396a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610af9565b613976600083836138b3565b6001600160a01b038216600090815260036020526040812080546001929061399f90849061497b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613aff57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613a41903390899088908890600401614772565b602060405180830381600087803b158015613a5b57600080fd5b505af1925050508015613a8b575060408051601f3d908101601f19168201909252613a88918101906142fd565b60015b613ae5573d808015613ab9576040519150601f19603f3d011682016040523d82523d6000602084013e613abe565b606091505b508051613add5760405162461bcd60e51b8152600401610af9906147c2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612e2d565b506001949350505050565b6001600160a01b038316613b6557613b6081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613b88565b816001600160a01b0316836001600160a01b031614613b8857613b888382613bc2565b6001600160a01b038216613b9f57610cc381613c5f565b826001600160a01b0316826001600160a01b031614610cc357610cc38282613d0e565b60006001613bcf846121d4565b613bd99190614ab8565b600083815260076020526040902054909150808214613c2c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613c7190600190614ab8565b60008381526009602052604081205460088054939450909284908110613c9957613c99614bbe565b906000526020600020015490508060088381548110613cba57613cba614bbe565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613cf257613cf2614ba8565b6001900381819060005260206000200160009055905550505050565b6000613d19836121d4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054613d5e90614b12565b90600052602060002090601f016020900481019282613d805760008555613dc6565b82601f10613d9957805160ff1916838001178555613dc6565b82800160010185558215613dc6579182015b82811115613dc6578251825591602001919060010190613dab565b50613dd2929150613e2f565b5090565b828054828255906000526020600020908101928215613e23579160200282015b82811115613e235782518051613e13918491602090910190613d52565b5091602001919060010190613df6565b50613dd2929150613e44565b5b80821115613dd25760008155600101613e30565b80821115613dd2576000613e588282613e61565b50600101613e44565b508054613e6d90614b12565b6000825580601f10613e7d575050565b601f0160209004906000526020600020908101906116bc9190613e2f565b600067ffffffffffffffff831115613eb557613eb5614bd4565b613ec8601f8401601f19166020016148e5565b9050828152838383011115613edc57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114613f0a57600080fd5b919050565b600082601f830112613f2057600080fd5b81356020613f35613f3083614916565b6148e5565b80838252828201915082860187848660051b8901011115613f5557600080fd5b60005b85811015613f7457813584529284019290840190600101613f58565b5090979650505050505050565b600082601f830112613f9257600080fd5b61361f83833560208501613e9b565b600060208284031215613fb357600080fd5b61361f82613ef3565b60008060408385031215613fcf57600080fd5b613fd883613ef3565b9150613fe660208401613ef3565b90509250929050565b60008060006060848603121561400457600080fd5b61400d84613ef3565b925061401b60208501613ef3565b9150604084013590509250925092565b6000806000806080858703121561404157600080fd5b61404a85613ef3565b935061405860208601613ef3565b925060408501359150606085013567ffffffffffffffff81111561407b57600080fd5b8501601f8101871361408c57600080fd5b61409b87823560208401613e9b565b91505092959194509250565b600080604083850312156140ba57600080fd5b6140c383613ef3565b915060208301356140d381614bea565b809150509250929050565b600080604083850312156140f157600080fd5b6140fa83613ef3565b946020939093013593505050565b6000806040838503121561411b57600080fd5b823567ffffffffffffffff8082111561413357600080fd5b818501915085601f83011261414757600080fd5b81356020614157613f3083614916565b8083825282820191508286018a848660051b890101111561417757600080fd5b600096505b848710156141a15761418d81613ef3565b83526001969096019591830191830161417c565b50965050860135925050808211156141b857600080fd5b506141c585828601613f0f565b9150509250929050565b600060208083850312156141e257600080fd5b823567ffffffffffffffff808211156141fa57600080fd5b818501915085601f83011261420e57600080fd5b813561421c613f3082614916565b80828252858201915085850189878560051b880101111561423c57600080fd5b6000805b8581101561427757823587811115614256578283fd5b6142648d8b838c0101613f81565b8652509388019391880191600101614240565b50919a9950505050505050505050565b60006020828403121561429957600080fd5b815161361f81614bea565b6000602082840312156142b657600080fd5b5035919050565b600080604083850312156142d057600080fd5b82359150613fe660208401613ef3565b6000602082840312156142f257600080fd5b813561361f81614bf8565b60006020828403121561430f57600080fd5b815161361f81614bf8565b60006020828403121561432c57600080fd5b813567ffffffffffffffff81111561434357600080fd5b612e2d84828501613f81565b60006020828403121561436157600080fd5b5051919050565b6000806040838503121561437b57600080fd5b82359150602083013567ffffffffffffffff81111561439957600080fd5b6141c585828601613f81565b600080604083850312156143b857600080fd5b50508035926020909101359150565b600081518084526143df816020860160208601614acf565b601f01601f19169290920160200192915050565b60008251614405818460208701614acf565b9190910192915050565b60008351614421818460208801614acf565b6001600160f81b0319939093169190920190815260010192915050565b60008351614450818460208801614acf565b835190830190614464818360208801614acf565b01949350505050565b6000825161447f818460208701614acf565b652661706f733b60d01b920191825250600601919050565b600082516144a9818460208701614acf565b63266c743b60e01b920191825250600401919050565b600082516144d1818460208701614acf565b632667743b60e01b920191825250600401919050565b600082516144f9818460208701614acf565b652671756f743b60d01b920191825250600601919050565b60008451614523818460208901614acf565b8083019050602d60f81b8082528551614543816001850160208a01614acf565b6001920191820152835161455e816002840160208801614acf565b0160020195945050505050565b6000825161457d818460208701614acf565b6426616d703b60d81b920191825250600501919050565b600360fc1b8152600082516145b0816001850160208701614acf565b9190910160010192915050565b737b226e616d65223a20225468652044617465202360601b815284516000906145ed816014850160208a01614acf565b6101d160f51b601491840191820152855161460f816016840160208a01614acf565b72111610113232b9b1b934b83a34b7b7111d101160691b601692909101918201528451614643816029840160208901614acf565b6014818301019150507f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b60158201526618985cd94d8d0b60ca1b6035820152835161469581603c840160208801614acf565b6146ac603c8383010161227d60f01b815260020190565b98975050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516146f081601d850160208701614acf565b91909101601d0192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614735816017850160208801614acf565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614766816028840160208801614acf565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906147a5908301846143c7565b9695505050505050565b60208152600061361f60208301846143c7565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526029908201527f43616c6c65722073686f756c6420626520746865206f776e6572206f662074686040820152686520617274776f726b60b81b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561490e5761490e614bd4565b604052919050565b600067ffffffffffffffff82111561493057614930614bd4565b5060051b60200190565b600080821280156001600160ff1b038490038513161561495c5761495c614b7c565b600160ff1b839003841281161561497557614975614b7c565b50500190565b6000821982111561498e5761498e614b7c565b500190565b6000826149a2576149a2614b92565b600160ff1b8214600019841416156149bc576149bc614b7c565b500590565b6000826149d0576149d0614b92565b500490565b60006001600160ff1b03818413828413808216868404861116156149fb576149fb614b7c565b600160ff1b6000871282811687830589121615614a1a57614a1a614b7c565b60008712925087820587128484161615614a3657614a36614b7c565b87850587128184161615614a4c57614a4c614b7c565b505050929093029392505050565b6000816000190483118215151615614a7457614a74614b7c565b500290565b60008083128015600160ff1b850184121615614a9757614a97614b7c565b6001600160ff1b0384018313811615614ab257614ab2614b7c565b50500390565b600082821015614aca57614aca614b7c565b500390565b60005b83811015614aea578181015183820152602001614ad2565b838111156125c65750506000910152565b600081614b0a57614b0a614b7c565b506000190190565b600181811c90821680614b2657607f821691505b60208210811415614b4757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614b6157614b61614b7c565b5060010190565b600082614b7757614b77614b92565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146116bc57600080fd5b6001600160e01b0319811681146116bc57600080fdfe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26034142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220639eee7b18c208bea6aec9e3e8e521f0a0a152208b700707fd692c9f3cee36a964736f6c634300080700333c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302035303020353030223e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d22626c61636b22202f3e3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e742d66616d696c793a206d6f6e6f73706163653b20646f6d696e616e742d626173656c696e653a206d6964646c653b20746578742d616e63686f723a206d6964646c653b207d3c2f7374796c653e3c7465787420783d223530252220793d223530252220666f6e742d73697a653d22353070782220636c6173733d2262617365223e3c2f746578743e3c7465787420783d223530252220793d223930252220666f6e742d73697a653d22313070782220636c6173733d2262617365223e54686520446174652069732061206d657461646174612d6261736564204e465420617274206578706572696d656e742061626f75742074696d6520616e6420626c6f636b636861696e2e204561636820666c656574696e672064617920776f756c6420626520696d7072696e74656420696e746f20616e204e465420617274776f726b20696d6d757461626c79206c617374696e6720666f72657665722e20546865206f776e65722063616e20656e6772617665206f722065726173652061206e6f7465206f6e2074686520617274776f726b20617320616e206164646974696f6e616c206d657461646174612e205468652044617465206973206d657461646174612e204665656c206672656520746f2075736520746865204461746520696e20616e792077617920796f752077616e742e",
  "deployedBytecode": "0x60806040526004361061035f5760003560e01c80635738f36f116101c4578063a74a3e9f116100f6578063da7a739f1161009a578063ecfc7ecc1161006c578063ecfc7ecc14610a6a578063f070d81d14610a72578063f3f5d36b14610a85578063fc43dbd014610a9b57005b8063da7a739f146109d3578063db2e1eed146109e9578063e985e9c5146109ff578063e9c2651814610a4857005b8063b88d4fde116100d3578063b88d4fde1461095d578063c63adb2b1461097d578063c87b56dd14610993578063d547741f146109b357005b8063a74a3e9f14610912578063a881884714610927578063a965a9411461093d57005b80638f288644116101685780639daec71e1161013a5780639daec71e1461089d5780639dc3d812146108bd578063a217fddf146108dd578063a22cb465146108f257005b80638f2886441461080457806391d148541461084857806395d89b4114610868578063970c43101461087d57005b806367243482116101a1578063672434821461078e57806370a08231146107ae5780637a9ae240146107ce5780638dfd1ec8146107ee57005b80635738f36f1461072e578063598acd261461074e5780636352211e1461076e57005b80632a55205a1161029d5780633c085e1211610241578063499305c411610213578063499305c4146106ae5780634d58364b146106ce5780634f558e79146106ee5780634f6ccce71461070e57005b80633c085e121461063b5780633fe800ef1461064e57806342842e0e1461066e57806347b890311461068e57005b80632f745c591161027a5780632f745c59146105d357806336568abe146105f3578063379607f514610613578063396961a31461062657005b80632a55205a146105545780632b57298b146105935780632f2ff15d146105b357005b806318160ddd116103045780631f72d831116102e15780631f72d831146104cf57806323b872dd146104ef578063248a9ca31461050f57806325e6f5161461053f57005b806318160ddd146104845780631c117150146104995780631e826bc0146104af57005b806306fdde031161033d57806306fdde03146103f4578063081812fc146104095780630954305d14610441578063095ea7b31461046457005b8062d5da021461036e578063015e1a0b1461038e57806301ffc9a7146103c457005b3661036c5761036c610ad6565b005b34801561037a57600080fd5b5061036c61038936600461431a565b610ca4565b34801561039a57600080fd5b506103ae6103a93660046142a4565b610cc8565b6040516103bb91906147af565b60405180910390f35b3480156103d057600080fd5b506103e46103df3660046142e0565b610e01565b60405190151581526020016103bb565b34801561040057600080fd5b506103ae610e57565b34801561041557600080fd5b506104296104243660046142a4565b610ee9565b6040516001600160a01b0390911681526020016103bb565b34801561044d57600080fd5b50610456610f71565b6040519081526020016103bb565b34801561047057600080fd5b5061036c61047f3660046140de565b610f85565b34801561049057600080fd5b50600854610456565b3480156104a557600080fd5b50610456600e5481565b3480156104bb57600080fd5b5061036c6104ca3660046142a4565b611096565b3480156104db57600080fd5b5061036c6104ea3660046142a4565b6110ec565b3480156104fb57600080fd5b5061036c61050a366004613fef565b61115f565b34801561051b57600080fd5b5061045661052a3660046142a4565b6000908152600a602052604090206001015490565b34801561054b57600080fd5b506103ae611190565b34801561056057600080fd5b5061057461056f3660046143a5565b61121e565b604080516001600160a01b0390931683526020830191909152016103bb565b34801561059f57600080fd5b506103ae6105ae3660046142a4565b611268565b3480156105bf57600080fd5b5061036c6105ce3660046142bd565b611330565b3480156105df57600080fd5b506104566105ee3660046140de565b611356565b3480156105ff57600080fd5b5061036c61060e3660046142bd565b6113ec565b61036c6106213660046142a4565b61146a565b34801561063257600080fd5b5061036c61164f565b61036c6106493660046142a4565b6116bf565b34801561065a57600080fd5b506103ae6106693660046142a4565b61188d565b34801561067a57600080fd5b5061036c610689366004613fef565b611bbe565b34801561069a57600080fd5b506103ae6106a936600461431a565b611bd9565b3480156106ba57600080fd5b5061036c6106c93660046141cf565b611d7f565b3480156106da57600080fd5b506103ae6106e93660046142a4565b611d9e565b3480156106fa57600080fd5b506103e46107093660046142a4565b611dc9565b34801561071a57600080fd5b506104566107293660046142a4565b611dd4565b34801561073a57600080fd5b506103ae61074936600461431a565b611e67565b34801561075a57600080fd5b5061036c6107693660046142a4565b61202d565b34801561077a57600080fd5b506104296107893660046142a4565b61207b565b34801561079a57600080fd5b5061036c6107a9366004614108565b6120f2565b3480156107ba57600080fd5b506104566107c9366004613fa1565b6121d4565b3480156107da57600080fd5b5061036c6107e93660046142a4565b61225b565b3480156107fa57600080fd5b50610456600c5481565b34801561081057600080fd5b5061057461081f3660046142a4565b6000908152601660209081526040808320546017909252909120546001600160a01b0390911691565b34801561085457600080fd5b506103e46108633660046142bd565b6122a9565b34801561087457600080fd5b506103ae6122d4565b34801561088957600080fd5b5061036c6108983660046142a4565b6122e3565b3480156108a957600080fd5b5061036c6108b83660046142a4565b612331565b3480156108c957600080fd5b5061036c6108d83660046142a4565b61237f565b3480156108e957600080fd5b50610456600081565b3480156108fe57600080fd5b5061036c61090d3660046140a7565b6123cd565b34801561091e57600080fd5b50610456612492565b34801561093357600080fd5b5061045660105481565b34801561094957600080fd5b506103ae6109583660046142a4565b6124f2565b34801561096957600080fd5b5061036c61097836600461402b565b612594565b34801561098957600080fd5b5061045660125481565b34801561099f57600080fd5b506103ae6109ae3660046142a4565b6125cc565b3480156109bf57600080fd5b5061036c6109ce3660046142bd565b612651565b3480156109df57600080fd5b50610456600f5481565b3480156109f557600080fd5b50610456600d5481565b348015610a0b57600080fd5b506103e4610a1a366004613fbc565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b348015610a5457600080fd5b50610456600080516020614c0f83398151915281565b61036c610ad6565b61036c610a80366004614368565b612677565b348015610a9157600080fd5b5061045660115481565b348015610aa757600080fd5b50610abb610ab63660046142a4565b6128ad565b604080519384526020840192909252908201526060016103bb565b6002600b541415610b025760405162461bcd60e51b8152600401610af9906148ae565b60405180910390fd5b6002600b556000610b1662015180426149c1565b600d549091503490811015610b6d5760405162461bcd60e51b815260206004820181905260248201527f4d7573742073656e64206d6f7265207468616e207265736572766550726963656044820152606401610af9565b610b75612492565b811015610bdf5760405162461bcd60e51b815260206004820152603260248201527f4d7573742073656e64206d6f7265207468616e206c61737420626964206279206044820152716d696e426964496e6372656d656e7442707360701b6064820152608401610af9565b6000828152601660205260409020546001600160a01b0316610c0d57610c0361164f565b6018829055610c3b565b600082815260166020908152604080832054601790925290912054610c3b916001600160a01b031690612a21565b600082815260166020908152604080832080546001600160a01b0319163390811790915560178352928190208490555183815284917f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c47910160405180910390a350506001600b55565b6000610cb08133612b46565b8151610cc3906013906020850190613d52565b505050565b6060610cd382612baa565b610d195760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b9259081a5cc81b9bdb8b595e1a5cdd195b9d604a1b6044820152606401610af9565b6000610d2c610d278461188d565b612bc7565b90506000610d3984612d2f565b610d4285611268565b610dd560138054610d5290614b12565b80601f0160208091040260200160405190810160405280929190818152602001828054610d7e90614b12565b8015610dcb5780601f10610da057610100808354040283529160200191610dcb565b820191906000526020600020905b815481529060010190602001808311610dae57829003601f168201915b5050505050611bd9565b84604051602001610de994939291906145bd565b60408051601f19818403018152919052949350505050565b6000610e0c82612e35565b80610e1b5750610e1b82612e5a565b80610e36575063152a902d60e11b6001600160e01b03198316145b80610e5157506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610e6690614b12565b80601f0160208091040260200160405190810160405280929190818152602001828054610e9290614b12565b8015610edf5780601f10610eb457610100808354040283529160200191610edf565b820191906000526020600020905b815481529060010190602001808311610ec257829003601f168201915b5050505050905090565b6000610ef482612baa565b610f555760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610af9565b506000908152600460205260409020546001600160a01b031690565b6000610f8062015180426149c1565b905090565b6000610f908261207b565b9050806001600160a01b0316836001600160a01b03161415610ffe5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610af9565b336001600160a01b038216148061101a575061101a8133610a1a565b61108c5760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610af9565b610cc38383612e7f565b600080516020614c0f8339815191526110af8133612b46565b600c8290556040518281527f696ca9f32ad4aedb63d39a2bc82f3a93b74dd917d4c64f03b7dd37a2bfa79c3e906020015b60405180910390a15050565b60006110f88133612b46565b6127108211156111595760405162461bcd60e51b815260206004820152602660248201527f726f79616c74794270732073686f756c642062652077697468696e205b302c2060448201526531303030305d60d01b6064820152608401610af9565b50601255565b6111693382612eed565b6111855760405162461bcd60e51b8152600401610af99061485d565b610cc3838383612fd3565b6013805461119d90614b12565b80601f01602080910402602001604051908101604052809291908181526020018280546111c990614b12565b80156112165780601f106111eb57610100808354040283529160200191611216565b820191906000526020600020905b8154815290600101906020018083116111f957829003601f168201915b505050505081565b6000807f0000000000000000000000000000000000000000000000000000000000000000612710601254856112539190614a5a565b61125d91906149c1565b915091509250929050565b60606000806000611278856128ad565b925092509250600061128984612d2f565b9050600061129684612d2f565b90508051600114156112c557806040516020016112b39190614594565b60405160208183030381529060405290505b60006112d084612d2f565b90508051600114156112ff57806040516020016112ed9190614594565b60405160208183030381529060405290505b82828260405160200161131493929190614511565b6040516020818303038152906040529650505050505050919050565b6000828152600a602052604090206001015461134c8133612b46565b610cc3838361317e565b6000611361836121d4565b82106113c35760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610af9565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b038116331461145c5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b6064820152608401610af9565b6114668282613204565b5050565b6002600b54141561148d5760405162461bcd60e51b8152600401610af9906148ae565b6002600b5561149d6000336122a9565b8061153f57506040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561150557600080fd5b505afa158015611519573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061153d919061434f565b115b8061154c5750600c543410155b6115ab5760405162461bcd60e51b815260206004820152602a60248201527f53686f756c642070617920636c61696d696e675072696365206f72206f776e206044820152691848131bdbdd0813919560b21b6064820152608401610af9565b6115b361164f565b6115bd338261326b565b341561161a576040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f19350505050158015611618573d6000803e3d6000fd5b505b604051339082907fce8230f82e484df1d81d3f449132eed44e758f95df463079b72a869f75d341cf90600090a3506001600b55565b6018548061166062015180426149c1565b11801561168357506000818152601660205260409020546001600160a01b031615155b801561169c575060008181526017602052604090205415155b80156116ae57506116ac81612baa565b155b156116bc576116bc816133a3565b50565b80336116ca8261207b565b6001600160a01b0316146116f05760405162461bcd60e51b8152600401610af990614814565b6116fb6000336122a9565b8061170857506010543410155b6117545760405162461bcd60e51b815260206004820152601760248201527f53686f756c64207061792065726173696e6750726963650000000000000000006044820152606401610af9565b6000828152601560205260408120805461176d90614b12565b9050116117cb5760405162461bcd60e51b815260206004820152602660248201527f4e6f74652073686f756c64206265206e6f6e656d707479206265666f72652065604482015265726173696e6760d01b6064820152608401610af9565b6040805160208082018084526000808452868152601590925292902090516117f39290613d52565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f19350505050158015611849573d6000803e3d6000fd5b506118538261207b565b6001600160a01b0316827ff5cd03e250f4dc67cb934696b1ae84a530d007600f8c2b64cb1097e04cd49ae960405160405180910390a35050565b606061189882612baa565b6118de5760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b9259081a5cc81b9bdb8b595e1a5cdd195b9d604a1b6044820152606401610af9565b60006118e983611268565b905060006118f6846124f2565b60408051602081019091526000808252919250905b601454811015611bb55760606119e66014838154811061192d5761192d614bbe565b90600052602060002001805461194290614b12565b80601f016020809104026020016040519081016040528092919081815260200182805461196e90614b12565b80156119bb5780601f10611990576101008083540402835291602001916119bb565b820191906000526020600020905b81548152906001019060200180831161199e57829003601f168201915b5050505050604051806040016040528060088152602001677b7b646174657d7d60c01b8152506135c1565b156119f2575083611b7f565b611ac160148381548110611a0857611a08614bbe565b906000526020600020018054611a1d90614b12565b80601f0160208091040260200160405190810160405280929190818152602001828054611a4990614b12565b8015611a965780601f10611a6b57610100808354040283529160200191611a96565b820191906000526020600020905b815481529060010190602001808311611a7957829003601f168201915b5050505050604051806040016040528060088152602001677b7b6e6f74657d7d60c01b8152506135c1565b15611ad657611acf84611e67565b9050611b7f565b60148281548110611ae957611ae9614bbe565b906000526020600020018054611afe90614b12565b80601f0160208091040260200160405190810160405280929190818152602001828054611b2a90614b12565b8015611b775780601f10611b4c57610100808354040283529160200191611b77565b820191906000526020600020905b815481529060010190602001808311611b5a57829003601f168201915b505050505090505b8281604051602001611b9292919061443e565b60405160208183030381529060405292505080611bae90614b4d565b905061190b565b50949350505050565b610cc383838360405180602001604052806000815250612594565b6060816000805b8251811015611c3657828181518110611bfb57611bfb614bbe565b6020910101516001600160f81b031916601160f91b1415611c245781611c2081614b4d565b9250505b80611c2e81614b4d565b915050611be0565b508015611d77576000818351611c4c919061497b565b67ffffffffffffffff811115611c6457611c64614bd4565b6040519080825280601f01601f191660200182016040528015611c8e576020820181803683370190505b5090506000805b8451811015611d6c57848181518110611cb057611cb0614bbe565b6020910101516001600160f81b031916601160f91b1415611d0557601760fa1b8383611cdb81614b4d565b945081518110611ced57611ced614bbe565b60200101906001600160f81b031916908160001a9053505b848181518110611d1757611d17614bbe565b01602001516001600160f81b0319168383611d3181614b4d565b945081518110611d4357611d43614bbe565b60200101906001600160f81b031916908160001a90535080611d6481614b4d565b915050611c95565b509095945050505050565b509192915050565b6000611d8b8133612b46565b8151610cc3906014906020850190613dd6565b60148181548110611dae57600080fd5b90600052602060002001600091509050805461119d90614b12565b6000610e5182612baa565b6000611ddf60085490565b8210611e425760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610af9565b60088281548110611e5557611e55614bbe565b90600052602060002001549050919050565b6040805160208101909152600080825260609183915b825181101561202557828181518110611e9857611e98614bbe565b6020910101516001600160f81b031916600f60fa1b1415611eda5781604051602001611ec49190614497565b6040516020818303038152906040529150612013565b828181518110611eec57611eec614bbe565b6020910101516001600160f81b031916601f60f91b1415611f185781604051602001611ec491906144bf565b828181518110611f2a57611f2a614bbe565b6020910101516001600160f81b031916601360f91b1415611f565781604051602001611ec4919061456b565b828181518110611f6857611f68614bbe565b6020910101516001600160f81b031916601160f91b1415611f945781604051602001611ec491906144e7565b828181518110611fa657611fa6614bbe565b6020910101516001600160f81b031916602760f81b1415611fd25781604051602001611ec4919061446d565b81838281518110611fe557611fe5614bbe565b602001015160f81c60f81b60405160200161200192919061440f565b60405160208183030381529060405291505b8061201d81614b4d565b915050611e7d565b509392505050565b600080516020614c0f8339815191526120468133612b46565b600f8290556040518281527f6ea43baebf767c8984d2da6f4e06b71e7093fcb9d3c0c516cd51ac6b15fa11d7906020016110e0565b6000818152600260205260408120546001600160a01b031680610e515760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610af9565b6002600b5414156121155760405162461bcd60e51b8152600401610af9906148ae565b6002600b5560006121268133612b46565b61212e61164f565b60005b82518110156121c957600084828151811061214e5761214e614bbe565b60200260200101519050600084838151811061216c5761216c614bbe565b60200260200101519050612180828261326b565b6040516001600160a01b0383169082907f6f1a5977e7036a4d672e1db1ca046ec0bd742ef9a38fe8d46823fd17dae6083190600090a35050806121c290614b4d565b9050612131565b50506001600b555050565b60006001600160a01b03821661223f5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610af9565b506001600160a01b031660009081526003602052604090205490565b600080516020614c0f8339815191526122748133612b46565b60118290556040518281527f808020969425956198bf055c9d59c389614dd21f915904f05b2d21ea161cd4ec906020016110e0565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b606060018054610e6690614b12565b600080516020614c0f8339815191526122fc8133612b46565b600e8290556040518281527ff4ec2a844abf83d803887787f1c1ce8de91c40e66ea4a395779beb8c0d904a41906020016110e0565b600080516020614c0f83398151915261234a8133612b46565b600d8290556040518281527f921c658aa55473adf5c5112e48ef56de846ddb3e4e57e8888cb24a81b3b27273906020016110e0565b600080516020614c0f8339815191526123988133612b46565b60108290556040518281527f1b5c73c6da4bab6f305baea61b3dfd41973701830ad8e35dfdf24eba3d3d6de0906020016110e0565b6001600160a01b0382163314156124265760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610af9565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000806124a262015180426149c1565b90506000612710600e546127106124b9919061497b565b6000848152601760205260409020546124d29190614a5a565b6124dc91906149c1565b905080600d541115610e515750600d5492915050565b600081815260156020526040902080546060919061250f90614b12565b80601f016020809104026020016040519081016040528092919081815260200182805461253b90614b12565b80156125885780601f1061255d57610100808354040283529160200191612588565b820191906000526020600020905b81548152906001019060200180831161256b57829003601f168201915b50505050509050919050565b61259e3383612eed565b6125ba5760405162461bcd60e51b8152600401610af99061485d565b6125c684848484613626565b50505050565b60606125d782612baa565b61261c5760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b9259081a5cc81b9bdb995e1a5cdd195b9d60521b6044820152606401610af9565b600061262a610d2784610cc8565b60405160200161263a91906146b8565b60408051601f198184030181529190529392505050565b6000828152600a602052604090206001015461266d8133612b46565b610cc38383613204565b81336126828261207b565b6001600160a01b0316146126a85760405162461bcd60e51b8152600401610af990614814565b8160115481511061270d5760405162461bcd60e51b815260206004820152602960248201527f4e6f74652073686f756c642062652073686f72746572207468616e206e6f746560448201526814da5e99531a5b5a5d60ba1b6064820152608401610af9565b6127186000336122a9565b806127255750600f543410155b6127715760405162461bcd60e51b815260206004820152601960248201527f53686f756c642070617920656e67726176696e675072696365000000000000006044820152606401610af9565b6000848152601560205260409020805461278a90614b12565b1590506127e75760405162461bcd60e51b815260206004820152602560248201527f4e6f74652073686f756c6420626520656d707479206265666f726520656e67726044820152646176696e6760d81b6064820152608401610af9565b6000848152601560209081526040909120845161280692860190613d52565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f1935050505015801561285c573d6000803e3d6000fd5b506128668461207b565b6001600160a01b0316847fed9e0bea058528ee91b5c24513bbdb6ad21da03e6bc7108b7623af9d1231e07b8560405161289f91906147af565b60405180910390a350505050565b60008080838162253d8c6128c48362010bd961493a565b6128ce919061493a565b9050600062023ab16128e18360046149d5565b6128eb9190614993565b905060046128fc8262023ab16149d5565b61290790600361493a565b6129119190614993565b61291b9083614a79565b9150600062164b0961292e84600161493a565b61293a90610fa06149d5565b6129449190614993565b90506004612954826105b56149d5565b61295e9190614993565b6129689084614a79565b61297390601f61493a565b9250600061098f6129858560506149d5565b61298f9190614993565b9050600060506129a18361098f6149d5565b6129ab9190614993565b6129b59086614a79565b90506129c2600b83614993565b94506129cf85600c6149d5565b6129da83600261493a565b6129e49190614a79565b915084836129f3603187614a79565b6129fe9060646149d5565b612a08919061493a565b612a12919061493a565b9a919950975095505050505050565b612a2b8282613659565b611466577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612a8a57600080fd5b505af1158015612a9e573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506044019050602060405180830381600087803b158015612b0e57600080fd5b505af1158015612b22573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cc39190614287565b612b5082826122a9565b61146657612b68816001600160a01b031660146136c7565b612b738360206136c7565b604051602001612b849291906146fd565b60408051601f198184030181529082905262461bcd60e51b8252610af9916004016147af565b6000908152600260205260409020546001600160a01b0316151590565b6060815160001415612be757505060408051602081019091526000815290565b6000604051806060016040528060408152602001614c2f6040913990506000600384516002612c16919061497b565b612c2091906149c1565b612c2b906004614a5a565b90506000612c3a82602061497b565b67ffffffffffffffff811115612c5257612c52614bd4565b6040519080825280601f01601f191660200182016040528015612c7c576020820181803683370190505b509050818152600183018586518101602084015b81831015612cea5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401612c90565b600389510660018114612d045760028114612d1557612d21565b613d3d60f01b600119830152612d21565b603d60f81b6000198301525b509398975050505050505050565b606081612d535750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612d7d5780612d6781614b4d565b9150612d769050600a836149c1565b9150612d57565b60008167ffffffffffffffff811115612d9857612d98614bd4565b6040519080825280601f01601f191660200182016040528015612dc2576020820181803683370190505b5090505b8415612e2d57612dd7600183614ab8565b9150612de4600a86614b68565b612def90603061497b565b60f81b818381518110612e0457612e04614bbe565b60200101906001600160f81b031916908160001a905350612e26600a866149c1565b9450612dc6565b949350505050565b60006001600160e01b0319821663780e9d6360e01b1480610e515750610e5182613863565b60006001600160e01b03198216637965db0b60e01b1480610e515750610e5182612e35565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612eb48261207b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000612ef882612baa565b612f595760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610af9565b6000612f648361207b565b9050806001600160a01b0316846001600160a01b03161480612f9f5750836001600160a01b0316612f9484610ee9565b6001600160a01b0316145b80612e2d57506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612e2d565b826001600160a01b0316612fe68261207b565b6001600160a01b03161461304e5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610af9565b6001600160a01b0382166130b05760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610af9565b6130bb8383836138b3565b6130c6600082612e7f565b6001600160a01b03831660009081526003602052604081208054600192906130ef908490614ab8565b90915550506001600160a01b038216600090815260036020526040812080546001929061311d90849061497b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b61318882826122a9565b611466576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff191660011790556131c03390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b61320e82826122a9565b15611466576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b61327862015180426149c1565b81106132c65760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79207061737420746f6b656e496420697320636c61696d61626c6500006044820152606401610af9565b6000818152601660205260409020546001600160a01b03161580156132f75750600081815260176020526040902054155b6133435760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e49642073686f756c64206e6f742062652061756374696f6e6564006044820152606401610af9565b61334c81612baa565b156133995760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e49642073686f756c64206e6f7420626520636c61696d65640000006044820152606401610af9565b61146682826138be565b806133b162015180426149c1565b116133f65760405162461bcd60e51b8152602060048201526015602482015274105d58dd1a5bdb881b9bdd081e595d08195b991959605a1b6044820152606401610af9565b6000818152601660205260409020546001600160a01b031615801590613429575060008181526017602052604090205415155b6134895760405162461bcd60e51b815260206004820152602b60248201527f54686572652073686f756c64206265206174206c65617374206120626964206660448201526a6f7220746865206461746560a81b6064820152608401610af9565b61349281612baa565b156134df5760405162461bcd60e51b815260206004820152601e60248201527f53686f756c64206e6f74207265636c61696d207468652061756374696f6e00006044820152606401610af9565b600081815260166020526040902054613501906001600160a01b0316826138be565b6000818152601760205260408082205490516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169282156108fc02929190818181858888f19350505050158015613564573d6000803e3d6000fd5b5060008181526016602090815260408083205460178352928190205490519081526001600160a01b039092169183917fc9f72b276a388619c6d185d146697036241880c36654b1a3ffdad07c24038d99910160405180910390a350565b60008151835114801561361f5750816040516020016135e091906143f3565b604051602081830303815290604052805190602001208360405160200161360791906143f3565b60405160208183030381529060405280519060200120145b9392505050565b613631848484612fd3565b61363d848484846139fd565b6125c65760405162461bcd60e51b8152600401610af9906147c2565b6040805160008082526020820190925281906001600160a01b0385169061753090859060405161368991906143f3565b600060405180830381858888f193505050503d8060008114611d6c576040519150601f19603f3d011682016040523d82523d6000602084013e611d6c565b606060006136d6836002614a5a565b6136e190600261497b565b67ffffffffffffffff8111156136f9576136f9614bd4565b6040519080825280601f01601f191660200182016040528015613723576020820181803683370190505b509050600360fc1b8160008151811061373e5761373e614bbe565b60200101906001600160f81b031916908160001a905350600f60fb1b8160018151811061376d5761376d614bbe565b60200101906001600160f81b031916908160001a9053506000613791846002614a5a565b61379c90600161497b565b90505b6001811115613814576f181899199a1a9b1b9c1cb0b131b232b360811b85600f16601081106137d0576137d0614bbe565b1a60f81b8282815181106137e6576137e6614bbe565b60200101906001600160f81b031916908160001a90535060049490941c9361380d81614afb565b905061379f565b50831561361f5760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e746044820152606401610af9565b60006001600160e01b031982166380ac58cd60e01b148061389457506001600160e01b03198216635b5e139f60e01b145b80610e5157506301ffc9a760e01b6001600160e01b0319831614610e51565b610cc3838383613b0a565b6001600160a01b0382166139145760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610af9565b61391d81612baa565b1561396a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610af9565b613976600083836138b3565b6001600160a01b038216600090815260036020526040812080546001929061399f90849061497b565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613aff57604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290613a41903390899088908890600401614772565b602060405180830381600087803b158015613a5b57600080fd5b505af1925050508015613a8b575060408051601f3d908101601f19168201909252613a88918101906142fd565b60015b613ae5573d808015613ab9576040519150601f19603f3d011682016040523d82523d6000602084013e613abe565b606091505b508051613add5760405162461bcd60e51b8152600401610af9906147c2565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612e2d565b506001949350505050565b6001600160a01b038316613b6557613b6081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613b88565b816001600160a01b0316836001600160a01b031614613b8857613b888382613bc2565b6001600160a01b038216613b9f57610cc381613c5f565b826001600160a01b0316826001600160a01b031614610cc357610cc38282613d0e565b60006001613bcf846121d4565b613bd99190614ab8565b600083815260076020526040902054909150808214613c2c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613c7190600190614ab8565b60008381526009602052604081205460088054939450909284908110613c9957613c99614bbe565b906000526020600020015490508060088381548110613cba57613cba614bbe565b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613cf257613cf2614ba8565b6001900381819060005260206000200160009055905550505050565b6000613d19836121d4565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054613d5e90614b12565b90600052602060002090601f016020900481019282613d805760008555613dc6565b82601f10613d9957805160ff1916838001178555613dc6565b82800160010185558215613dc6579182015b82811115613dc6578251825591602001919060010190613dab565b50613dd2929150613e2f565b5090565b828054828255906000526020600020908101928215613e23579160200282015b82811115613e235782518051613e13918491602090910190613d52565b5091602001919060010190613df6565b50613dd2929150613e44565b5b80821115613dd25760008155600101613e30565b80821115613dd2576000613e588282613e61565b50600101613e44565b508054613e6d90614b12565b6000825580601f10613e7d575050565b601f0160209004906000526020600020908101906116bc9190613e2f565b600067ffffffffffffffff831115613eb557613eb5614bd4565b613ec8601f8401601f19166020016148e5565b9050828152838383011115613edc57600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114613f0a57600080fd5b919050565b600082601f830112613f2057600080fd5b81356020613f35613f3083614916565b6148e5565b80838252828201915082860187848660051b8901011115613f5557600080fd5b60005b85811015613f7457813584529284019290840190600101613f58565b5090979650505050505050565b600082601f830112613f9257600080fd5b61361f83833560208501613e9b565b600060208284031215613fb357600080fd5b61361f82613ef3565b60008060408385031215613fcf57600080fd5b613fd883613ef3565b9150613fe660208401613ef3565b90509250929050565b60008060006060848603121561400457600080fd5b61400d84613ef3565b925061401b60208501613ef3565b9150604084013590509250925092565b6000806000806080858703121561404157600080fd5b61404a85613ef3565b935061405860208601613ef3565b925060408501359150606085013567ffffffffffffffff81111561407b57600080fd5b8501601f8101871361408c57600080fd5b61409b87823560208401613e9b565b91505092959194509250565b600080604083850312156140ba57600080fd5b6140c383613ef3565b915060208301356140d381614bea565b809150509250929050565b600080604083850312156140f157600080fd5b6140fa83613ef3565b946020939093013593505050565b6000806040838503121561411b57600080fd5b823567ffffffffffffffff8082111561413357600080fd5b818501915085601f83011261414757600080fd5b81356020614157613f3083614916565b8083825282820191508286018a848660051b890101111561417757600080fd5b600096505b848710156141a15761418d81613ef3565b83526001969096019591830191830161417c565b50965050860135925050808211156141b857600080fd5b506141c585828601613f0f565b9150509250929050565b600060208083850312156141e257600080fd5b823567ffffffffffffffff808211156141fa57600080fd5b818501915085601f83011261420e57600080fd5b813561421c613f3082614916565b80828252858201915085850189878560051b880101111561423c57600080fd5b6000805b8581101561427757823587811115614256578283fd5b6142648d8b838c0101613f81565b8652509388019391880191600101614240565b50919a9950505050505050505050565b60006020828403121561429957600080fd5b815161361f81614bea565b6000602082840312156142b657600080fd5b5035919050565b600080604083850312156142d057600080fd5b82359150613fe660208401613ef3565b6000602082840312156142f257600080fd5b813561361f81614bf8565b60006020828403121561430f57600080fd5b815161361f81614bf8565b60006020828403121561432c57600080fd5b813567ffffffffffffffff81111561434357600080fd5b612e2d84828501613f81565b60006020828403121561436157600080fd5b5051919050565b6000806040838503121561437b57600080fd5b82359150602083013567ffffffffffffffff81111561439957600080fd5b6141c585828601613f81565b600080604083850312156143b857600080fd5b50508035926020909101359150565b600081518084526143df816020860160208601614acf565b601f01601f19169290920160200192915050565b60008251614405818460208701614acf565b9190910192915050565b60008351614421818460208801614acf565b6001600160f81b0319939093169190920190815260010192915050565b60008351614450818460208801614acf565b835190830190614464818360208801614acf565b01949350505050565b6000825161447f818460208701614acf565b652661706f733b60d01b920191825250600601919050565b600082516144a9818460208701614acf565b63266c743b60e01b920191825250600401919050565b600082516144d1818460208701614acf565b632667743b60e01b920191825250600401919050565b600082516144f9818460208701614acf565b652671756f743b60d01b920191825250600601919050565b60008451614523818460208901614acf565b8083019050602d60f81b8082528551614543816001850160208a01614acf565b6001920191820152835161455e816002840160208801614acf565b0160020195945050505050565b6000825161457d818460208701614acf565b6426616d703b60d81b920191825250600501919050565b600360fc1b8152600082516145b0816001850160208701614acf565b9190910160010192915050565b737b226e616d65223a20225468652044617465202360601b815284516000906145ed816014850160208a01614acf565b6101d160f51b601491840191820152855161460f816016840160208a01614acf565b72111610113232b9b1b934b83a34b7b7111d101160691b601692909101918201528451614643816029840160208901614acf565b6014818301019150507f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b60158201526618985cd94d8d0b60ca1b6035820152835161469581603c840160208801614acf565b6146ac603c8383010161227d60f01b815260020190565b98975050505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516146f081601d850160208701614acf565b91909101601d0192915050565b7f416363657373436f6e74726f6c3a206163636f756e7420000000000000000000815260008351614735816017850160208801614acf565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351614766816028840160208801614acf565b01602801949350505050565b6001600160a01b03858116825284166020820152604081018390526080606082018190526000906147a5908301846143c7565b9695505050505050565b60208152600061361f60208301846143c7565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526029908201527f43616c6c65722073686f756c6420626520746865206f776e6572206f662074686040820152686520617274776f726b60b81b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff8111828210171561490e5761490e614bd4565b604052919050565b600067ffffffffffffffff82111561493057614930614bd4565b5060051b60200190565b600080821280156001600160ff1b038490038513161561495c5761495c614b7c565b600160ff1b839003841281161561497557614975614b7c565b50500190565b6000821982111561498e5761498e614b7c565b500190565b6000826149a2576149a2614b92565b600160ff1b8214600019841416156149bc576149bc614b7c565b500590565b6000826149d0576149d0614b92565b500490565b60006001600160ff1b03818413828413808216868404861116156149fb576149fb614b7c565b600160ff1b6000871282811687830589121615614a1a57614a1a614b7c565b60008712925087820587128484161615614a3657614a36614b7c565b87850587128184161615614a4c57614a4c614b7c565b505050929093029392505050565b6000816000190483118215151615614a7457614a74614b7c565b500290565b60008083128015600160ff1b850184121615614a9757614a97614b7c565b6001600160ff1b0384018313811615614ab257614ab2614b7c565b50500390565b600082821015614aca57614aca614b7c565b500390565b60005b83811015614aea578181015183820152602001614ad2565b838111156125c65750506000910152565b600081614b0a57614b0a614b7c565b506000190190565b600181811c90821680614b2657607f821691505b60208210811415614b4757634e487b7160e01b600052602260045260246000fd5b50919050565b6000600019821415614b6157614b61614b7c565b5060010190565b600082614b7757614b77614b92565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146116bc57600080fd5b6001600160e01b0319811681146116bc57600080fdfe3b5d4cc60d3ec3516ee8ae083bd60934f6eb2a6c54b1229985c41bfb092b26034142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa2646970667358221220639eee7b18c208bea6aec9e3e8e521f0a0a152208b700707fd692c9f3cee36a964736f6c63430008070033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Called with the sale price to determine how much royalty is owed and to whom.",
        "params": {
          "salePrice": "- the sale price of the NFT asset specified by `tokenId`",
          "tokenId": "- the NFT asset queried for royalty information"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for `salePrice`"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2859,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2861,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2865,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2869,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2873,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2879,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3798,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3802,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3805,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3809,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_roles",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 811,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 5763,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "claimingPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 5766,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "reservePrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 5769,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "minBidIncrementBps",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 5772,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "engravingPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 5775,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "erasingPrice",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 5778,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "noteSizeLimit",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 5781,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "royaltyBps",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 5784,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "tokenDescription",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 5793,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "svgImageTemplate",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 5869,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_notes",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 5873,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_highestBidder",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 5877,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_highestBid",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 5880,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_lastUnchaimedAuctionedTokenId",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/TheDate.sol:TheDate",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/TheDate.sol:TheDate",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
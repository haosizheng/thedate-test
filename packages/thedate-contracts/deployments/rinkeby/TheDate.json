{
  "address": "0x5543c894E13e04D04307f66a00cF95e4f0c61217",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address payable",
          "name": "foundation_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ArtworkMinted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "ArtworkNoteEngraved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ArtworkNoteErased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionEnded",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "FundWithdrew",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "artworks",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "date",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "endAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "engraveArtworkNote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "eraseArtworkNote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionMinBidIncrementPermyriad",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "minBidIncrementPermyriad",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getAuctionReservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getEngravingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getErasingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHighestBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getNoteSizeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        }
      ],
      "name": "getPendingReturns",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRoyaltyPermyriad",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "royaltyPermyriad",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "onERC721Received",
      "outputs": [
        {
          "internalType": "bytes4",
          "name": "",
          "type": "bytes4"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minBidIncrementPermyriad",
          "type": "uint256"
        }
      ],
      "name": "setAuctionMinBidIncrementPermyriad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        }
      ],
      "name": "setAuctionReservePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "baseTokenURI",
          "type": "string"
        }
      ],
      "name": "setBaseURI",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "engravingPrice",
          "type": "uint256"
        }
      ],
      "name": "setEngravingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "erasingPrice",
          "type": "uint256"
        }
      ],
      "name": "setErasingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "noteSizeLimit",
          "type": "uint256"
        }
      ],
      "name": "setNoteSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "royaltyPermyriad",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyPermyriad",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "withdrawFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xf8acd2ecf1926410d3bcddfc63838aca727e6153eceac0f3d08c27e5298ad163",
  "receipt": {
    "to": null,
    "from": "0xcc50cDcd9Dab7A98926B1164Ae5bb59FceFB5AF9",
    "contractAddress": "0x5543c894E13e04D04307f66a00cF95e4f0c61217",
    "transactionIndex": 17,
    "gasUsed": "3147099",
    "logsBloom": "0x
    "blockHash": "0x6a06248fbdda2be1c6d3d356a31e532e62440083f3a998d793e0520a0538819b",
    "transactionHash": "0xf8acd2ecf1926410d3bcddfc63838aca727e6153eceac0f3d08c27e5298ad163",
    "logs": [
      {
        "transactionIndex": 17,
        "blockNumber": 9180176,
        "transactionHash": "0xf8acd2ecf1926410d3bcddfc63838aca727e6153eceac0f3d08c27e5298ad163",
        "address": "0x5543c894E13e04D04307f66a00cF95e4f0c61217",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x0000000000000000000000002cfd3bbc8dcb14bf6aa4ea39f2c2cf883bbeb53e",
          "0x000000000000000000000000cc50cdcd9dab7a98926b1164ae5bb59fcefb5af9"
        ],
        "data": "0x",
        "logIndex": 34,
        "blockHash": "0x6a06248fbdda2be1c6d3d356a31e532e62440083f3a998d793e0520a0538819b"
      },
      {
        "transactionIndex": 17,
        "blockNumber": 9180176,
        "transactionHash": "0xf8acd2ecf1926410d3bcddfc63838aca727e6153eceac0f3d08c27e5298ad163",
        "address": "0x5543c894E13e04D04307f66a00cF95e4f0c61217",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc50cdcd9dab7a98926b1164ae5bb59fcefb5af9",
          "0x000000000000000000000000cc50cdcd9dab7a98926b1164ae5bb59fcefb5af9"
        ],
        "data": "0x",
        "logIndex": 35,
        "blockHash": "0x6a06248fbdda2be1c6d3d356a31e532e62440083f3a998d793e0520a0538819b"
      }
    ],
    "blockNumber": 9180176,
    "cumulativeGasUsed": "6574288",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x2cfd3BbC8dCB14BF6aA4Ea39f2C2Cf883BbEB53e"
  ],
  "solcInputHash": "c3d41251bf33c77e9ffbb0d326e6d505",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address payable\",\"name\":\"foundation_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ArtworkMinted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"ArtworkNoteEngraved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ArtworkNoteErased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionEnded\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"FundWithdrew\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"artworks\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"date\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"endAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"engraveArtworkNote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"eraseArtworkNote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionMinBidIncrementPermyriad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"minBidIncrementPermyriad\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getAuctionReservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getEngravingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getErasingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHighestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getNoteSizeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"}],\"name\":\"getPendingReturns\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRoyaltyPermyriad\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyPermyriad\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"onERC721Received\",\"outputs\":[{\"internalType\":\"bytes4\",\"name\":\"\",\"type\":\"bytes4\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBidIncrementPermyriad\",\"type\":\"uint256\"}],\"name\":\"setAuctionMinBidIncrementPermyriad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"setAuctionReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"baseTokenURI\",\"type\":\"string\"}],\"name\":\"setBaseURI\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"engravingPrice\",\"type\":\"uint256\"}],\"name\":\"setEngravingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"erasingPrice\",\"type\":\"uint256\"}],\"name\":\"setErasingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noteSizeLimit\",\"type\":\"uint256\"}],\"name\":\"setNoteSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyPermyriad\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyPermyriad\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"withdrawFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"onERC721Received(address,address,uint256,bytes)\":{\"details\":\"See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role.\"},\"royaltyInfo(uint256,uint256)\":{\"params\":{\"salePrice\":\"- the sale price of the NFT asset specified by _tokenId\",\"tokenId\":\"- the NFT asset queried for royalty information\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for _salePrice\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"endAuction(uint256)\":{\"notice\":\"End the auction and send the highest bid to the beneficiary.\"},\"royaltyInfo(uint256,uint256)\":{\"notice\":\"Called with the sale price to determine how much royalty is owed and to whom.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TheDate.sol\":\"TheDate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":100},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IAccessControl.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\nimport \\\"../utils/Strings.sol\\\";\\nimport \\\"../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms. This is a lightweight version that doesn't allow enumerating role\\n * members except through off-chain means by accessing the contract event logs. Some\\n * applications may benefit from on-chain enumerability, for those cases see\\n * {AccessControlEnumerable}.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context, IAccessControl, ERC165 {\\n    struct RoleData {\\n        mapping(address => bool) members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping(bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Modifier that checks that an account has a specific role. Reverts\\n     * with a standardized message including the required role.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     *\\n     * _Available since v4.1._\\n     */\\n    modifier onlyRole(bytes32 role) {\\n        _checkRole(role, _msgSender());\\n        _;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IAccessControl).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view override returns (bool) {\\n        return _roles[role].members[account];\\n    }\\n\\n    /**\\n     * @dev Revert with a standard message if `account` is missing `role`.\\n     *\\n     * The format of the revert reason is given by the following regular expression:\\n     *\\n     *  /^AccessControl: account (0x[0-9a-f]{40}) is missing role (0x[0-9a-f]{64})$/\\n     */\\n    function _checkRole(bytes32 role, address account) internal view {\\n        if (!hasRole(role, account)) {\\n            revert(\\n                string(\\n                    abi.encodePacked(\\n                        \\\"AccessControl: account \\\",\\n                        Strings.toHexString(uint160(account), 20),\\n                        \\\" is missing role \\\",\\n                        Strings.toHexString(uint256(role), 32)\\n                    )\\n                )\\n            );\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view override returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual override onlyRole(getRoleAdmin(role)) {\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual override {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        bytes32 previousAdminRole = getRoleAdmin(role);\\n        _roles[role].adminRole = adminRole;\\n        emit RoleAdminChanged(role, previousAdminRole, adminRole);\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (!hasRole(role, account)) {\\n            _roles[role].members[account] = true;\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (hasRole(role, account)) {\\n            _roles[role].members[account] = false;\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x183481af1c40d2efb26b86f63d6fe9e22f24c87e436d60a69f261b38500e7cd6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/access/IAccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev External interface of AccessControl declared to support ERC165 detection.\\n */\\ninterface IAccessControl {\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {AccessControl-_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) external view returns (bool);\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {AccessControl-_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) external view returns (bytes32);\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) external;\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) external;\\n}\\n\",\"keccak256\":\"0xfe0edb09653ed10e8a1bfe03eb9b0ff06775666eee817a95bd3d0799f1ee2b44\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721Receiver.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC721Receiver} interface.\\n *\\n * Accepts all token transfers.\\n * Make sure the contract is able to use its token with {IERC721-safeTransferFrom}, {IERC721-approve} or {IERC721-setApprovalForAll}.\\n */\\ncontract ERC721Holder is IERC721Receiver {\\n    /**\\n     * @dev See {IERC721Receiver-onERC721Received}.\\n     *\\n     * Always returns `IERC721Receiver.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address,\\n        address,\\n        uint256,\\n        bytes memory\\n    ) public virtual override returns (bytes4) {\\n        return this.onERC721Received.selector;\\n    }\\n}\\n\",\"keccak256\":\"0x8756c97d6004b1ae21517a013bdec72fbf30be7852afb2f395871d280131b250\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"@thefoundation/core-contracts/contracts/IWithFoundation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract IWithFoundation {\\n    function _getFoundationAddress() internal view virtual returns (address payable);\\n}\\n\",\"keccak256\":\"0xc854f79d213fc78536c6a8a88da94e364b0587a186a1b1783d463d1ae0685bd5\",\"license\":\"MIT\"},\"@thefoundation/core-contracts/contracts/MintedByAuction.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/utils/ERC721Holder.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/utils/Address.sol\\\";\\nimport \\\"./IWithFoundation.sol\\\";\\n\\nabstract contract MintedByAuction is AccessControl, ReentrancyGuard, ERC721Holder, IWithFoundation {\\n    constructor(uint256 reservePrice, uint256 minBidIncrementPermyriad) {\\n        _reservePrice = reservePrice;\\n        _minBidIncrementPermyriad = minBidIncrementPermyriad;\\n    }\\n\\n    event BidPlaced(uint256 indexed tokenId, address indexed bidder, uint256 amount);\\n    event AuctionEnded(uint256 indexed tokenId, address indexed winner, uint256 amount);\\n    event FundWithdrew(address indexed bidder, uint256 amount);\\n\\n    mapping(uint256 => address) private _highestBidder;\\n    mapping(uint256 => uint256) private _highestBid;\\n    mapping(address => uint256) private _pendingReturns;\\n\\n    uint256 private _minBidIncrementPermyriad;\\n    uint256 private _reservePrice;\\n\\n    function setAuctionReservePrice(uint256 reservePrice) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _reservePrice = reservePrice;\\n    }\\n\\n    function setAuctionMinBidIncrementPermyriad(uint256 minBidIncrementPermyriad)\\n        external\\n        onlyRole(DEFAULT_ADMIN_ROLE)\\n    {\\n        require(minBidIncrementPermyriad >= 0, \\\"minIncrement should be >= 0.\\\");\\n        _minBidIncrementPermyriad = minBidIncrementPermyriad;\\n    }\\n\\n    function getAuctionReservePrice() external view returns (uint256 reservePrice) {\\n        return _reservePrice;\\n    }\\n\\n    function getAuctionMinBidIncrementPermyriad() external view returns (uint256 minBidIncrementPermyriad) {\\n        return _minBidIncrementPermyriad;\\n    }\\n\\n    function getHighestBid(uint256 tokenId) external view returns (address bidder, uint256 amount) {\\n        return (_highestBidder[tokenId], _highestBid[tokenId]);\\n    }\\n\\n    function getPendingReturns(address bidder) external view returns (uint256 amount) {\\n        return _pendingReturns[bidder];\\n    }\\n\\n    function placeBid(uint256 tokenId) external payable nonReentrant {\\n        require(!(tokenId > block.timestamp / 1 days), \\\"Auction is not started.\\\");\\n        require(!(tokenId < block.timestamp / 1 days), \\\"Auction is ended.\\\");\\n\\n        uint256 amount = msg.value;\\n\\n        require(!(amount < _reservePrice), \\\"Must send more than reservePrice.\\\");\\n\\n        require(!(amount <= _highestBid[tokenId]), \\\"Must send more than the highest bid.\\\");\\n\\n        require(\\n            !(amount < (_highestBid[tokenId] * (10000 + _minBidIncrementPermyriad)) / 10000),\\n            \\\"Must send over the last bid by minBidIncrement permyriad.\\\"\\n        );\\n\\n        if (_highestBidder[tokenId] == address(0)) {\\n            _safeMint(address(this), tokenId);\\n        } else {\\n            _pendingReturns[_highestBidder[tokenId]] += _highestBid[tokenId];\\n        }\\n\\n        _highestBidder[tokenId] = msg.sender;\\n        _highestBid[tokenId] = amount;\\n\\n        emit BidPlaced(tokenId, msg.sender, amount);\\n    }\\n\\n    /// End the auction and send the highest bid\\n    /// to the beneficiary.\\n    function endAuction(uint256 tokenId) public nonReentrant {\\n        // It is a good guideline to structure functions that interact\\n        // with other contracts (i.e. they call functions or send Ether)\\n        // into three phases:\\n        // 1. checking conditions\\n        // 2. performing actions (potentially changing conditions)\\n        // 3. interacting with other contracts\\n        // If these phases are mixed up, the other contract could call\\n        // back into the current contract and modify the state or cause\\n        // effects (ether payout) to be performed multiple times.\\n        // If functions called internally include interaction with external\\n        // contracts, they also have to be considered interaction with\\n        // external contracts.\\n\\n        require(block.timestamp / 1 days > tokenId, \\\"Auction not yet ended.\\\");\\n        require(\\n            _highestBidder[tokenId] != address(0) && _highestBid[tokenId] > 0,\\n            \\\"There should be at least a bid for the date.\\\"\\n        );\\n        require(ownerOf(tokenId) == address(this), \\\"Should not reclaim the auction.\\\");\\n        require(\\n            msg.sender == _highestBidder[tokenId] || hasRole(DEFAULT_ADMIN_ROLE, msg.sender),\\n            \\\"Only winner or admin can claim the item.\\\"\\n        );\\n\\n        Address.sendValue(_getFoundationAddress(), _highestBid[tokenId]);\\n        _transfer(address(this), _highestBidder[tokenId], tokenId);\\n\\n        emit AuctionEnded(tokenId, _highestBidder[tokenId], _highestBid[tokenId]);\\n    }\\n\\n    function withdrawFund() external nonReentrant {\\n        require(_pendingReturns[msg.sender] > 0, \\\"No pending returns.\\\");\\n\\n        uint256 amount = _pendingReturns[msg.sender];\\n        Address.sendValue(payable(msg.sender), amount);\\n        _pendingReturns[msg.sender] -= amount;\\n\\n        emit FundWithdrew(msg.sender, amount);\\n    }\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual;\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual;\\n\\n    function ownerOf(uint256 tokenId) public view virtual returns (address);\\n}\\n\",\"keccak256\":\"0x3b18aabb365905ad1b9362621a3794097416a109b3a7171d73b973390717e0bf\",\"license\":\"MIT\"},\"@thefoundation/core-contracts/contracts/WithFoundation.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\nimport \\\"./IWithFoundation.sol\\\";\\n\\nabstract contract WithFoundation is IWithFoundation {\\n    address payable private _foundation;\\n\\n    constructor(address payable foundation_) {\\n        _foundation = foundation_;\\n    }\\n\\n    function _getFoundationAddress() internal view virtual override returns (address payable) {\\n        return _foundation;\\n    }\\n}\\n\",\"keccak256\":\"0x1580945ebd949e0b1369664bc2882fa40e7d4744446fecfb123cbe7bd2588b2c\",\"license\":\"MIT\"},\"@thefoundation/core-contracts/contracts/WithRoyalty.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"./interfaces/IERC2981.sol\\\";\\nimport \\\"./IWithFoundation.sol\\\";\\n\\nabstract contract WithRoyalty is AccessControl, IERC2981, IWithFoundation {\\n    uint256 private _royaltyPermyriad;\\n\\n    constructor(uint256 royaltyPermyriad_) {\\n        _royaltyPermyriad = royaltyPermyriad_;\\n    }\\n\\n    function setRoyaltyPermyriad(uint256 royaltyPermyriad) public onlyRole(DEFAULT_ADMIN_ROLE) {\\n        require(royaltyPermyriad <= 10000 && royaltyPermyriad >= 0, \\\"royaltyPermyriad should be within [0, 10000].\\\");\\n        _royaltyPermyriad = royaltyPermyriad;\\n    }\\n\\n    function getRoyaltyPermyriad() external view returns (uint256 royaltyPermyriad) {\\n        return _royaltyPermyriad;\\n    }\\n\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        override\\n        returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (_getFoundationAddress(), (salePrice * _royaltyPermyriad) / 10000);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(AccessControl, IERC165) returns (bool) {\\n        return type(IERC2981).interfaceId == interfaceId || AccessControl.supportsInterface(interfaceId);\\n    }\\n}\\n\",\"keccak256\":\"0x8b42b8d46c7b789570808bba6ec6ac1e25659b16b9067c313fdf2ce882d37d1f\",\"license\":\"MIT\"},\"@thefoundation/core-contracts/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\n\\n///\\n/// @dev Interface for the NFT Royality Standard\\n///\\ninterface IERC2981 is IERC165 {\\n    /// ERC165 bytes to add to interface array - set in parent contract\\n    /// implementing this standard\\n    ///\\n    /// bytes4(keccak256(\\\"royaltyInfo(uint256,uint256)\\\")) == 0x2a55205a;\\n    /// bytes4 private constant _INTERFACE_ID_REC2981 = 0x2a55205a;\\n    /// _registerInterface(_INTERFACE_ID_ERC2981);\\n\\n    /// @notice Called with the sale price to determine how much royalty is owed and to whom.\\n    /// @param tokenId - the NFT asset queried for royalty information\\n    /// @param salePrice - the sale price of the NFT asset specified by _tokenId\\n    /// @return receiver - address of who should be sent the royalty payment\\n    /// @return royaltyAmount - the royalty payment amount for _salePrice\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x184689144f040e1d0c04ab5f54f928b60a6387e745508df00783148c7b9e2965\",\"license\":\"MIT\"},\"contracts/TheDate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\nimport \\\"@thefoundation/core-contracts/contracts/WithRoyalty.sol\\\";\\nimport \\\"@thefoundation/core-contracts/contracts/MintedByAuction.sol\\\";\\nimport \\\"@thefoundation/core-contracts/contracts/WithFoundation.sol\\\";\\n\\ncontract TheDate is ERC721Enumerable, AccessControl, WithFoundation, WithRoyalty, MintedByAuction {\\n    constructor(address payable foundation_)\\n        ERC721(\\\"TheDate\\\", \\\"DATE\\\")\\n        WithFoundation(foundation_)\\n        WithRoyalty(1000)\\n        MintedByAuction(0.01 ether, 1000)\\n    {\\n        _setupRole(DEFAULT_ADMIN_ROLE, foundation_);\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\n        setBaseURI(\\\"https://thedate.art/api/token/\\\");\\n    }\\n\\n    //Parameters \\n    uint256 private _engravingPrice = 0 ether;\\n    uint256 private _erasingPrice = 1 ether;\\n    uint256 private _noteSizeLimit = 100;\\n\\n    function setNoteSizeLimit(uint256 noteSizeLimit) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _noteSizeLimit = noteSizeLimit;\\n    }\\n\\n    function setErasingPrice(uint256 erasingPrice) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _erasingPrice = erasingPrice;\\n    }\\n    \\n    function setEngravingPrice(uint256 engravingPrice) external onlyRole(DEFAULT_ADMIN_ROLE) {\\n        _engravingPrice = engravingPrice;\\n    }\\n\\n    function getNoteSizeLimit() public view returns (uint256)  {\\n        return _noteSizeLimit;\\n    }\\n\\n    function getErasingPrice() public view returns (uint256) {\\n        return _erasingPrice;\\n    }\\n    \\n    function getEngravingPrice() public view returns (uint256) {\\n        return _engravingPrice;\\n    }\\n\\n    // Base URI Setup\\n    string private _baseTokenURI;\\n\\n    function _baseURI() internal view override returns (string memory) {\\n        return _baseTokenURI;\\n    }\\n\\n    function setBaseURI(string memory baseTokenURI) public {\\n        _baseTokenURI = baseTokenURI;\\n    }\\n\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return super._exists(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId)\\n        public\\n        view\\n        override(ERC721Enumerable, WithRoyalty, AccessControl)\\n        returns (bool)\\n    {\\n        return\\n            ERC721Enumerable.supportsInterface(interfaceId) ||\\n            WithRoyalty.supportsInterface(interfaceId) ||\\n            AccessControl.supportsInterface(interfaceId);\\n    }\\n\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal override(ERC721, MintedByAuction) {\\n        ERC721._transfer(from, to, tokenId);\\n    }\\n\\n    function ownerOf(uint256 tokenId) public view override(ERC721, MintedByAuction) returns (address) {\\n        return ERC721.ownerOf(tokenId);\\n    }\\n\\n    // The Date Art\\n    modifier onlyOwner(uint256 tokenId) {\\n        require(ownerOf(tokenId) == msg.sender, \\\"Caller should be the owner of the artwork.\\\");\\n        _;\\n    }\\n\\n    modifier validNote(string memory note) {\\n        require(bytes(note).length < _noteSizeLimit, \\\"Note should be shorter than noteSizeLimit.\\\");\\n        _;\\n    }\\n\\n    event ArtworkMinted(uint256 indexed tokenId);\\n    event ArtworkNoteEngraved(uint256 indexed tokenId, address indexed owner, string note);\\n    event ArtworkNoteErased(uint256 indexed tokenId, address indexed owner);\\n\\n    struct TheDateArtwork {\\n        uint256 date;\\n        string note;\\n    }\\n\\n    mapping(uint256 => TheDateArtwork) public artworks;\\n\\n    function _safeMint(address to, uint256 tokenId) internal virtual override(ERC721, MintedByAuction) {\\n        ERC721._safeMint(to, tokenId);\\n\\n        artworks[tokenId].date = tokenId;\\n        artworks[tokenId].note = \\\"\\\";\\n\\n        emit ArtworkMinted(tokenId);\\n    }\\n\\n    function engraveArtworkNote(uint256 tokenId, string memory note) public payable onlyOwner(tokenId) validNote(note) {\\n        require(msg.value >= _engravingPrice, \\\"Should pay >= engravingPrice\\\");\\n        require(bytes(artworks[tokenId].note).length == 0, \\\"Note should be empty before engraving\\\");\\n\\n        artworks[tokenId].note = note;\\n\\n        emit ArtworkNoteEngraved(tokenId, ownerOf(tokenId), note);\\n    }\\n\\n    function eraseArtworkNote(uint256 tokenId) public payable onlyOwner(tokenId) {\\n        require(msg.value >= _erasingPrice, \\\"Should pay >= erasingPrice\\\");\\n        require(bytes(artworks[tokenId].note).length > 0, \\\"Note should be nonempty before erasing\\\");\\n\\n        artworks[tokenId].note = \\\"\\\";\\n\\n        emit ArtworkNoteErased(tokenId, ownerOf(tokenId));\\n    }\\n\\n    // Default functions\\n    receive() external payable {}\\n\\n    fallback() external payable {}\\n}\\n\",\"keccak256\":\"0x0a07c6cb6cd22033720370d10f0d0717c103e8d14083c932b415a97ff6c24d5e\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60806040526000601355670de0b6b3a764000060145560646015553480156200002757600080fd5b5060405162003608380380620036088339810160408190526200004a91620002c5565b662386f26fc100006103e88083604051806040016040528060078152602001665468654461746560c81b815250604051806040016040528060048152602001634441544560e01b8152508160009080519060200190620000ac9291906200021f565b508051620000c29060019060208401906200021f565b50506001600b5550600c80546001600160a01b0319166001600160a01b0392909216919091179055600d556012919091556011556200010360008262000156565b6200011060003362000156565b60408051808201909152601e81527f68747470733a2f2f746865646174652e6172742f6170692f746f6b656e2f000060208201526200014f9062000166565b5062000332565b6200016282826200017b565b5050565b8051620001629060169060208401906200021f565b6000828152600a602090815260408083206001600160a01b038516845290915290205460ff1662000162576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055620001db3390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b8280546200022d90620002f5565b90600052602060002090601f0160209004810192826200025157600085556200029c565b82601f106200026c57805160ff19168380011785556200029c565b828001600101855582156200029c579182015b828111156200029c5782518255916020019190600101906200027f565b50620002aa929150620002ae565b5090565b5b80821115620002aa5760008155600101620002af565b600060208284031215620002d7578081fd5b81516001600160a01b0381168114620002ee578182fd5b9392505050565b600181811c908216806200030a57607f821691505b602082108114156200032c57634e487b7160e01b600052602260045260246000fd5b50919050565b6132c680620003426000396000f3fe6080604052600436106102695760003560e01c806367ad0e1c11610143578063a217fddf116100bb578063c87b56dd11610077578063c87b56dd146107bc578063d547741f146107dc578063de0ba020146107fc578063e07fa3c11461081c578063e51cca0714610831578063e985e9c51461084657005b8063a217fddf1461071d578063a22cb46514610732578063b88d4fde14610752578063b9a2de3a14610772578063bc483f6c14610792578063c7a9c871146107a757005b80638f2886441161010a5780638f2886441461065157806391d148541461069557806395d89b41146106b55780639979ef45146106ca5780639daec71e146106dd5780639dc3d812146106fd57005b806367ad0e1c146105b357806370a08231146105c85780637a461219146105e85780637a9ae240146105fb57806383ffda3b1461061b57005b80632f745c59116101e15780634f558e791161019d5780634f558e79146105005780634f6ccce71461052057806355f804b314610540578063598acd26146105605780636216f8f2146105805780636352211e1461059357005b80632f745c591461043d578063353d7b101461045d57806336568abe1461047257806341c2673c1461049257806342842e0e146104b25780634b602673146104d257005b806318160ddd1161023057806318160ddd1461035a578063202fb8af1461037957806323b872dd1461038e578063248a9ca3146103ae5780632a55205a146103de5780632f2ff15d1461041d57005b806301ffc9a71461027257806306fdde03146102a7578063081812fc146102c9578063095ea7b314610301578063150b7a021461032157005b3661027057005b005b34801561027e57600080fd5b5061029261028d366004612dfe565b610866565b60405190151581526020015b60405180910390f35b3480156102b357600080fd5b506102bc610895565b60405161029e9190612fd6565b3480156102d557600080fd5b506102e96102e4366004612dc4565b610927565b6040516001600160a01b03909116815260200161029e565b34801561030d57600080fd5b5061027061031c366004612d9b565b6109b4565b34801561032d57600080fd5b5061034161033c366004612ce8565b610ac5565b6040516001600160e01b0319909116815260200161029e565b34801561036657600080fd5b506008545b60405190815260200161029e565b34801561038557600080fd5b5060125461036b565b34801561039a57600080fd5b506102706103a9366004612cad565b610ad6565b3480156103ba57600080fd5b5061036b6103c9366004612dc4565b6000908152600a602052604090206001015490565b3480156103ea57600080fd5b506103fe6103f9366004612eae565b610b07565b604080516001600160a01b03909316835260208301919091520161029e565b34801561042957600080fd5b50610270610438366004612ddc565b610b42565b34801561044957600080fd5b5061036b610458366004612d9b565b610b68565b34801561046957600080fd5b5060135461036b565b34801561047e57600080fd5b5061027061048d366004612ddc565b610bfe565b34801561049e57600080fd5b506102706104ad366004612dc4565b610c7c565b3480156104be57600080fd5b506102706104cd366004612cad565b610d00565b3480156104de57600080fd5b506104f26104ed366004612dc4565b610d1b565b60405161029e92919061310d565b34801561050c57600080fd5b5061029261051b366004612dc4565b610dc0565b34801561052c57600080fd5b5061036b61053b366004612dc4565b610dcb565b34801561054c57600080fd5b5061027061055b366004612e36565b610e6c565b34801561056c57600080fd5b5061027061057b366004612dc4565b610e7f565b61027061058e366004612e69565b610e91565b34801561059f57600080fd5b506102e96105ae366004612dc4565b611069565b3480156105bf57600080fd5b5060145461036b565b3480156105d457600080fd5b5061036b6105e3366004612c61565b611074565b6102706105f6366004612dc4565b6110fb565b34801561060757600080fd5b50610270610616366004612dc4565b61126a565b34801561062757600080fd5b5061036b610636366004612c61565b6001600160a01b031660009081526010602052604090205490565b34801561065d57600080fd5b506103fe61066c366004612dc4565b6000908152600e6020908152604080832054600f909252909120546001600160a01b0390911691565b3480156106a157600080fd5b506102926106b0366004612ddc565b61127c565b3480156106c157600080fd5b506102bc6112a7565b6102706106d8366004612dc4565b6112b6565b3480156106e957600080fd5b506102706106f8366004612dc4565b6115c9565b34801561070957600080fd5b50610270610718366004612dc4565b6115db565b34801561072957600080fd5b5061036b600081565b34801561073e57600080fd5b5061027061074d366004612d61565b6115ed565b34801561075e57600080fd5b5061027061076d366004612ce8565b6116ae565b34801561077e57600080fd5b5061027061078d366004612dc4565b6116e6565b34801561079e57600080fd5b50600d5461036b565b3480156107b357600080fd5b5060155461036b565b3480156107c857600080fd5b506102bc6107d7366004612dc4565b61198c565b3480156107e857600080fd5b506102706107f7366004612ddc565b611a57565b34801561080857600080fd5b50610270610817366004612dc4565b611a7d565b34801561082857600080fd5b50610270611a8f565b34801561083d57600080fd5b5060115461036b565b34801561085257600080fd5b50610292610861366004612c7b565b611b85565b600061087182611bb3565b80610880575061088082611bd8565b8061088f575061088f82611bf9565b92915050565b6060600080546108a4906131cb565b80601f01602080910402602001604051908101604052809291908181526020018280546108d0906131cb565b801561091d5780601f106108f25761010080835404028352916020019161091d565b820191906000526020600020905b81548152906001019060200180831161090057829003601f168201915b5050505050905090565b600061093282611c1e565b6109985760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006109bf82611c3b565b9050806001600160a01b0316836001600160a01b03161415610a2d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161098f565b336001600160a01b0382161480610a495750610a498133611b85565b610ab65760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161098f565b610ac08383611cb2565b505050565b630a85bd0160e11b5b949350505050565b610ae03382611d20565b610afc5760405162461bcd60e51b815260040161098f90613085565b610ac0838383611de2565b600080610b1c600c546001600160a01b031690565b612710600d5485610b2d9190613152565b610b37919061313e565b915091509250929050565b6000828152600a6020526040902060010154610b5e8133611ded565b610ac08383611e51565b6000610b7383611074565b8210610bd55760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161098f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610c6e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161098f565b610c788282611ed7565b5050565b6000610c888133611ded565b6127108211158015610c98575060015b610cfa5760405162461bcd60e51b815260206004820152602d60248201527f726f79616c74795065726d79726961642073686f756c6420626520776974686960448201526c37102d98161018981818182e9760991b606482015260840161098f565b50600d55565b610ac0838383604051806020016040528060008152506116ae565b60176020526000908152604090208054600182018054919291610d3d906131cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d69906131cb565b8015610db65780601f10610d8b57610100808354040283529160200191610db6565b820191906000526020600020905b815481529060010190602001808311610d9957829003601f168201915b5050505050905082565b600061088f82611c1e565b6000610dd660085490565b8210610e395760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161098f565b60088281548110610e5a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b8051610c78906016906020840190612b17565b6000610e8b8133611ded565b50601355565b8133610e9c82611069565b6001600160a01b031614610ec25760405162461bcd60e51b815260040161098f9061303b565b81601554815110610f285760405162461bcd60e51b815260206004820152602a60248201527f4e6f74652073686f756c642062652073686f72746572207468616e206e6f746560448201526929b4bd32a634b6b4ba1760b11b606482015260840161098f565b601354341015610f7a5760405162461bcd60e51b815260206004820152601c60248201527f53686f756c6420706179203e3d20656e67726176696e67507269636500000000604482015260640161098f565b60008481526017602052604090206001018054610f96906131cb565b159050610ff35760405162461bcd60e51b815260206004820152602560248201527f4e6f74652073686f756c6420626520656d707479206265666f726520656e67726044820152646176696e6760d81b606482015260840161098f565b6000848152601760209081526040909120845161101892600190920191860190612b17565b5061102284611069565b6001600160a01b0316847fb6abeec0166d668b4adf2ca7f1b5b105e3009b22f7fc01bde9728c0bf924b15b8560405161105b9190612fd6565b60405180910390a350505050565b600061088f82611c3b565b60006001600160a01b0382166110df5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161098f565b506001600160a01b031660009081526003602052604090205490565b803361110682611069565b6001600160a01b03161461112c5760405162461bcd60e51b815260040161098f9061303b565b60145434101561117e5760405162461bcd60e51b815260206004820152601a60248201527f53686f756c6420706179203e3d2065726173696e675072696365000000000000604482015260640161098f565b6000828152601760205260408120600101805461119a906131cb565b9050116111f85760405162461bcd60e51b815260206004820152602660248201527f4e6f74652073686f756c64206265206e6f6e656d707479206265666f72652065604482015265726173696e6760d01b606482015260840161098f565b6040805160208082018084526000808452868152601790925292902090516112269260019092019190612b17565b5061123082611069565b6001600160a01b0316827f93aa5a2948969ccaca3d1577b169ef79df08741c096a72ab7e4e4ecc03d428e360405160405180910390a35050565b60006112768133611ded565b50601555565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600180546108a4906131cb565b6002600b5414156112d95760405162461bcd60e51b815260040161098f906130d6565b6002600b556112eb620151804261313e565b8111156113345760405162461bcd60e51b815260206004820152601760248201527620bab1ba34b7b71034b9903737ba1039ba30b93a32b21760491b604482015260640161098f565b611341620151804261313e565b8110156113845760405162461bcd60e51b815260206004820152601160248201527020bab1ba34b7b71034b99032b73232b21760791b604482015260640161098f565b60125434908110156113e25760405162461bcd60e51b815260206004820152602160248201527f4d7573742073656e64206d6f7265207468616e207265736572766550726963656044820152601760f91b606482015260840161098f565b6000828152600f6020526040902054811161144b5760405162461bcd60e51b8152602060048201526024808201527f4d7573742073656e64206d6f7265207468616e207468652068696768657374206044820152633134b21760e11b606482015260840161098f565b61271060115461271061145e9190613126565b6000848152600f60205260409020546114779190613152565b611481919061313e565b8110156114f25760405162461bcd60e51b815260206004820152603960248201527f4d7573742073656e64206f76657220746865206c61737420626964206279206d60448201527834b72134b224b731b932b6b2b73a103832b936bcb934b0b21760391b606482015260840161098f565b6000828152600e60205260409020546001600160a01b031661151d576115183083611f3e565b611560565b6000828152600f6020908152604080832054600e8352818420546001600160a01b031684526010909252822080549192909161155a908490613126565b90915550505b6000828152600e6020908152604080832080546001600160a01b03191633908117909155600f8352928190208490555183815284917f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c47910160405180910390a350506001600b55565b60006115d58133611ded565b50601255565b60006115e78133611ded565b50601455565b6001600160a01b0382163314156116425760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161098f565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6116b83383611d20565b6116d45760405162461bcd60e51b815260040161098f90613085565b6116e084848484611fb2565b50505050565b6002600b5414156117095760405162461bcd60e51b815260040161098f906130d6565b6002600b558061171c620151804261313e565b116117625760405162461bcd60e51b815260206004820152601660248201527520bab1ba34b7b7103737ba103cb2ba1032b73232b21760511b604482015260640161098f565b6000818152600e60205260409020546001600160a01b03161580159061179557506000818152600f602052604090205415155b6117f65760405162461bcd60e51b815260206004820152602c60248201527f54686572652073686f756c64206265206174206c65617374206120626964206660448201526b37b9103a3432903230ba329760a11b606482015260840161098f565b3061180082611069565b6001600160a01b0316146118565760405162461bcd60e51b815260206004820152601f60248201527f53686f756c64206e6f74207265636c61696d207468652061756374696f6e2e00604482015260640161098f565b6000818152600e60205260409020546001600160a01b0316331480611881575061188160003361127c565b6118de5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c792077696e6e6572206f722061646d696e2063616e20636c61696d207460448201526734329034ba32b69760c11b606482015260840161098f565b6119076118f3600c546001600160a01b031690565b6000838152600f6020526040902054611fe5565b6000818152600e602052604090205461192b9030906001600160a01b031683611de2565b6000818152600e6020908152604080832054600f8352928190205490519081526001600160a01b039092169183917fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea501910160405180910390a3506001600b55565b606061199782611c1e565b6119fb5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161098f565b6000611a056120fe565b90506000815111611a255760405180602001604052806000815250611a50565b80611a2f8461210d565b604051602001611a40929190612efb565b6040516020818303038152906040525b9392505050565b6000828152600a6020526040902060010154611a738133611ded565b610ac08383611ed7565b6000611a898133611ded565b50601155565b6002600b541415611ab25760405162461bcd60e51b815260040161098f906130d6565b6002600b5533600090815260106020526040902054611b095760405162461bcd60e51b81526020600482015260136024820152722737903832b73234b733903932ba3ab937399760691b604482015260640161098f565b3360008181526010602052604090205490611b249082611fe5565b3360009081526010602052604081208054839290611b43908490613171565b909155505060405181815233907fa5e06c0c537f7a80323b3ffc4c94a001c98b8fc51dfceba143694bf0469adb779060200160405180910390a2506001600b55565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b148061088f575061088f82612227565b600063152a902d60e11b6001600160e01b03198316148061088f575061088f825b60006001600160e01b03198216637965db0b60e01b148061088f575061088f82611bb3565b6000908152600260205260409020546001600160a01b0316151590565b6000818152600260205260408120546001600160a01b03168061088f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161098f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ce782611c3b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611d2b82611c1e565b611d8c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161098f565b6000611d9783611c3b565b9050806001600160a01b0316846001600160a01b03161480611dd25750836001600160a01b0316611dc784610927565b6001600160a01b0316145b80610ace5750610ace8185611b85565b610ac0838383612277565b611df7828261127c565b610c7857611e0f816001600160a01b03166014612422565b611e1a836020612422565b604051602001611e2b929190612f2a565b60408051601f198184030181529082905262461bcd60e51b825261098f91600401612fd6565b611e5b828261127c565b610c78576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611e933390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ee1828261127c565b15610c78576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611f488282612604565b600081815260176020818152604080842085815581518084019283905285815294869052929091529151611f829260019092019190612b17565b5060405181907fa7cff2fe4ba71de839a94bc4b44a410ef51866620f1de09209ec3fc4fdf3926890600090a25050565b611fbd848484611de2565b611fc98484848461261e565b6116e05760405162461bcd60e51b815260040161098f90612fe9565b804710156120355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161098f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612082576040519150601f19603f3d011682016040523d82523d6000602084013e612087565b606091505b5050905080610ac05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161098f565b6060601680546108a4906131cb565b6060816121315750506040805180820190915260018152600360fc1b602082015290565b8160005b811561215b578061214581613206565b91506121549050600a8361313e565b9150612135565b60008167ffffffffffffffff81111561218457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121ae576020820181803683370190505b5090505b8415610ace576121c3600183613171565b91506121d0600a86613221565b6121db906030613126565b60f81b8183815181106121fe57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612220600a8661313e565b94506121b2565b60006001600160e01b031982166380ac58cd60e01b148061225857506001600160e01b03198216635b5e139f60e01b145b8061088f57506301ffc9a760e01b6001600160e01b031983161461088f565b826001600160a01b031661228a82611c3b565b6001600160a01b0316146122f25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161098f565b6001600160a01b0382166123545760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161098f565b61235f838383612728565b61236a600082611cb2565b6001600160a01b0383166000908152600360205260408120805460019290612393908490613171565b90915550506001600160a01b03821660009081526003602052604081208054600192906123c1908490613126565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60606000612431836002613152565b61243c906002613126565b67ffffffffffffffff81111561246257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561248c576020820181803683370190505b509050600360fc1b816000815181106124b557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124f257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612516846002613152565b612521906001613126565b90505b60018111156125b5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061256357634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061258757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936125ae816131b4565b9050612524565b508315611a505760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161098f565b610c78828260405180602001604052806000815250612733565b60006001600160a01b0384163b1561272057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612662903390899088908890600401612f99565b602060405180830381600087803b15801561267c57600080fd5b505af19250505080156126ac575060408051601f3d908101601f191682019092526126a991810190612e1a565b60015b612706573d8080156126da576040519150601f19603f3d011682016040523d82523d6000602084013e6126df565b606091505b5080516126fe5760405162461bcd60e51b815260040161098f90612fe9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ace565b506001610ace565b610ac0838383612766565b61273d838361281e565b61274a600084848461261e565b610ac05760405162461bcd60e51b815260040161098f90612fe9565b6001600160a01b0383166127c1576127bc81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6127e4565b816001600160a01b0316836001600160a01b0316146127e4576127e4838261295d565b6001600160a01b0382166127fb57610ac0816129fa565b826001600160a01b0316826001600160a01b031614610ac057610ac08282612ad3565b6001600160a01b0382166128745760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161098f565b61287d81611c1e565b156128ca5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161098f565b6128d660008383612728565b6001600160a01b03821660009081526003602052604081208054600192906128ff908490613126565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000600161296a84611074565b6129749190613171565b6000838152600760205260409020549091508082146129c7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612a0c90600190613171565b60008381526009602052604081205460088054939450909284908110612a4257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110612a7157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612ab757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612ade83611074565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612b23906131cb565b90600052602060002090601f016020900481019282612b455760008555612b8b565b82601f10612b5e57805160ff1916838001178555612b8b565b82800160010185558215612b8b579182015b82811115612b8b578251825591602001919060010190612b70565b50612b97929150612b9b565b5090565b5b80821115612b975760008155600101612b9c565b600067ffffffffffffffff80841115612bcb57612bcb613261565b604051601f8501601f19908116603f01168101908282118183101715612bf357612bf3613261565b81604052809350858152868686011115612c0c57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114612c3d57600080fd5b919050565b600082601f830112612c52578081fd5b611a5083833560208501612bb0565b600060208284031215612c72578081fd5b611a5082612c26565b60008060408385031215612c8d578081fd5b612c9683612c26565b9150612ca460208401612c26565b90509250929050565b600080600060608486031215612cc1578081fd5b612cca84612c26565b9250612cd860208501612c26565b9150604084013590509250925092565b60008060008060808587031215612cfd578081fd5b612d0685612c26565b9350612d1460208601612c26565b925060408501359150606085013567ffffffffffffffff811115612d36578182fd5b8501601f81018713612d46578182fd5b612d5587823560208401612bb0565b91505092959194509250565b60008060408385031215612d73578182fd5b612d7c83612c26565b915060208301358015158114612d90578182fd5b809150509250929050565b60008060408385031215612dad578182fd5b612db683612c26565b946020939093013593505050565b600060208284031215612dd5578081fd5b5035919050565b60008060408385031215612dee578182fd5b82359150612ca460208401612c26565b600060208284031215612e0f578081fd5b8135611a5081613277565b600060208284031215612e2b578081fd5b8151611a5081613277565b600060208284031215612e47578081fd5b813567ffffffffffffffff811115612e5d578182fd5b610ace84828501612c42565b60008060408385031215612e7b578182fd5b82359150602083013567ffffffffffffffff811115612e98578182fd5b612ea485828601612c42565b9150509250929050565b60008060408385031215612ec0578182fd5b50508035926020909101359150565b60008151808452612ee7816020860160208601613188565b601f01601f19169290920160200192915050565b60008351612f0d818460208801613188565b835190830190612f21818360208801613188565b01949350505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612f5c816017850160208801613188565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f8d816028840160208801613188565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612fcc90830184612ecf565b9695505050505050565b602081526000611a506020830184612ecf565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602a908201527f43616c6c65722073686f756c6420626520746865206f776e6572206f66207468604082015269329030b93a3bb7b9359760b11b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b828152604060208201526000610ace6040830184612ecf565b6000821982111561313957613139613235565b500190565b60008261314d5761314d61324b565b500490565b600081600019048311821515161561316c5761316c613235565b500290565b60008282101561318357613183613235565b500390565b60005b838110156131a357818101518382015260200161318b565b838111156116e05750506000910152565b6000816131c3576131c3613235565b506000190190565b600181811c908216806131df57607f821691505b6020821081141561320057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561321a5761321a613235565b5060010190565b6000826132305761323061324b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461328d57600080fd5b5056fea2646970667358221220d1580f06aa0dcbff7f6889730c9994bc2720c54ceae8de7c58b95204f784e47d64736f6c63430008040033",
  "deployedBytecode": "0x6080604052600436106102695760003560e01c806367ad0e1c11610143578063a217fddf116100bb578063c87b56dd11610077578063c87b56dd146107bc578063d547741f146107dc578063de0ba020146107fc578063e07fa3c11461081c578063e51cca0714610831578063e985e9c51461084657005b8063a217fddf1461071d578063a22cb46514610732578063b88d4fde14610752578063b9a2de3a14610772578063bc483f6c14610792578063c7a9c871146107a757005b80638f2886441161010a5780638f2886441461065157806391d148541461069557806395d89b41146106b55780639979ef45146106ca5780639daec71e146106dd5780639dc3d812146106fd57005b806367ad0e1c146105b357806370a08231146105c85780637a461219146105e85780637a9ae240146105fb57806383ffda3b1461061b57005b80632f745c59116101e15780634f558e791161019d5780634f558e79146105005780634f6ccce71461052057806355f804b314610540578063598acd26146105605780636216f8f2146105805780636352211e1461059357005b80632f745c591461043d578063353d7b101461045d57806336568abe1461047257806341c2673c1461049257806342842e0e146104b25780634b602673146104d257005b806318160ddd1161023057806318160ddd1461035a578063202fb8af1461037957806323b872dd1461038e578063248a9ca3146103ae5780632a55205a146103de5780632f2ff15d1461041d57005b806301ffc9a71461027257806306fdde03146102a7578063081812fc146102c9578063095ea7b314610301578063150b7a021461032157005b3661027057005b005b34801561027e57600080fd5b5061029261028d366004612dfe565b610866565b60405190151581526020015b60405180910390f35b3480156102b357600080fd5b506102bc610895565b60405161029e9190612fd6565b3480156102d557600080fd5b506102e96102e4366004612dc4565b610927565b6040516001600160a01b03909116815260200161029e565b34801561030d57600080fd5b5061027061031c366004612d9b565b6109b4565b34801561032d57600080fd5b5061034161033c366004612ce8565b610ac5565b6040516001600160e01b0319909116815260200161029e565b34801561036657600080fd5b506008545b60405190815260200161029e565b34801561038557600080fd5b5060125461036b565b34801561039a57600080fd5b506102706103a9366004612cad565b610ad6565b3480156103ba57600080fd5b5061036b6103c9366004612dc4565b6000908152600a602052604090206001015490565b3480156103ea57600080fd5b506103fe6103f9366004612eae565b610b07565b604080516001600160a01b03909316835260208301919091520161029e565b34801561042957600080fd5b50610270610438366004612ddc565b610b42565b34801561044957600080fd5b5061036b610458366004612d9b565b610b68565b34801561046957600080fd5b5060135461036b565b34801561047e57600080fd5b5061027061048d366004612ddc565b610bfe565b34801561049e57600080fd5b506102706104ad366004612dc4565b610c7c565b3480156104be57600080fd5b506102706104cd366004612cad565b610d00565b3480156104de57600080fd5b506104f26104ed366004612dc4565b610d1b565b60405161029e92919061310d565b34801561050c57600080fd5b5061029261051b366004612dc4565b610dc0565b34801561052c57600080fd5b5061036b61053b366004612dc4565b610dcb565b34801561054c57600080fd5b5061027061055b366004612e36565b610e6c565b34801561056c57600080fd5b5061027061057b366004612dc4565b610e7f565b61027061058e366004612e69565b610e91565b34801561059f57600080fd5b506102e96105ae366004612dc4565b611069565b3480156105bf57600080fd5b5060145461036b565b3480156105d457600080fd5b5061036b6105e3366004612c61565b611074565b6102706105f6366004612dc4565b6110fb565b34801561060757600080fd5b50610270610616366004612dc4565b61126a565b34801561062757600080fd5b5061036b610636366004612c61565b6001600160a01b031660009081526010602052604090205490565b34801561065d57600080fd5b506103fe61066c366004612dc4565b6000908152600e6020908152604080832054600f909252909120546001600160a01b0390911691565b3480156106a157600080fd5b506102926106b0366004612ddc565b61127c565b3480156106c157600080fd5b506102bc6112a7565b6102706106d8366004612dc4565b6112b6565b3480156106e957600080fd5b506102706106f8366004612dc4565b6115c9565b34801561070957600080fd5b50610270610718366004612dc4565b6115db565b34801561072957600080fd5b5061036b600081565b34801561073e57600080fd5b5061027061074d366004612d61565b6115ed565b34801561075e57600080fd5b5061027061076d366004612ce8565b6116ae565b34801561077e57600080fd5b5061027061078d366004612dc4565b6116e6565b34801561079e57600080fd5b50600d5461036b565b3480156107b357600080fd5b5060155461036b565b3480156107c857600080fd5b506102bc6107d7366004612dc4565b61198c565b3480156107e857600080fd5b506102706107f7366004612ddc565b611a57565b34801561080857600080fd5b50610270610817366004612dc4565b611a7d565b34801561082857600080fd5b50610270611a8f565b34801561083d57600080fd5b5060115461036b565b34801561085257600080fd5b50610292610861366004612c7b565b611b85565b600061087182611bb3565b80610880575061088082611bd8565b8061088f575061088f82611bf9565b92915050565b6060600080546108a4906131cb565b80601f01602080910402602001604051908101604052809291908181526020018280546108d0906131cb565b801561091d5780601f106108f25761010080835404028352916020019161091d565b820191906000526020600020905b81548152906001019060200180831161090057829003601f168201915b5050505050905090565b600061093282611c1e565b6109985760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b60648201526084015b60405180910390fd5b506000908152600460205260409020546001600160a01b031690565b60006109bf82611c3b565b9050806001600160a01b0316836001600160a01b03161415610a2d5760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b606482015260840161098f565b336001600160a01b0382161480610a495750610a498133611b85565b610ab65760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f776044820152771b995c881b9bdc88185c1c1c9bdd995908199bdc88185b1b60421b606482015260840161098f565b610ac08383611cb2565b505050565b630a85bd0160e11b5b949350505050565b610ae03382611d20565b610afc5760405162461bcd60e51b815260040161098f90613085565b610ac0838383611de2565b600080610b1c600c546001600160a01b031690565b612710600d5485610b2d9190613152565b610b37919061313e565b915091509250929050565b6000828152600a6020526040902060010154610b5e8133611ded565b610ac08383611e51565b6000610b7383611074565b8210610bd55760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b606482015260840161098f565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6001600160a01b0381163314610c6e5760405162461bcd60e51b815260206004820152602f60248201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560448201526e103937b632b9903337b91039b2b63360891b606482015260840161098f565b610c788282611ed7565b5050565b6000610c888133611ded565b6127108211158015610c98575060015b610cfa5760405162461bcd60e51b815260206004820152602d60248201527f726f79616c74795065726d79726961642073686f756c6420626520776974686960448201526c37102d98161018981818182e9760991b606482015260840161098f565b50600d55565b610ac0838383604051806020016040528060008152506116ae565b60176020526000908152604090208054600182018054919291610d3d906131cb565b80601f0160208091040260200160405190810160405280929190818152602001828054610d69906131cb565b8015610db65780601f10610d8b57610100808354040283529160200191610db6565b820191906000526020600020905b815481529060010190602001808311610d9957829003601f168201915b5050505050905082565b600061088f82611c1e565b6000610dd660085490565b8210610e395760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b606482015260840161098f565b60088281548110610e5a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b8051610c78906016906020840190612b17565b6000610e8b8133611ded565b50601355565b8133610e9c82611069565b6001600160a01b031614610ec25760405162461bcd60e51b815260040161098f9061303b565b81601554815110610f285760405162461bcd60e51b815260206004820152602a60248201527f4e6f74652073686f756c642062652073686f72746572207468616e206e6f746560448201526929b4bd32a634b6b4ba1760b11b606482015260840161098f565b601354341015610f7a5760405162461bcd60e51b815260206004820152601c60248201527f53686f756c6420706179203e3d20656e67726176696e67507269636500000000604482015260640161098f565b60008481526017602052604090206001018054610f96906131cb565b159050610ff35760405162461bcd60e51b815260206004820152602560248201527f4e6f74652073686f756c6420626520656d707479206265666f726520656e67726044820152646176696e6760d81b606482015260840161098f565b6000848152601760209081526040909120845161101892600190920191860190612b17565b5061102284611069565b6001600160a01b0316847fb6abeec0166d668b4adf2ca7f1b5b105e3009b22f7fc01bde9728c0bf924b15b8560405161105b9190612fd6565b60405180910390a350505050565b600061088f82611c3b565b60006001600160a01b0382166110df5760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b606482015260840161098f565b506001600160a01b031660009081526003602052604090205490565b803361110682611069565b6001600160a01b03161461112c5760405162461bcd60e51b815260040161098f9061303b565b60145434101561117e5760405162461bcd60e51b815260206004820152601a60248201527f53686f756c6420706179203e3d2065726173696e675072696365000000000000604482015260640161098f565b6000828152601760205260408120600101805461119a906131cb565b9050116111f85760405162461bcd60e51b815260206004820152602660248201527f4e6f74652073686f756c64206265206e6f6e656d707479206265666f72652065604482015265726173696e6760d01b606482015260840161098f565b6040805160208082018084526000808452868152601790925292902090516112269260019092019190612b17565b5061123082611069565b6001600160a01b0316827f93aa5a2948969ccaca3d1577b169ef79df08741c096a72ab7e4e4ecc03d428e360405160405180910390a35050565b60006112768133611ded565b50601555565b6000918252600a602090815260408084206001600160a01b0393909316845291905290205460ff1690565b6060600180546108a4906131cb565b6002600b5414156112d95760405162461bcd60e51b815260040161098f906130d6565b6002600b556112eb620151804261313e565b8111156113345760405162461bcd60e51b815260206004820152601760248201527620bab1ba34b7b71034b9903737ba1039ba30b93a32b21760491b604482015260640161098f565b611341620151804261313e565b8110156113845760405162461bcd60e51b815260206004820152601160248201527020bab1ba34b7b71034b99032b73232b21760791b604482015260640161098f565b60125434908110156113e25760405162461bcd60e51b815260206004820152602160248201527f4d7573742073656e64206d6f7265207468616e207265736572766550726963656044820152601760f91b606482015260840161098f565b6000828152600f6020526040902054811161144b5760405162461bcd60e51b8152602060048201526024808201527f4d7573742073656e64206d6f7265207468616e207468652068696768657374206044820152633134b21760e11b606482015260840161098f565b61271060115461271061145e9190613126565b6000848152600f60205260409020546114779190613152565b611481919061313e565b8110156114f25760405162461bcd60e51b815260206004820152603960248201527f4d7573742073656e64206f76657220746865206c61737420626964206279206d60448201527834b72134b224b731b932b6b2b73a103832b936bcb934b0b21760391b606482015260840161098f565b6000828152600e60205260409020546001600160a01b031661151d576115183083611f3e565b611560565b6000828152600f6020908152604080832054600e8352818420546001600160a01b031684526010909252822080549192909161155a908490613126565b90915550505b6000828152600e6020908152604080832080546001600160a01b03191633908117909155600f8352928190208490555183815284917f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c47910160405180910390a350506001600b55565b60006115d58133611ded565b50601255565b60006115e78133611ded565b50601455565b6001600160a01b0382163314156116425760405162461bcd60e51b815260206004820152601960248201527822a9219b99189d1030b8383937bb32903a379031b0b63632b960391b604482015260640161098f565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6116b83383611d20565b6116d45760405162461bcd60e51b815260040161098f90613085565b6116e084848484611fb2565b50505050565b6002600b5414156117095760405162461bcd60e51b815260040161098f906130d6565b6002600b558061171c620151804261313e565b116117625760405162461bcd60e51b815260206004820152601660248201527520bab1ba34b7b7103737ba103cb2ba1032b73232b21760511b604482015260640161098f565b6000818152600e60205260409020546001600160a01b03161580159061179557506000818152600f602052604090205415155b6117f65760405162461bcd60e51b815260206004820152602c60248201527f54686572652073686f756c64206265206174206c65617374206120626964206660448201526b37b9103a3432903230ba329760a11b606482015260840161098f565b3061180082611069565b6001600160a01b0316146118565760405162461bcd60e51b815260206004820152601f60248201527f53686f756c64206e6f74207265636c61696d207468652061756374696f6e2e00604482015260640161098f565b6000818152600e60205260409020546001600160a01b0316331480611881575061188160003361127c565b6118de5760405162461bcd60e51b815260206004820152602860248201527f4f6e6c792077696e6e6572206f722061646d696e2063616e20636c61696d207460448201526734329034ba32b69760c11b606482015260840161098f565b6119076118f3600c546001600160a01b031690565b6000838152600f6020526040902054611fe5565b6000818152600e602052604090205461192b9030906001600160a01b031683611de2565b6000818152600e6020908152604080832054600f8352928190205490519081526001600160a01b039092169183917fd2aa34a4fdbbc6dff6a3e56f46e0f3ae2a31d7785ff3487aa5c95c642acea501910160405180910390a3506001600b55565b606061199782611c1e565b6119fb5760405162461bcd60e51b815260206004820152602f60248201527f4552433732314d657461646174613a2055524920717565727920666f72206e6f60448201526e3732bc34b9ba32b73a103a37b5b2b760891b606482015260840161098f565b6000611a056120fe565b90506000815111611a255760405180602001604052806000815250611a50565b80611a2f8461210d565b604051602001611a40929190612efb565b6040516020818303038152906040525b9392505050565b6000828152600a6020526040902060010154611a738133611ded565b610ac08383611ed7565b6000611a898133611ded565b50601155565b6002600b541415611ab25760405162461bcd60e51b815260040161098f906130d6565b6002600b5533600090815260106020526040902054611b095760405162461bcd60e51b81526020600482015260136024820152722737903832b73234b733903932ba3ab937399760691b604482015260640161098f565b3360008181526010602052604090205490611b249082611fe5565b3360009081526010602052604081208054839290611b43908490613171565b909155505060405181815233907fa5e06c0c537f7a80323b3ffc4c94a001c98b8fc51dfceba143694bf0469adb779060200160405180910390a2506001600b55565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b60006001600160e01b0319821663780e9d6360e01b148061088f575061088f82612227565b600063152a902d60e11b6001600160e01b03198316148061088f575061088f825b60006001600160e01b03198216637965db0b60e01b148061088f575061088f82611bb3565b6000908152600260205260409020546001600160a01b0316151590565b6000818152600260205260408120546001600160a01b03168061088f5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b606482015260840161098f565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190611ce782611c3b565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b6000611d2b82611c1e565b611d8c5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b606482015260840161098f565b6000611d9783611c3b565b9050806001600160a01b0316846001600160a01b03161480611dd25750836001600160a01b0316611dc784610927565b6001600160a01b0316145b80610ace5750610ace8185611b85565b610ac0838383612277565b611df7828261127c565b610c7857611e0f816001600160a01b03166014612422565b611e1a836020612422565b604051602001611e2b929190612f2a565b60408051601f198184030181529082905262461bcd60e51b825261098f91600401612fd6565b611e5b828261127c565b610c78576000828152600a602090815260408083206001600160a01b03851684529091529020805460ff19166001179055611e933390565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b611ee1828261127c565b15610c78576000828152600a602090815260408083206001600160a01b0385168085529252808320805460ff1916905551339285917ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b9190a45050565b611f488282612604565b600081815260176020818152604080842085815581518084019283905285815294869052929091529151611f829260019092019190612b17565b5060405181907fa7cff2fe4ba71de839a94bc4b44a410ef51866620f1de09209ec3fc4fdf3926890600090a25050565b611fbd848484611de2565b611fc98484848461261e565b6116e05760405162461bcd60e51b815260040161098f90612fe9565b804710156120355760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a20696e73756666696369656e742062616c616e6365000000604482015260640161098f565b6000826001600160a01b03168260405160006040518083038185875af1925050503d8060008114612082576040519150601f19603f3d011682016040523d82523d6000602084013e612087565b606091505b5050905080610ac05760405162461bcd60e51b815260206004820152603a60248201527f416464726573733a20756e61626c6520746f2073656e642076616c75652c207260448201527f6563697069656e74206d61792068617665207265766572746564000000000000606482015260840161098f565b6060601680546108a4906131cb565b6060816121315750506040805180820190915260018152600360fc1b602082015290565b8160005b811561215b578061214581613206565b91506121549050600a8361313e565b9150612135565b60008167ffffffffffffffff81111561218457634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f1916602001820160405280156121ae576020820181803683370190505b5090505b8415610ace576121c3600183613171565b91506121d0600a86613221565b6121db906030613126565b60f81b8183815181106121fe57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612220600a8661313e565b94506121b2565b60006001600160e01b031982166380ac58cd60e01b148061225857506001600160e01b03198216635b5e139f60e01b145b8061088f57506301ffc9a760e01b6001600160e01b031983161461088f565b826001600160a01b031661228a82611c3b565b6001600160a01b0316146122f25760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b606482015260840161098f565b6001600160a01b0382166123545760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b606482015260840161098f565b61235f838383612728565b61236a600082611cb2565b6001600160a01b0383166000908152600360205260408120805460019290612393908490613171565b90915550506001600160a01b03821660009081526003602052604081208054600192906123c1908490613126565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b60606000612431836002613152565b61243c906002613126565b67ffffffffffffffff81111561246257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f19166020018201604052801561248c576020820181803683370190505b509050600360fc1b816000815181106124b557634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350600f60fb1b816001815181106124f257634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053506000612516846002613152565b612521906001613126565b90505b60018111156125b5576f181899199a1a9b1b9c1cb0b131b232b360811b85600f166010811061256357634e487b7160e01b600052603260045260246000fd5b1a60f81b82828151811061258757634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535060049490941c936125ae816131b4565b9050612524565b508315611a505760405162461bcd60e51b815260206004820181905260248201527f537472696e67733a20686578206c656e67746820696e73756666696369656e74604482015260640161098f565b610c78828260405180602001604052806000815250612733565b60006001600160a01b0384163b1561272057604051630a85bd0160e11b81526001600160a01b0385169063150b7a0290612662903390899088908890600401612f99565b602060405180830381600087803b15801561267c57600080fd5b505af19250505080156126ac575060408051601f3d908101601f191682019092526126a991810190612e1a565b60015b612706573d8080156126da576040519150601f19603f3d011682016040523d82523d6000602084013e6126df565b606091505b5080516126fe5760405162461bcd60e51b815260040161098f90612fe9565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050610ace565b506001610ace565b610ac0838383612766565b61273d838361281e565b61274a600084848461261e565b610ac05760405162461bcd60e51b815260040161098f90612fe9565b6001600160a01b0383166127c1576127bc81600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b6127e4565b816001600160a01b0316836001600160a01b0316146127e4576127e4838261295d565b6001600160a01b0382166127fb57610ac0816129fa565b826001600160a01b0316826001600160a01b031614610ac057610ac08282612ad3565b6001600160a01b0382166128745760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f2061646472657373604482015260640161098f565b61287d81611c1e565b156128ca5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e74656400000000604482015260640161098f565b6128d660008383612728565b6001600160a01b03821660009081526003602052604081208054600192906128ff908490613126565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b6000600161296a84611074565b6129749190613171565b6000838152600760205260409020549091508082146129c7576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090612a0c90600190613171565b60008381526009602052604081205460088054939450909284908110612a4257634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110612a7157634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480612ab757634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000612ade83611074565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054612b23906131cb565b90600052602060002090601f016020900481019282612b455760008555612b8b565b82601f10612b5e57805160ff1916838001178555612b8b565b82800160010185558215612b8b579182015b82811115612b8b578251825591602001919060010190612b70565b50612b97929150612b9b565b5090565b5b80821115612b975760008155600101612b9c565b600067ffffffffffffffff80841115612bcb57612bcb613261565b604051601f8501601f19908116603f01168101908282118183101715612bf357612bf3613261565b81604052809350858152868686011115612c0c57600080fd5b858560208301376000602087830101525050509392505050565b80356001600160a01b0381168114612c3d57600080fd5b919050565b600082601f830112612c52578081fd5b611a5083833560208501612bb0565b600060208284031215612c72578081fd5b611a5082612c26565b60008060408385031215612c8d578081fd5b612c9683612c26565b9150612ca460208401612c26565b90509250929050565b600080600060608486031215612cc1578081fd5b612cca84612c26565b9250612cd860208501612c26565b9150604084013590509250925092565b60008060008060808587031215612cfd578081fd5b612d0685612c26565b9350612d1460208601612c26565b925060408501359150606085013567ffffffffffffffff811115612d36578182fd5b8501601f81018713612d46578182fd5b612d5587823560208401612bb0565b91505092959194509250565b60008060408385031215612d73578182fd5b612d7c83612c26565b915060208301358015158114612d90578182fd5b809150509250929050565b60008060408385031215612dad578182fd5b612db683612c26565b946020939093013593505050565b600060208284031215612dd5578081fd5b5035919050565b60008060408385031215612dee578182fd5b82359150612ca460208401612c26565b600060208284031215612e0f578081fd5b8135611a5081613277565b600060208284031215612e2b578081fd5b8151611a5081613277565b600060208284031215612e47578081fd5b813567ffffffffffffffff811115612e5d578182fd5b610ace84828501612c42565b60008060408385031215612e7b578182fd5b82359150602083013567ffffffffffffffff811115612e98578182fd5b612ea485828601612c42565b9150509250929050565b60008060408385031215612ec0578182fd5b50508035926020909101359150565b60008151808452612ee7816020860160208601613188565b601f01601f19169290920160200192915050565b60008351612f0d818460208801613188565b835190830190612f21818360208801613188565b01949350505050565b76020b1b1b2b9b9a1b7b73a3937b61d1030b1b1b7bab73a1604d1b815260008351612f5c816017850160208801613188565b7001034b99036b4b9b9b4b733903937b6329607d1b6017918401918201528351612f8d816028840160208801613188565b01602801949350505050565b6001600160a01b0385811682528416602082015260408101839052608060608201819052600090612fcc90830184612ecf565b9695505050505050565b602081526000611a506020830184612ecf565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b6020808252602a908201527f43616c6c65722073686f756c6420626520746865206f776e6572206f66207468604082015269329030b93a3bb7b9359760b11b606082015260800190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b828152604060208201526000610ace6040830184612ecf565b6000821982111561313957613139613235565b500190565b60008261314d5761314d61324b565b500490565b600081600019048311821515161561316c5761316c613235565b500290565b60008282101561318357613183613235565b500390565b60005b838110156131a357818101518382015260200161318b565b838111156116e05750506000910152565b6000816131c3576131c3613235565b506000190190565b600181811c908216806131df57607f821691505b6020821081141561320057634e487b7160e01b600052602260045260246000fd5b50919050565b600060001982141561321a5761321a613235565b5060010190565b6000826132305761323061324b565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b6001600160e01b03198116811461328d57600080fd5b5056fea2646970667358221220d1580f06aa0dcbff7f6889730c9994bc2720c54ceae8de7c58b95204f784e47d64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}. To change a role's admin, use {_setRoleAdmin}."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`. If `account` had not been already granted `role`, emits a {RoleGranted} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "onERC721Received(address,address,uint256,bytes)": {
        "details": "See {IERC721Receiver-onERC721Received}. Always returns `IERC721Receiver.onERC721Received.selector`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account. Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced). If the calling account had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`. If `account` had been granted `role`, emits a {RoleRevoked} event. Requirements: - the caller must have ``role``'s admin role."
      },
      "royaltyInfo(uint256,uint256)": {
        "params": {
          "salePrice": "- the sale price of the NFT asset specified by _tokenId",
          "tokenId": "- the NFT asset queried for royalty information"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for _salePrice"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "endAuction(uint256)": {
        "notice": "End the auction and send the highest bid to the beneficiary."
      },
      "royaltyInfo(uint256,uint256)": {
        "notice": "Called with the sale price to determine how much royalty is owed and to whom."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 818,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 820,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 824,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 828,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 832,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 838,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 1757,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 1761,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 1764,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 1768,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 24,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_roles",
        "offset": 0,
        "slot": "10",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)19_storage)"
      },
      {
        "astId": 685,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 3928,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_foundation",
        "offset": 0,
        "slot": "12",
        "type": "t_address_payable"
      },
      {
        "astId": 3962,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_royaltyPermyriad",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 3538,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_highestBidder",
        "offset": 0,
        "slot": "14",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 3542,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_highestBid",
        "offset": 0,
        "slot": "15",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3546,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_pendingReturns",
        "offset": 0,
        "slot": "16",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 3548,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_minBidIncrementPermyriad",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 3550,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_reservePrice",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 4127,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_engravingPrice",
        "offset": 0,
        "slot": "19",
        "type": "t_uint256"
      },
      {
        "astId": 4130,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_erasingPrice",
        "offset": 0,
        "slot": "20",
        "type": "t_uint256"
      },
      {
        "astId": 4133,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_noteSizeLimit",
        "offset": 0,
        "slot": "21",
        "type": "t_uint256"
      },
      {
        "astId": 4198,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_baseTokenURI",
        "offset": 0,
        "slot": "22",
        "type": "t_string_storage"
      },
      {
        "astId": 4374,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "artworks",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_struct(TheDateArtwork)4369_storage)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_address_payable": {
        "encoding": "inplace",
        "label": "address payable",
        "numberOfBytes": "20"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)19_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)19_storage"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_struct(TheDateArtwork)4369_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => struct TheDate.TheDateArtwork)",
        "numberOfBytes": "32",
        "value": "t_struct(TheDateArtwork)4369_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_struct(RoleData)19_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 16,
            "contract": "contracts/TheDate.sol:TheDate",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_mapping(t_address,t_bool)"
          },
          {
            "astId": 18,
            "contract": "contracts/TheDate.sol:TheDate",
            "label": "adminRole",
            "offset": 0,
            "slot": "1",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(TheDateArtwork)4369_storage": {
        "encoding": "inplace",
        "label": "struct TheDate.TheDateArtwork",
        "members": [
          {
            "astId": 4366,
            "contract": "contracts/TheDate.sol:TheDate",
            "label": "date",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 4368,
            "contract": "contracts/TheDate.sol:TheDate",
            "label": "note",
            "offset": 0,
            "slot": "1",
            "type": "t_string_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}
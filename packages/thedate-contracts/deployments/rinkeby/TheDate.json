{
  "address": "0x2b1116Fb16a8Ad6F2963Af5183b39f2a16087749",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "foundation_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "weth_",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "loot_",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "approved",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Approval",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "ApprovalForAll",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ArtworkAirdropped",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "ArtworkClaimed",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "minBidIncrementBps",
          "type": "uint256"
        }
      ],
      "name": "AuctionMinBidIncrementBpsChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "reservePrice",
          "type": "uint256"
        }
      ],
      "name": "AuctionReservePriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "winner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "AuctionSettled",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "BidPlaced",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "claimingPrice",
          "type": "uint256"
        }
      ],
      "name": "ClaimingPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "EngravingPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "ErasingPriceChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "NoteEngraved",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "NoteErased",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "length",
          "type": "uint256"
        }
      ],
      "name": "NoteSizeLimitChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "Transfer",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "addresses",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "tokenIds",
          "type": "uint256[]"
        }
      ],
      "name": "airdrop",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "approve",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "available",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "balanceOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "claim",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "claimingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_days",
          "type": "uint256"
        }
      ],
      "name": "daysToDate",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "year",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "month",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "day",
          "type": "uint256"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "string",
          "name": "note",
          "type": "string"
        }
      ],
      "name": "engraveNote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "engravingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "eraseNote",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "erasingPrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "s",
          "type": "string"
        }
      ],
      "name": "escapeHTML",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "symbol",
          "type": "string"
        }
      ],
      "name": "escapeQuotes",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "exists",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateMetadata",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "generateSVGImage",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getApproved",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentAuctionTokenId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getCurrentMinimumBid",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getDate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getHighestBid",
      "outputs": [
        {
          "internalType": "address",
          "name": "bidder",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "getNote",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        }
      ],
      "name": "isApprovedForAll",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "minBidIncrementBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "name",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "noteSizeLimit",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "ownerOf",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "placeBid",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reservePrice",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "royaltyBps",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "salePrice",
          "type": "uint256"
        }
      ],
      "name": "royaltyInfo",
      "outputs": [
        {
          "internalType": "address",
          "name": "receiver",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "royaltyAmount",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        },
        {
          "internalType": "bytes",
          "name": "_data",
          "type": "bytes"
        }
      ],
      "name": "safeTransferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "operator",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "approved",
          "type": "bool"
        }
      ],
      "name": "setApprovalForAll",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "minBidIncrementBps_",
          "type": "uint256"
        }
      ],
      "name": "setAuctionMinBidIncrementBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "reservePrice_",
          "type": "uint256"
        }
      ],
      "name": "setAuctionReservePrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "claimingPrice_",
          "type": "uint256"
        }
      ],
      "name": "setClaimingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "engravingPrice_",
          "type": "uint256"
        }
      ],
      "name": "setEngravingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "erasingPrice_",
          "type": "uint256"
        }
      ],
      "name": "setErasingPrice",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "noteSizeLimit_",
          "type": "uint256"
        }
      ],
      "name": "setNoteSizeLimit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "royaltyBps_",
          "type": "uint256"
        }
      ],
      "name": "setRoyaltyBps",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string[]",
          "name": "svgImageTemplate_",
          "type": "string[]"
        }
      ],
      "name": "setSVGImageTemplate",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "tokenDescription_",
          "type": "string"
        }
      ],
      "name": "setTokenDescription",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "settleLastAuction",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "svgImageTemplate",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "symbol",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "tokenDescription",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "tokenOfOwnerByIndex",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "tokenURI",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalSupply",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "from",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "tokenId",
          "type": "uint256"
        }
      ],
      "name": "transferFrom",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0xb9884f1c3b2707ce18bf55b5b5165b5d0e1911470fc7e01d75558be114e0d19f",
  "receipt": {
    "to": null,
    "from": "0xcc50cDcd9Dab7A98926B1164Ae5bb59FceFB5AF9",
    "contractAddress": "0x2b1116Fb16a8Ad6F2963Af5183b39f2a16087749",
    "transactionIndex": 30,
    "gasUsed": "5116720",
    "logsBloom": "0x
    "blockHash": "0x14478f23840a3b224645c923d808bb74d3b6a2ab58127b89a63d5df97ce1506e",
    "transactionHash": "0xb9884f1c3b2707ce18bf55b5b5165b5d0e1911470fc7e01d75558be114e0d19f",
    "logs": [
      {
        "transactionIndex": 30,
        "blockNumber": 9280285,
        "transactionHash": "0xb9884f1c3b2707ce18bf55b5b5165b5d0e1911470fc7e01d75558be114e0d19f",
        "address": "0x2b1116Fb16a8Ad6F2963Af5183b39f2a16087749",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000cc50cdcd9dab7a98926b1164ae5bb59fcefb5af9"
        ],
        "data": "0x",
        "logIndex": 57,
        "blockHash": "0x14478f23840a3b224645c923d808bb74d3b6a2ab58127b89a63d5df97ce1506e"
      }
    ],
    "blockNumber": 9280285,
    "cumulativeGasUsed": "15786980",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0xF62b87b7e21a758474a998dB9F64A734B5cf69F1",
    "0xc778417E063141139Fce010982780140Aa0cD5Ab",
    "0x79E2d470f950f2Cf78eeF41720E8ff2cf4B3CD78"
  ],
  "solcInputHash": "8eed750357317e2011ed0264ddf87220",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"foundation_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"weth_\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"loot_\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"approved\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Approval\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"ApprovalForAll\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ArtworkAirdropped\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"ArtworkClaimed\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"minBidIncrementBps\",\"type\":\"uint256\"}],\"name\":\"AuctionMinBidIncrementBpsChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"reservePrice\",\"type\":\"uint256\"}],\"name\":\"AuctionReservePriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"winner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"AuctionSettled\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"BidPlaced\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"claimingPrice\",\"type\":\"uint256\"}],\"name\":\"ClaimingPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"EngravingPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"ErasingPriceChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"NoteEngraved\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"NoteErased\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"length\",\"type\":\"uint256\"}],\"name\":\"NoteSizeLimitChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"Transfer\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"addresses\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"tokenIds\",\"type\":\"uint256[]\"}],\"name\":\"airdrop\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"approve\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"available\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"balanceOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"claim\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"claimingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_days\",\"type\":\"uint256\"}],\"name\":\"daysToDate\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"year\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"month\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"day\",\"type\":\"uint256\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"string\",\"name\":\"note\",\"type\":\"string\"}],\"name\":\"engraveNote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"engravingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"eraseNote\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"erasingPrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"s\",\"type\":\"string\"}],\"name\":\"escapeHTML\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"symbol\",\"type\":\"string\"}],\"name\":\"escapeQuotes\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"exists\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateMetadata\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"generateSVGImage\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getApproved\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentAuctionTokenId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getCurrentMinimumBid\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getDate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getHighestBid\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"bidder\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"getNote\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"}],\"name\":\"isApprovedForAll\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"minBidIncrementBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"name\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"noteSizeLimit\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"ownerOf\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"placeBid\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reservePrice\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"royaltyBps\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"salePrice\",\"type\":\"uint256\"}],\"name\":\"royaltyInfo\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"receiver\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"royaltyAmount\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"},{\"internalType\":\"bytes\",\"name\":\"_data\",\"type\":\"bytes\"}],\"name\":\"safeTransferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"operator\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"approved\",\"type\":\"bool\"}],\"name\":\"setApprovalForAll\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"minBidIncrementBps_\",\"type\":\"uint256\"}],\"name\":\"setAuctionMinBidIncrementBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"reservePrice_\",\"type\":\"uint256\"}],\"name\":\"setAuctionReservePrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"claimingPrice_\",\"type\":\"uint256\"}],\"name\":\"setClaimingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"engravingPrice_\",\"type\":\"uint256\"}],\"name\":\"setEngravingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"erasingPrice_\",\"type\":\"uint256\"}],\"name\":\"setErasingPrice\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"noteSizeLimit_\",\"type\":\"uint256\"}],\"name\":\"setNoteSizeLimit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"royaltyBps_\",\"type\":\"uint256\"}],\"name\":\"setRoyaltyBps\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string[]\",\"name\":\"svgImageTemplate_\",\"type\":\"string[]\"}],\"name\":\"setSVGImageTemplate\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"tokenDescription_\",\"type\":\"string\"}],\"name\":\"setTokenDescription\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"settleLastAuction\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"svgImageTemplate\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"symbol\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"tokenDescription\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"tokenOfOwnerByIndex\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"tokenURI\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalSupply\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"from\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"tokenId\",\"type\":\"uint256\"}],\"name\":\"transferFrom\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"approve(address,uint256)\":{\"details\":\"See {IERC721-approve}.\"},\"balanceOf(address)\":{\"details\":\"See {IERC721-balanceOf}.\"},\"getApproved(uint256)\":{\"details\":\"See {IERC721-getApproved}.\"},\"isApprovedForAll(address,address)\":{\"details\":\"See {IERC721-isApprovedForAll}.\"},\"name()\":{\"details\":\"See {IERC721Metadata-name}.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"ownerOf(uint256)\":{\"details\":\"See {IERC721-ownerOf}.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"royaltyInfo(uint256,uint256)\":{\"details\":\"Called with the sale price to determine how much royalty is owed and to whom.\",\"params\":{\"salePrice\":\"- the sale price of the NFT asset specified by `tokenId`\",\"tokenId\":\"- the NFT asset queried for royalty information\"},\"returns\":{\"receiver\":\"- address of who should be sent the royalty payment\",\"royaltyAmount\":\"- the royalty payment amount for `salePrice`\"}},\"safeTransferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"safeTransferFrom(address,address,uint256,bytes)\":{\"details\":\"See {IERC721-safeTransferFrom}.\"},\"setApprovalForAll(address,bool)\":{\"details\":\"See {IERC721-setApprovalForAll}.\"},\"symbol()\":{\"details\":\"See {IERC721Metadata-symbol}.\"},\"tokenByIndex(uint256)\":{\"details\":\"See {IERC721Enumerable-tokenByIndex}.\"},\"tokenOfOwnerByIndex(address,uint256)\":{\"details\":\"See {IERC721Enumerable-tokenOfOwnerByIndex}.\"},\"tokenURI(uint256)\":{\"details\":\"See {IERC721Metadata-tokenURI}.\"},\"totalSupply()\":{\"details\":\"See {IERC721Enumerable-totalSupply}.\"},\"transferFrom(address,address,uint256)\":{\"details\":\"See {IERC721-transferFrom}.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/TheDate.sol\":\"TheDate\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _setOwner(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _setOwner(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _setOwner(newOwner);\\n    }\\n\\n    function _setOwner(address newOwner) private {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0x6bb804a310218875e89d12c053e94a13a4607cdf7cc2052f3e52bd32a0dc50a1\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/introspection/IERC165.sol\\\";\\n\",\"keccak256\":\"0x2f27682302bd27f76399273e73cedecd2de098aa101401a3b5f2196f520da6c5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/interfaces/IERC2981.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Interface for the NFT Royalty Standard\\n */\\ninterface IERC2981 is IERC165 {\\n    /**\\n     * @dev Called with the sale price to determine how much royalty is owed and to whom.\\n     * @param tokenId - the NFT asset queried for royalty information\\n     * @param salePrice - the sale price of the NFT asset specified by `tokenId`\\n     * @return receiver - address of who should be sent the royalty payment\\n     * @return royaltyAmount - the royalty payment amount for `salePrice`\\n     */\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external\\n        view\\n        returns (address receiver, uint256 royaltyAmount);\\n}\\n\",\"keccak256\":\"0x390521fa8ac0210850198bca62e009907bdc81cb74e618d052c4ac1afc89a2a6\",\"license\":\"MIT\"},\"@openzeppelin/contracts/security/ReentrancyGuard.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Contract module that helps prevent reentrant calls to a function.\\n *\\n * Inheriting from `ReentrancyGuard` will make the {nonReentrant} modifier\\n * available, which can be applied to functions to make sure there are no nested\\n * (reentrant) calls to them.\\n *\\n * Note that because there is a single `nonReentrant` guard, functions marked as\\n * `nonReentrant` may not call one another. This can be worked around by making\\n * those functions `private`, and then adding `external` `nonReentrant` entry\\n * points to them.\\n *\\n * TIP: If you would like to learn more about reentrancy and alternative ways\\n * to protect against it, check out our blog post\\n * https://blog.openzeppelin.com/reentrancy-after-istanbul/[Reentrancy After Istanbul].\\n */\\nabstract contract ReentrancyGuard {\\n    // Booleans are more expensive than uint256 or any type that takes up a full\\n    // word because each write operation emits an extra SLOAD to first read the\\n    // slot's contents, replace the bits taken up by the boolean, and then write\\n    // back. This is the compiler's defense against contract upgrades and\\n    // pointer aliasing, and it cannot be disabled.\\n\\n    // The values being non-zero value makes deployment a bit more expensive,\\n    // but in exchange the refund on every call to nonReentrant will be lower in\\n    // amount. Since refunds are capped to a percentage of the total\\n    // transaction's gas, it is best to keep them low in cases like this one, to\\n    // increase the likelihood of the full refund coming into effect.\\n    uint256 private constant _NOT_ENTERED = 1;\\n    uint256 private constant _ENTERED = 2;\\n\\n    uint256 private _status;\\n\\n    constructor() {\\n        _status = _NOT_ENTERED;\\n    }\\n\\n    /**\\n     * @dev Prevents a contract from calling itself, directly or indirectly.\\n     * Calling a `nonReentrant` function from another `nonReentrant`\\n     * function is not supported. It is possible to prevent this from happening\\n     * by making the `nonReentrant` function external, and make it call a\\n     * `private` function that does the actual work.\\n     */\\n    modifier nonReentrant() {\\n        // On the first call to nonReentrant, _notEntered will be true\\n        require(_status != _ENTERED, \\\"ReentrancyGuard: reentrant call\\\");\\n\\n        // Any calls to nonReentrant after this point will fail\\n        _status = _ENTERED;\\n\\n        _;\\n\\n        // By storing the original value once again, a refund is triggered (see\\n        // https://eips.ethereum.org/EIPS/eip-2200)\\n        _status = _NOT_ENTERED;\\n    }\\n}\\n\",\"keccak256\":\"0x842ccf9a6cd33e17b7acef8372ca42090755217b358fe0c44c98e951ea549d3a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x027b891937d20ccf213fdb9c31531574256de774bda99d3a70ecef6e1913ed2a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/ERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC721.sol\\\";\\nimport \\\"./IERC721Receiver.sol\\\";\\nimport \\\"./extensions/IERC721Metadata.sol\\\";\\nimport \\\"../../utils/Address.sol\\\";\\nimport \\\"../../utils/Context.sol\\\";\\nimport \\\"../../utils/Strings.sol\\\";\\nimport \\\"../../utils/introspection/ERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of https://eips.ethereum.org/EIPS/eip-721[ERC721] Non-Fungible Token Standard, including\\n * the Metadata extension, but not including the Enumerable extension, which is available separately as\\n * {ERC721Enumerable}.\\n */\\ncontract ERC721 is Context, ERC165, IERC721, IERC721Metadata {\\n    using Address for address;\\n    using Strings for uint256;\\n\\n    // Token name\\n    string private _name;\\n\\n    // Token symbol\\n    string private _symbol;\\n\\n    // Mapping from token ID to owner address\\n    mapping(uint256 => address) private _owners;\\n\\n    // Mapping owner address to token count\\n    mapping(address => uint256) private _balances;\\n\\n    // Mapping from token ID to approved address\\n    mapping(uint256 => address) private _tokenApprovals;\\n\\n    // Mapping from owner to operator approvals\\n    mapping(address => mapping(address => bool)) private _operatorApprovals;\\n\\n    /**\\n     * @dev Initializes the contract by setting a `name` and a `symbol` to the token collection.\\n     */\\n    constructor(string memory name_, string memory symbol_) {\\n        _name = name_;\\n        _symbol = symbol_;\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(ERC165, IERC165) returns (bool) {\\n        return\\n            interfaceId == type(IERC721).interfaceId ||\\n            interfaceId == type(IERC721Metadata).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-balanceOf}.\\n     */\\n    function balanceOf(address owner) public view virtual override returns (uint256) {\\n        require(owner != address(0), \\\"ERC721: balance query for the zero address\\\");\\n        return _balances[owner];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-ownerOf}.\\n     */\\n    function ownerOf(uint256 tokenId) public view virtual override returns (address) {\\n        address owner = _owners[tokenId];\\n        require(owner != address(0), \\\"ERC721: owner query for nonexistent token\\\");\\n        return owner;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-name}.\\n     */\\n    function name() public view virtual override returns (string memory) {\\n        return _name;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-symbol}.\\n     */\\n    function symbol() public view virtual override returns (string memory) {\\n        return _symbol;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Metadata-tokenURI}.\\n     */\\n    function tokenURI(uint256 tokenId) public view virtual override returns (string memory) {\\n        require(_exists(tokenId), \\\"ERC721Metadata: URI query for nonexistent token\\\");\\n\\n        string memory baseURI = _baseURI();\\n        return bytes(baseURI).length > 0 ? string(abi.encodePacked(baseURI, tokenId.toString())) : \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev Base URI for computing {tokenURI}. If set, the resulting URI for each\\n     * token will be the concatenation of the `baseURI` and the `tokenId`. Empty\\n     * by default, can be overriden in child contracts.\\n     */\\n    function _baseURI() internal view virtual returns (string memory) {\\n        return \\\"\\\";\\n    }\\n\\n    /**\\n     * @dev See {IERC721-approve}.\\n     */\\n    function approve(address to, uint256 tokenId) public virtual override {\\n        address owner = ERC721.ownerOf(tokenId);\\n        require(to != owner, \\\"ERC721: approval to current owner\\\");\\n\\n        require(\\n            _msgSender() == owner || isApprovedForAll(owner, _msgSender()),\\n            \\\"ERC721: approve caller is not owner nor approved for all\\\"\\n        );\\n\\n        _approve(to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-getApproved}.\\n     */\\n    function getApproved(uint256 tokenId) public view virtual override returns (address) {\\n        require(_exists(tokenId), \\\"ERC721: approved query for nonexistent token\\\");\\n\\n        return _tokenApprovals[tokenId];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-setApprovalForAll}.\\n     */\\n    function setApprovalForAll(address operator, bool approved) public virtual override {\\n        require(operator != _msgSender(), \\\"ERC721: approve to caller\\\");\\n\\n        _operatorApprovals[_msgSender()][operator] = approved;\\n        emit ApprovalForAll(_msgSender(), operator, approved);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-isApprovedForAll}.\\n     */\\n    function isApprovedForAll(address owner, address operator) public view virtual override returns (bool) {\\n        return _operatorApprovals[owner][operator];\\n    }\\n\\n    /**\\n     * @dev See {IERC721-transferFrom}.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        //solhint-disable-next-line max-line-length\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n\\n        _transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) public virtual override {\\n        safeTransferFrom(from, to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev See {IERC721-safeTransferFrom}.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) public virtual override {\\n        require(_isApprovedOrOwner(_msgSender(), tokenId), \\\"ERC721: transfer caller is not owner nor approved\\\");\\n        _safeTransfer(from, to, tokenId, _data);\\n    }\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * `_data` is additional data, it has no specified format and it is sent in call to `to`.\\n     *\\n     * This internal function is equivalent to {safeTransferFrom}, and can be used to e.g.\\n     * implement alternative mechanisms to perform token transfer, such as signature-based.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _transfer(from, to, tokenId);\\n        require(_checkOnERC721Received(from, to, tokenId, _data), \\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n    }\\n\\n    /**\\n     * @dev Returns whether `tokenId` exists.\\n     *\\n     * Tokens can be managed by their owner or approved accounts via {approve} or {setApprovalForAll}.\\n     *\\n     * Tokens start existing when they are minted (`_mint`),\\n     * and stop existing when they are burned (`_burn`).\\n     */\\n    function _exists(uint256 tokenId) internal view virtual returns (bool) {\\n        return _owners[tokenId] != address(0);\\n    }\\n\\n    /**\\n     * @dev Returns whether `spender` is allowed to manage `tokenId`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function _isApprovedOrOwner(address spender, uint256 tokenId) internal view virtual returns (bool) {\\n        require(_exists(tokenId), \\\"ERC721: operator query for nonexistent token\\\");\\n        address owner = ERC721.ownerOf(tokenId);\\n        return (spender == owner || getApproved(tokenId) == spender || isApprovedForAll(owner, spender));\\n    }\\n\\n    /**\\n     * @dev Safely mints `tokenId` and transfers it to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _safeMint(address to, uint256 tokenId) internal virtual {\\n        _safeMint(to, tokenId, \\\"\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-ERC721-_safeMint-address-uint256-}[`_safeMint`], with an additional `data` parameter which is\\n     * forwarded in {IERC721Receiver-onERC721Received} to contract recipients.\\n     */\\n    function _safeMint(\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) internal virtual {\\n        _mint(to, tokenId);\\n        require(\\n            _checkOnERC721Received(address(0), to, tokenId, _data),\\n            \\\"ERC721: transfer to non ERC721Receiver implementer\\\"\\n        );\\n    }\\n\\n    /**\\n     * @dev Mints `tokenId` and transfers it to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {_safeMint} whenever possible\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must not exist.\\n     * - `to` cannot be the zero address.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _mint(address to, uint256 tokenId) internal virtual {\\n        require(to != address(0), \\\"ERC721: mint to the zero address\\\");\\n        require(!_exists(tokenId), \\\"ERC721: token already minted\\\");\\n\\n        _beforeTokenTransfer(address(0), to, tokenId);\\n\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(address(0), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Destroys `tokenId`.\\n     * The approval is cleared when the token is burned.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _burn(uint256 tokenId) internal virtual {\\n        address owner = ERC721.ownerOf(tokenId);\\n\\n        _beforeTokenTransfer(owner, address(0), tokenId);\\n\\n        // Clear approvals\\n        _approve(address(0), tokenId);\\n\\n        _balances[owner] -= 1;\\n        delete _owners[tokenId];\\n\\n        emit Transfer(owner, address(0), tokenId);\\n    }\\n\\n    /**\\n     * @dev Transfers `tokenId` from `from` to `to`.\\n     *  As opposed to {transferFrom}, this imposes no restrictions on msg.sender.\\n     *\\n     * Requirements:\\n     *\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function _transfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {\\n        require(ERC721.ownerOf(tokenId) == from, \\\"ERC721: transfer of token that is not own\\\");\\n        require(to != address(0), \\\"ERC721: transfer to the zero address\\\");\\n\\n        _beforeTokenTransfer(from, to, tokenId);\\n\\n        // Clear approvals from the previous owner\\n        _approve(address(0), tokenId);\\n\\n        _balances[from] -= 1;\\n        _balances[to] += 1;\\n        _owners[tokenId] = to;\\n\\n        emit Transfer(from, to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Approve `to` to operate on `tokenId`\\n     *\\n     * Emits a {Approval} event.\\n     */\\n    function _approve(address to, uint256 tokenId) internal virtual {\\n        _tokenApprovals[tokenId] = to;\\n        emit Approval(ERC721.ownerOf(tokenId), to, tokenId);\\n    }\\n\\n    /**\\n     * @dev Internal function to invoke {IERC721Receiver-onERC721Received} on a target address.\\n     * The call is not executed if the target address is not a contract.\\n     *\\n     * @param from address representing the previous owner of the given token ID\\n     * @param to target address that will receive the tokens\\n     * @param tokenId uint256 ID of the token to be transferred\\n     * @param _data bytes optional data to send along with the call\\n     * @return bool whether the call correctly returned the expected magic value\\n     */\\n    function _checkOnERC721Received(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes memory _data\\n    ) private returns (bool) {\\n        if (to.isContract()) {\\n            try IERC721Receiver(to).onERC721Received(_msgSender(), from, tokenId, _data) returns (bytes4 retval) {\\n                return retval == IERC721Receiver.onERC721Received.selector;\\n            } catch (bytes memory reason) {\\n                if (reason.length == 0) {\\n                    revert(\\\"ERC721: transfer to non ERC721Receiver implementer\\\");\\n                } else {\\n                    assembly {\\n                        revert(add(32, reason), mload(reason))\\n                    }\\n                }\\n            }\\n        } else {\\n            return true;\\n        }\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` and `to` are never both zero.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual {}\\n}\\n\",\"keccak256\":\"0x7d2b8ba4b256bfcac347991b75242f9bc37f499c5236af50cf09d0b35943dc0c\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/introspection/IERC165.sol\\\";\\n\\n/**\\n * @dev Required interface of an ERC721 compliant contract.\\n */\\ninterface IERC721 is IERC165 {\\n    /**\\n     * @dev Emitted when `tokenId` token is transferred from `from` to `to`.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables `approved` to manage the `tokenId` token.\\n     */\\n    event Approval(address indexed owner, address indexed approved, uint256 indexed tokenId);\\n\\n    /**\\n     * @dev Emitted when `owner` enables or disables (`approved`) `operator` to manage all of its assets.\\n     */\\n    event ApprovalForAll(address indexed owner, address indexed operator, bool approved);\\n\\n    /**\\n     * @dev Returns the number of tokens in ``owner``'s account.\\n     */\\n    function balanceOf(address owner) external view returns (uint256 balance);\\n\\n    /**\\n     * @dev Returns the owner of the `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function ownerOf(uint256 tokenId) external view returns (address owner);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`, checking first that contract recipients\\n     * are aware of the ERC721 protocol to prevent tokens from being forever locked.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be have been allowed to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Transfers `tokenId` token from `from` to `to`.\\n     *\\n     * WARNING: Usage of this method is discouraged, use {safeTransferFrom} whenever possible.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) external;\\n\\n    /**\\n     * @dev Gives permission to `to` to transfer `tokenId` token to another account.\\n     * The approval is cleared when the token is transferred.\\n     *\\n     * Only a single account can be approved at a time, so approving the zero address clears previous approvals.\\n     *\\n     * Requirements:\\n     *\\n     * - The caller must own the token or be an approved operator.\\n     * - `tokenId` must exist.\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address to, uint256 tokenId) external;\\n\\n    /**\\n     * @dev Returns the account approved for `tokenId` token.\\n     *\\n     * Requirements:\\n     *\\n     * - `tokenId` must exist.\\n     */\\n    function getApproved(uint256 tokenId) external view returns (address operator);\\n\\n    /**\\n     * @dev Approve or remove `operator` as an operator for the caller.\\n     * Operators can call {transferFrom} or {safeTransferFrom} for any token owned by the caller.\\n     *\\n     * Requirements:\\n     *\\n     * - The `operator` cannot be the caller.\\n     *\\n     * Emits an {ApprovalForAll} event.\\n     */\\n    function setApprovalForAll(address operator, bool _approved) external;\\n\\n    /**\\n     * @dev Returns if the `operator` is allowed to manage all of the assets of `owner`.\\n     *\\n     * See {setApprovalForAll}\\n     */\\n    function isApprovedForAll(address owner, address operator) external view returns (bool);\\n\\n    /**\\n     * @dev Safely transfers `tokenId` token from `from` to `to`.\\n     *\\n     * Requirements:\\n     *\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     * - `tokenId` token must exist and be owned by `from`.\\n     * - If the caller is not `from`, it must be approved to move this token by either {approve} or {setApprovalForAll}.\\n     * - If `to` refers to a smart contract, it must implement {IERC721Receiver-onERC721Received}, which is called upon a safe transfer.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function safeTransferFrom(\\n        address from,\\n        address to,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external;\\n}\\n\",\"keccak256\":\"0xf101e8720213560fab41104d53b3cc7ba0456ef3a98455aa7f022391783144a0\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/IERC721Receiver.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @title ERC721 token receiver interface\\n * @dev Interface for any contract that wants to support safeTransfers\\n * from ERC721 asset contracts.\\n */\\ninterface IERC721Receiver {\\n    /**\\n     * @dev Whenever an {IERC721} `tokenId` token is transferred to this contract via {IERC721-safeTransferFrom}\\n     * by `operator` from `from`, this function is called.\\n     *\\n     * It must return its Solidity selector to confirm the token transfer.\\n     * If any other value is returned or the interface is not implemented by the recipient, the transfer will be reverted.\\n     *\\n     * The selector can be obtained in Solidity with `IERC721.onERC721Received.selector`.\\n     */\\n    function onERC721Received(\\n        address operator,\\n        address from,\\n        uint256 tokenId,\\n        bytes calldata data\\n    ) external returns (bytes4);\\n}\\n\",\"keccak256\":\"0xd9517254724276e2e8de3769183c1f738f445f0095c26fd9b86d3c6687e887b9\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../ERC721.sol\\\";\\nimport \\\"./IERC721Enumerable.sol\\\";\\n\\n/**\\n * @dev This implements an optional extension of {ERC721} defined in the EIP that adds\\n * enumerability of all the token ids in the contract as well as all token ids owned by each\\n * account.\\n */\\nabstract contract ERC721Enumerable is ERC721, IERC721Enumerable {\\n    // Mapping from owner to list of owned token IDs\\n    mapping(address => mapping(uint256 => uint256)) private _ownedTokens;\\n\\n    // Mapping from token ID to index of the owner tokens list\\n    mapping(uint256 => uint256) private _ownedTokensIndex;\\n\\n    // Array with all token ids, used for enumeration\\n    uint256[] private _allTokens;\\n\\n    // Mapping from token id to position in the allTokens array\\n    mapping(uint256 => uint256) private _allTokensIndex;\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override(IERC165, ERC721) returns (bool) {\\n        return interfaceId == type(IERC721Enumerable).interfaceId || super.supportsInterface(interfaceId);\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenOfOwnerByIndex}.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721.balanceOf(owner), \\\"ERC721Enumerable: owner index out of bounds\\\");\\n        return _ownedTokens[owner][index];\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-totalSupply}.\\n     */\\n    function totalSupply() public view virtual override returns (uint256) {\\n        return _allTokens.length;\\n    }\\n\\n    /**\\n     * @dev See {IERC721Enumerable-tokenByIndex}.\\n     */\\n    function tokenByIndex(uint256 index) public view virtual override returns (uint256) {\\n        require(index < ERC721Enumerable.totalSupply(), \\\"ERC721Enumerable: global index out of bounds\\\");\\n        return _allTokens[index];\\n    }\\n\\n    /**\\n     * @dev Hook that is called before any token transfer. This includes minting\\n     * and burning.\\n     *\\n     * Calling conditions:\\n     *\\n     * - When `from` and `to` are both non-zero, ``from``'s `tokenId` will be\\n     * transferred to `to`.\\n     * - When `from` is zero, `tokenId` will be minted for `to`.\\n     * - When `to` is zero, ``from``'s `tokenId` will be burned.\\n     * - `from` cannot be the zero address.\\n     * - `to` cannot be the zero address.\\n     *\\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\\n     */\\n    function _beforeTokenTransfer(\\n        address from,\\n        address to,\\n        uint256 tokenId\\n    ) internal virtual override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n\\n        if (from == address(0)) {\\n            _addTokenToAllTokensEnumeration(tokenId);\\n        } else if (from != to) {\\n            _removeTokenFromOwnerEnumeration(from, tokenId);\\n        }\\n        if (to == address(0)) {\\n            _removeTokenFromAllTokensEnumeration(tokenId);\\n        } else if (to != from) {\\n            _addTokenToOwnerEnumeration(to, tokenId);\\n        }\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's ownership-tracking data structures.\\n     * @param to address representing the new owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be added to the tokens list of the given address\\n     */\\n    function _addTokenToOwnerEnumeration(address to, uint256 tokenId) private {\\n        uint256 length = ERC721.balanceOf(to);\\n        _ownedTokens[to][length] = tokenId;\\n        _ownedTokensIndex[tokenId] = length;\\n    }\\n\\n    /**\\n     * @dev Private function to add a token to this extension's token tracking data structures.\\n     * @param tokenId uint256 ID of the token to be added to the tokens list\\n     */\\n    function _addTokenToAllTokensEnumeration(uint256 tokenId) private {\\n        _allTokensIndex[tokenId] = _allTokens.length;\\n        _allTokens.push(tokenId);\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's ownership-tracking data structures. Note that\\n     * while the token is not assigned a new owner, the `_ownedTokensIndex` mapping is _not_ updated: this allows for\\n     * gas optimizations e.g. when performing a transfer operation (avoiding double writes).\\n     * This has O(1) time complexity, but alters the order of the _ownedTokens array.\\n     * @param from address representing the previous owner of the given token ID\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list of the given address\\n     */\\n    function _removeTokenFromOwnerEnumeration(address from, uint256 tokenId) private {\\n        // To prevent a gap in from's tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = ERC721.balanceOf(from) - 1;\\n        uint256 tokenIndex = _ownedTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary\\n        if (tokenIndex != lastTokenIndex) {\\n            uint256 lastTokenId = _ownedTokens[from][lastTokenIndex];\\n\\n            _ownedTokens[from][tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n            _ownedTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n        }\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _ownedTokensIndex[tokenId];\\n        delete _ownedTokens[from][lastTokenIndex];\\n    }\\n\\n    /**\\n     * @dev Private function to remove a token from this extension's token tracking data structures.\\n     * This has O(1) time complexity, but alters the order of the _allTokens array.\\n     * @param tokenId uint256 ID of the token to be removed from the tokens list\\n     */\\n    function _removeTokenFromAllTokensEnumeration(uint256 tokenId) private {\\n        // To prevent a gap in the tokens array, we store the last token in the index of the token to delete, and\\n        // then delete the last slot (swap and pop).\\n\\n        uint256 lastTokenIndex = _allTokens.length - 1;\\n        uint256 tokenIndex = _allTokensIndex[tokenId];\\n\\n        // When the token to delete is the last token, the swap operation is unnecessary. However, since this occurs so\\n        // rarely (when the last minted token is burnt) that we still do the swap here to avoid the gas cost of adding\\n        // an 'if' statement (like in _removeTokenFromOwnerEnumeration)\\n        uint256 lastTokenId = _allTokens[lastTokenIndex];\\n\\n        _allTokens[tokenIndex] = lastTokenId; // Move the last token to the slot of the to-delete token\\n        _allTokensIndex[lastTokenId] = tokenIndex; // Update the moved token's index\\n\\n        // This also deletes the contents at the last position of the array\\n        delete _allTokensIndex[tokenId];\\n        _allTokens.pop();\\n    }\\n}\\n\",\"keccak256\":\"0x41dc7bf7f69c668eb98aa078c5140a4d3c3b097124ee4b6058a649ca99688300\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Enumerable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional enumeration extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Enumerable is IERC721 {\\n    /**\\n     * @dev Returns the total amount of tokens stored by the contract.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns a token ID owned by `owner` at a given `index` of its token list.\\n     * Use along with {balanceOf} to enumerate all of ``owner``'s tokens.\\n     */\\n    function tokenOfOwnerByIndex(address owner, uint256 index) external view returns (uint256 tokenId);\\n\\n    /**\\n     * @dev Returns a token ID at a given `index` of all the tokens stored by the contract.\\n     * Use along with {totalSupply} to enumerate all tokens.\\n     */\\n    function tokenByIndex(uint256 index) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xa69205e5009601cf13be78b1e2f500e1e3b1d8012f22d966e63975273f602038\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC721/extensions/IERC721Metadata.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC721.sol\\\";\\n\\n/**\\n * @title ERC-721 Non-Fungible Token Standard, optional metadata extension\\n * @dev See https://eips.ethereum.org/EIPS/eip-721\\n */\\ninterface IERC721Metadata is IERC721 {\\n    /**\\n     * @dev Returns the token collection name.\\n     */\\n    function name() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the token collection symbol.\\n     */\\n    function symbol() external view returns (string memory);\\n\\n    /**\\n     * @dev Returns the Uniform Resource Identifier (URI) for `tokenId` token.\\n     */\\n    function tokenURI(uint256 tokenId) external view returns (string memory);\\n}\\n\",\"keccak256\":\"0xd32fb7f530a914b1083d10a6bed3a586f2451952fec04fe542bcc670a82f7ba5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3336baae5cf23e94274d75336e2d412193be508504aee185e61dc7d58cd05c8a\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x90565a39ae45c80f0468dc96c7b20d0afc3055f344c8203a0c9258239f350b9f\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x391d3ba97ab6856a16b225d6ee29617ad15ff00db70f3b4df1ab5ea33aa47c9d\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n *\\n * Alternatively, {ERC165Storage} provides an easier to use but more expensive implementation.\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x5718c5df9bd67ac68a796961df938821bb5dc0cd4c6118d77e9145afb187409b\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xa28007762d9da9db878dd421960c8cb9a10471f47ab5c1b3309bfe48e9e79ff4\",\"license\":\"MIT\"},\"base64-sol/base64.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\n/// @title Base64\\n/// @author Brecht Devos - <brecht@loopring.org>\\n/// @notice Provides a function for encoding some bytes in base64\\nlibrary Base64 {\\n    string internal constant TABLE = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\\n\\n    function encode(bytes memory data) internal pure returns (string memory) {\\n        if (data.length == 0) return '';\\n        \\n        // load the table into memory\\n        string memory table = TABLE;\\n\\n        // multiply by 4/3 rounded up\\n        uint256 encodedLen = 4 * ((data.length + 2) / 3);\\n\\n        // add some extra buffer at the end required for the writing\\n        string memory result = new string(encodedLen + 32);\\n\\n        assembly {\\n            // set the actual output length\\n            mstore(result, encodedLen)\\n            \\n            // prepare the lookup table\\n            let tablePtr := add(table, 1)\\n            \\n            // input ptr\\n            let dataPtr := data\\n            let endPtr := add(dataPtr, mload(data))\\n            \\n            // result ptr, jump over length\\n            let resultPtr := add(result, 32)\\n            \\n            // run over the input, 3 bytes at a time\\n            for {} lt(dataPtr, endPtr) {}\\n            {\\n               dataPtr := add(dataPtr, 3)\\n               \\n               // read 3 bytes\\n               let input := mload(dataPtr)\\n               \\n               // write 4 characters\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(18, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr(12, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(shr( 6, input), 0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n               mstore(resultPtr, shl(248, mload(add(tablePtr, and(        input,  0x3F)))))\\n               resultPtr := add(resultPtr, 1)\\n            }\\n            \\n            // padding with '='\\n            switch mod(mload(data), 3)\\n            case 1 { mstore(sub(resultPtr, 2), shl(240, 0x3d3d)) }\\n            case 2 { mstore(sub(resultPtr, 1), shl(248, 0x3d)) }\\n        }\\n        \\n        return result;\\n    }\\n}\\n\",\"keccak256\":\"0x0c8ad17afea99676d4dbab1857f52a7660b67602a79d03abd0a4c742074bbeb3\",\"license\":\"MIT\"},\"contracts/TheDate.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nimport { IERC20 } from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport { IERC165 } from \\\"@openzeppelin/contracts/utils/introspection/IERC165.sol\\\";\\nimport { ERC721 } from \\\"@openzeppelin/contracts/token/ERC721/ERC721.sol\\\";\\nimport { IERC721 } from \\\"@openzeppelin/contracts/token/ERC721/IERC721.sol\\\";\\nimport { ERC721Enumerable } from \\\"@openzeppelin/contracts/token/ERC721/extensions/ERC721Enumerable.sol\\\";\\nimport { Strings } from \\\"@openzeppelin/contracts/utils/Strings.sol\\\";\\nimport { Base64 } from \\\"base64-sol/base64.sol\\\";\\nimport { Ownable } from \\\"@openzeppelin/contracts/access/Ownable.sol\\\";\\nimport { ReentrancyGuard } from \\\"@openzeppelin/contracts/security/ReentrancyGuard.sol\\\";\\nimport { IERC2981 } from \\\"@openzeppelin/contracts/interfaces/IERC2981.sol\\\";\\nimport { IWETH } from \\\"./interfaces/IWETH.sol\\\";\\n\\ncontract TheDate is ERC721Enumerable, Ownable, IERC2981, ReentrancyGuard {\\n    // ==== Parameters ====\\n    // == DAO controlled parameters ==\\n    uint256 public claimingPrice = 0.01 ether;\\n    uint256 public reservePrice = 0.01 ether;\\n    uint256 public minBidIncrementBps = 1000;\\n    uint256 public engravingPrice = 0.05 ether;\\n    uint256 public erasingPrice = 0.1 ether;\\n    uint256 public noteSizeLimit = 100;\\n\\n    // == Admin controlled parameters ==\\n    uint256 public royaltyBps = 1000;\\n    string public tokenDescription = \\\"The Date is a metadata-based NFT art project about time. \\\" \\n        \\\"Each fleeting day would be imprinted into an NFT artwork immutably lasting forever. \\\" \\n        \\\"The owner can engrave or erase a note on the artwork as an additional metadata. \\\" \\n        \\\"The Date is metadata. Feel free to use The Date in any way you want. See more: https://thedate.art\\\";\\n    string[] public svgImageTemplate = [''\\n        '<svg xmlns=\\\"http://www.w3.org/2000/svg\\\" preserveAspectRatio=\\\"xMinYMin meet\\\" viewBox=\\\"0 0 500 500\\\">'\\n        '<rect width=\\\"100%\\\" height=\\\"100%\\\" fill=\\\"black\\\" />'\\n        '<style>.base { fill: white; font-family: monospace; dominant-baseline: middle; text-anchor: middle; }</style>'\\n        '<text x=\\\"50%\\\" y=\\\"50%\\\" font-size=\\\"50px\\\" class=\\\"base\\\">',\\n        '{{date}}',\\n        '</text><text x=\\\"50%\\\" y=\\\"90%\\\" font-size=\\\"10px\\\" class=\\\"base\\\">',\\n        '{{note}}',\\n        '</text></svg>'];\\n\\n    // == External contracts ==\\n    address payable private immutable _foundation;\\n    address private immutable _weth;\\n    address private immutable _loot;\\n\\n    // ==== Events ====\\n    // == Parameter-related Events ==\\n    event ClaimingPriceChanged(uint256 claimingPrice);\\n    event AuctionReservePriceChanged(uint256 reservePrice);\\n    event AuctionMinBidIncrementBpsChanged(uint256 minBidIncrementBps);\\n    event EngravingPriceChanged(uint256 amount);\\n    event ErasingPriceChanged(uint256 amount);\\n    event NoteSizeLimitChanged(uint256 length);\\n\\n    // == Auction-related events ==\\n    event BidPlaced(uint256 indexed tokenId, address indexed bidder, uint256 amount);\\n    event AuctionSettled(uint256 indexed tokenId, address indexed winner, uint256 amount);\\n    event ArtworkClaimed(uint256 indexed tokenId, address indexed owner);\\n    event ArtworkAirdropped(uint256 indexed tokenId, address indexed owner);\\n\\n    // == Note-related events ==\\n    event NoteEngraved(uint256 indexed tokenId, address indexed owner, string note);\\n    event NoteErased(uint256 indexed tokenId, address indexed owner);\\n\\n    // ==== Storage ====\\n    // == Note ==\\n    mapping(uint256 => string) private _notes;\\n\\n    // == Auction ==\\n    mapping(uint256 => address) private _highestBidder;\\n    mapping(uint256 => uint256) private _highestBid;\\n\\n    // There is at most one unchaimed and auctioned token.\\n    uint256 private _lastUnchaimedAuctionedTokenId = 0;\\n\\n    // ==== Parameter Related Functions ==== \\n    // == DAO controlled parameters ==\\n    function setClaimingPrice(uint256 claimingPrice_) external onlyOwner {\\n        claimingPrice = claimingPrice_;\\n        emit ClaimingPriceChanged(claimingPrice);\\n    }\\n\\n    function setAuctionReservePrice(uint256 reservePrice_) external onlyOwner {\\n        reservePrice = reservePrice_;\\n        emit AuctionReservePriceChanged(reservePrice);\\n    }\\n\\n    function setAuctionMinBidIncrementBps(uint256 minBidIncrementBps_) external onlyOwner {\\n        minBidIncrementBps = minBidIncrementBps_;\\n        emit AuctionMinBidIncrementBpsChanged(minBidIncrementBps);\\n    }\\n\\n    function setEngravingPrice(uint256 engravingPrice_) external onlyOwner {\\n        engravingPrice = engravingPrice_;\\n        emit EngravingPriceChanged(engravingPrice);\\n    }\\n\\n    function setErasingPrice(uint256 erasingPrice_) external onlyOwner {\\n        erasingPrice = erasingPrice_;\\n        emit ErasingPriceChanged(erasingPrice);\\n    }\\n    \\n    function setNoteSizeLimit(uint256 noteSizeLimit_) external onlyOwner {\\n        noteSizeLimit = noteSizeLimit_;\\n        emit NoteSizeLimitChanged(noteSizeLimit);\\n    }\\n\\n    // == Admin controlled parameters ==\\n    function setRoyaltyBps(uint256 royaltyBps_) external onlyOwner {\\n        require(royaltyBps_ <= 10000, \\\"royaltyBps should be within [0, 10000]\\\");\\n        royaltyBps = royaltyBps_;\\n    }\\n\\n    function setTokenDescription(string memory tokenDescription_) external onlyOwner {\\n        tokenDescription = tokenDescription_;\\n    }\\n\\n    function setSVGImageTemplate(string[] memory svgImageTemplate_) external onlyOwner {\\n        svgImageTemplate = svgImageTemplate_;\\n    }\\n\\n    // ==== Owner related functions ==== \\n    // == Owner related modifiers ==\\n    modifier onlyTokenOwner(uint256 tokenId) {\\n        require(ownerOf(tokenId) == msg.sender, \\\"Caller should be the owner of the artwork\\\");\\n        _;\\n    }\\n\\n    // == Note related operations ==\\n    modifier validNote(string memory note) {\\n        require(bytes(note).length < noteSizeLimit, \\\"Note should be shorter than noteSizeLimit\\\");\\n        _;\\n    }\\n\\n    function engraveNote(uint256 tokenId, string memory note) external payable onlyTokenOwner(tokenId) validNote(note) {\\n        require(owner() == msg.sender || msg.value >= engravingPrice, \\\"Should pay engravingPrice\\\");\\n        require(bytes(_notes[tokenId]).length == 0, \\\"Note should be empty before engraving\\\");\\n\\n        _notes[tokenId] = note;\\n        _foundation.transfer(msg.value);\\n        emit NoteEngraved(tokenId, ownerOf(tokenId), note);\\n    }\\n\\n    function eraseNote(uint256 tokenId) external payable onlyTokenOwner(tokenId) {\\n        require(owner() == msg.sender || msg.value >= erasingPrice, \\\"Should pay erasingPrice\\\");\\n        require(bytes(_notes[tokenId]).length > 0, \\\"Note should be nonempty before erasing\\\");\\n\\n        _notes[tokenId] = \\\"\\\";\\n        _foundation.transfer(msg.value);\\n        emit NoteErased(tokenId, ownerOf(tokenId));\\n    }\\n\\n    // ==== Metadata functions ====\\n    function getDate(uint256 tokenId) public pure returns (string memory) {\\n        (uint256 year, uint256 month, uint256 day) = daysToDate(tokenId);\\n        string memory yearStr = Strings.toString(year);\\n        string memory monthStr = Strings.toString(month);\\n        if (bytes(monthStr).length == 1) {\\n            monthStr = string(abi.encodePacked(\\\"0\\\", monthStr));\\n        }\\n        string memory dayStr = Strings.toString(day);\\n        if (bytes(dayStr).length == 1) {\\n            dayStr = string(abi.encodePacked(\\\"0\\\", dayStr));\\n        }\\n        return string(abi.encodePacked(yearStr, \\\"-\\\", monthStr, \\\"-\\\", dayStr));\\n    }\\n\\n    function getNote(uint256 tokenId) public view returns (string memory) {\\n        return _notes[tokenId];\\n    }\\n    \\n    function _stringEquals(string memory a, string memory b) internal pure returns (bool) {\\n        return bytes(a).length == bytes(b).length && keccak256(abi.encodePacked(a)) == keccak256(abi.encodePacked(b));\\n    }\\n\\n    function escapeHTML(string memory s) public pure returns (string memory) {\\n        bytes memory b = bytes(s);\\n        string memory output = \\\"\\\"; \\n        for (uint i = 0; i < b.length; i++) {\\n            if (b[i] == '<') {\\n                output = string(abi.encodePacked(output, \\\"&lt;\\\"));\\n            } else if (b[i] == '>') {\\n                output = string(abi.encodePacked(output, \\\"&gt;\\\"));\\n            } else if (b[i] == '&') {\\n                output = string(abi.encodePacked(output, \\\"&amp;\\\"));\\n            } else if (b[i] == '\\\"') {\\n                output = string(abi.encodePacked(output, \\\"&quot;\\\"));\\n            } else if (b[i] == \\\"'\\\") {\\n                output = string(abi.encodePacked(output, \\\"&apos;\\\"));\\n            } else {\\n                output = string(abi.encodePacked(output, b[i]));\\n            }\\n        }\\n        return output;\\n    }\\n\\n    function escapeQuotes(string memory symbol) public pure returns (string memory) {\\n        bytes memory symbolBytes = bytes(symbol);\\n        uint quotesCount = 0;\\n        for (uint i = 0; i < symbolBytes.length; i++) {\\n            if (symbolBytes[i] == '\\\"') {\\n                quotesCount++;\\n            }\\n        }\\n        if (quotesCount > 0) {\\n            bytes memory escapedBytes = new bytes(symbolBytes.length + (quotesCount));\\n            uint256 index;\\n            for (uint i = 0; i < symbolBytes.length; i++) {\\n                if (symbolBytes[i] == '\\\"') {\\n                    escapedBytes[index++] = '\\\\\\\\';\\n                }\\n                escapedBytes[index++] = symbolBytes[i];\\n            }\\n            return string(escapedBytes);\\n        }\\n        return symbol;\\n    }\\n\\n    function generateSVGImage(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"tokenId is non-existent\\\");\\n        string memory date = getDate(tokenId);\\n        string memory note = getNote(tokenId);\\n        \\n        string memory output = \\\"\\\";\\n        for (uint i = 0; i < svgImageTemplate.length; ++i) {\\n            string memory part;\\n            if (_stringEquals(svgImageTemplate[i], \\\"{{date}}\\\")) {\\n                part = date;\\n            } else if (_stringEquals(svgImageTemplate[i], \\\"{{note}}\\\")) {\\n                part = escapeHTML(note);\\n            } else {\\n                part = svgImageTemplate[i];\\n            }\\n            output = string(abi.encodePacked(output, part));\\n        }\\n\\n        return output;\\n    }\\n\\n    function generateMetadata(uint256 tokenId) public view returns (string memory) {\\n        require(_exists(tokenId), \\\"tokenId is non-existent\\\");\\n        string memory image = Base64.encode(\\n            bytes(generateSVGImage(tokenId))\\n        );\\n\\n        string memory json = string(abi.encodePacked(\\n            '{\\\"name\\\": \\\"The Date #', \\n            Strings.toString(tokenId),\\n            ': ', \\n            getDate(tokenId), \\n            '\\\", \\\"description\\\": \\\"',\\n            escapeQuotes(tokenDescription),\\n            '\\\", \\\"image\\\": \\\"data:image/svg+xml;base64,', \\n            image, \\n            '\\\"}'\\n        ));\\n\\n        return json;\\n    }\\n\\n    function tokenURI(uint256 tokenId) public view override returns (string memory) {\\n        require(_exists(tokenId), \\\"tokenId is nonexistent\\\");\\n        string memory output = string(abi.encodePacked(\\n            'data:application/json;base64,', \\n            Base64.encode(bytes(generateMetadata(tokenId)))\\n        ));\\n\\n        return output;\\n    }\\n    \\n    // ==== Claiming related functions ====\\n    modifier enoughFund() {\\n        require(owner() == msg.sender || \\n            IERC721(_loot).balanceOf(msg.sender) > 0 || \\n            msg.value >= claimingPrice, \\\"Should pay claimingPrice or own a Loot NFT\\\");\\n        _;\\n    }\\n\\n    function _mintUnclaimedAndUnauctioned(address to, uint256 tokenId) internal {\\n        require(tokenId < block.timestamp / 1 days, \\\"Only past tokenId is claimable\\\");\\n        require(_highestBidder[tokenId] == address(0) && _highestBid[tokenId] == 0, \\\"tokenId should not be auctioned\\\");\\n        require(!_exists(tokenId), \\\"tokenId should not be claimed\\\");\\n\\n        _mint(to, tokenId);\\n    }\\n    \\n    function available(uint256 tokenId) external view returns (bool) {\\n        return (tokenId < block.timestamp / 1 days) && \\n            (_highestBidder[tokenId] == address(0) && _highestBid[tokenId] == 0) &&\\n            (!_exists(tokenId));\\n    }\\n\\n    function claim(uint256 tokenId) external payable nonReentrant enoughFund {\\n        settleLastAuction();\\n\\n        _mintUnclaimedAndUnauctioned(msg.sender, tokenId);\\n\\n        if (msg.value > 0) {\\n            _foundation.transfer(msg.value);\\n        }\\n        emit ArtworkClaimed(tokenId, msg.sender);\\n    }\\n\\n    function airdrop(address[] memory addresses, uint256[] memory tokenIds) external nonReentrant onlyOwner {\\n        settleLastAuction();\\n        \\n        for (uint i = 0; i < tokenIds.length; ++i) {\\n            address to = addresses[i];\\n            uint256 tokenId = tokenIds[i];\\n            _mintUnclaimedAndUnauctioned(to, tokenId);\\n\\n            emit ArtworkAirdropped(tokenId, to);\\n        }\\n    }\\n\\n    // ==== Auction related functions ==== \\n    function getHighestBid(uint256 tokenId) external view returns (address bidder, uint256 amount) {\\n        return (_highestBidder[tokenId], _highestBid[tokenId]);\\n    }\\n\\n    function settleLastAuction() public {\\n        uint256 tokenId = _lastUnchaimedAuctionedTokenId;\\n\\n        if (block.timestamp / 1 days > tokenId &&  _highestBidder[tokenId] != address(0) && _highestBid[tokenId] > 0 \\n            && !_exists(tokenId)) {\\n            _settleAuction(tokenId);\\n        }\\n    }\\n\\n    function getCurrentAuctionTokenId() public view returns (uint256) {\\n        return block.timestamp / 1 days;\\n    }\\n\\n    function getCurrentMinimumBid() public view returns (uint256 amount) {\\n        uint256 tokenId = block.timestamp / 1 days;\\n        uint256 minimumBid = _highestBid[tokenId] * (10000 + minBidIncrementBps) / 10000;\\n        if (reservePrice > minimumBid) {\\n            minimumBid = reservePrice;\\n        }\\n        return minimumBid;\\n    }\\n\\n    function placeBid() public payable nonReentrant {\\n        uint256 tokenId = block.timestamp / 1 days;\\n        uint256 amount = msg.value;\\n\\n        require(amount >= reservePrice, \\\"Must send more than reservePrice\\\");\\n        require(amount >= getCurrentMinimumBid(), \\\"Must send more than last bid by minBidIncrementBps\\\");\\n\\n        if (_highestBidder[tokenId] == address(0)) {\\n            settleLastAuction();\\n            _lastUnchaimedAuctionedTokenId = tokenId;\\n        } else {\\n            _safeTransferETHWithFallback(_highestBidder[tokenId], _highestBid[tokenId]);\\n        }\\n\\n        _highestBidder[tokenId] = msg.sender;\\n        _highestBid[tokenId] = amount;\\n\\n        emit BidPlaced(tokenId, msg.sender, amount);\\n    }\\n\\n    /// @notice Settle the auction and send the highest bid to the beneficiary.\\n    function _settleAuction(uint256 tokenId) internal {\\n        require(block.timestamp / 1 days > tokenId, \\\"Auction not yet ended\\\");\\n        require(_highestBidder[tokenId] != address(0) && _highestBid[tokenId] > 0, \\\"There should be at least a bid for the date\\\");\\n        require(!_exists(tokenId), \\\"Should not reclaim the auction\\\");\\n\\n        // It cannot be a safeMint. The Auction will never ends.\\n        _mint(_highestBidder[tokenId], tokenId);\\n        _foundation.transfer(_highestBid[tokenId]);\\n\\n        emit AuctionSettled(tokenId, _highestBidder[tokenId], _highestBid[tokenId]);\\n    }\\n\\n    /// @notice Transfer ETH. If the ETH transfer fails, wrap the ETH and try send it as WETH.\\n    function _safeTransferETHWithFallback(address to, uint256 amount) internal {\\n        if (!_safeTransferETH(to, amount)) {\\n            IWETH(_weth).deposit{ value: amount }();\\n            IERC20(_weth).transfer(to, amount);\\n        }\\n    }\\n\\n    /// @notice Transfer ETH and return the success status.\\n    /// @dev This function only forwards 30,000 gas to the callee.\\n    function _safeTransferETH(address to, uint256 value) internal returns (bool) {\\n        (bool success, ) = to.call{ value: value, gas: 30_000 }(new bytes(0));\\n        return success;\\n    }\\n\\n    // ==== Constructor ====\\n    constructor(address foundation_,\\n                address weth_,\\n                address loot_) \\n        ERC721(\\\"The Date\\\", \\\"DATE\\\") Ownable()\\n    {\\n        _foundation = payable(foundation_);\\n        _weth = weth_;\\n        _loot = loot_;\\n    }\\n\\n    function exists(uint256 tokenId) external view returns (bool) {\\n        return _exists(tokenId);\\n    }\\n\\n    function _beforeTokenTransfer(address from, address to, uint256 tokenId) internal override {\\n        super._beforeTokenTransfer(from, to, tokenId);\\n    }\\n\\n    function supportsInterface(bytes4 interfaceId) \\n        public view override(ERC721Enumerable, IERC165) returns (bool) \\n    {\\n        return ERC721Enumerable.supportsInterface(interfaceId) ||\\n            type(IERC2981).interfaceId == interfaceId ||\\n            type(IERC165).interfaceId == interfaceId;\\n    }\\n\\n    // ==== Royalty Functions ====\\n    function royaltyInfo(uint256 tokenId, uint256 salePrice)\\n        external view override returns (address receiver, uint256 royaltyAmount)\\n    {\\n        return (_foundation, (salePrice * royaltyBps) / 10000);\\n    }\\n\\n    // ==== Day =====\\n        // ------------------------------------------------------------------------\\n    // Calculate year/month/day from the number of days since 1970/01/01 using\\n    // the date conversion algorithm from\\n    //   http://aa.usno.navy.mil/faq/docs/JD_Formula.php\\n    // and adding the offset 2440588 so that 1970/01/01 is day 0\\n    //\\n    // int L = days + 68569 + offset\\n    // int N = 4 * L / 146097\\n    // L = L - (146097 * N + 3) / 4\\n    // year = 4000 * (L + 1) / 1461001\\n    // L = L - 1461 * year / 4 + 31\\n    // month = 80 * L / 2447\\n    // dd = L - 2447 * month / 80\\n    // L = month / 11\\n    // month = month + 2 - 12 * L\\n    // year = 100 * (N - 49) + year + L\\n    // ------------------------------------------------------------------------\\n    int256 constant OFFSET19700101 = 2440588;\\n\\n    function daysToDate(uint256 _days)\\n        public\\n        pure\\n        returns (\\n            uint256 year,\\n            uint256 month,\\n            uint256 day\\n        )\\n    {\\n        int256 __days = int256(_days);\\n\\n        int256 L = __days + 68569 + OFFSET19700101;\\n        int256 N = (4 * L) / 146097;\\n        L = L - (146097 * N + 3) / 4;\\n        int256 _year = (4000 * (L + 1)) / 1461001;\\n        L = L - (1461 * _year) / 4 + 31;\\n        int256 _month = (80 * L) / 2447;\\n        int256 _day = L - (2447 * _month) / 80;\\n        L = _month / 11;\\n        _month = _month + 2 - 12 * L;\\n        _year = 100 * (N - 49) + _year + L;\\n\\n        year = uint256(_year);\\n        month = uint256(_month);\\n        day = uint256(_day);\\n    }\\n\\n    // Default functions\\n    receive() external payable {\\n        placeBid();\\n    }\\n\\n    fallback() external payable {\\n\\n    }\\n}\\n\",\"keccak256\":\"0xd4d08afd679ea1469bbbe4221f27ba5b62bbf492fe47cde0ec683b3b1b09dce8\",\"license\":\"MIT\"},\"contracts/interfaces/IWETH.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\n\\npragma solidity ^0.8.0;\\n\\ninterface IWETH {\\n  function deposit() external payable;\\n  function withdraw(uint wad) external;\\n  function balanceOf(address account) external view returns (uint);\\n  function transfer(address recipient, uint amount) external returns (bool);\\n  function approve(address spender, uint amount) external returns (bool);\\n}\\n\",\"keccak256\":\"0x69e587d3fccf5bca0b9c201e1df55b9313bbe1192bc9a41bfbe42bb1d25923cf\",\"license\":\"GPL-3.0\"}},\"version\":1}",
  "bytecode": "0x662386f26fc10000600c819055600d556103e8600e81905566b1a2bc2ec50000600f5567016345785d8a0000601055606460115560125561024060405261013f60e081815290620050ec610100398051620000639160139160209091019062000268565b5060408051610200810190915261013360a08201818152829162004fb960c08401398152602001604051806040016040528060088152602001677b7b646174657d7d60c01b81525081526020016040518060600160405280603b81526020016200522b603b91398152602001604051806040016040528060088152602001677b7b6e6f74657d7d60c01b81525081526020016040518060400160405280600d81526020016c1e17ba32bc3a1f1e17b9bb339f60991b815250815250601490600562000130929190620002f7565b5060006018553480156200014357600080fd5b5060405162005266380380620052668339810160408190526200016691620003ee565b6040805180820182526008815267546865204461746560c01b6020808301918252835180850190945260048452634441544560e01b908401528151919291620001b29160009162000268565b508051620001c890600190602084019062000268565b505050620001e5620001df6200021260201b60201c565b62000216565b6001600b556001600160601b0319606093841b811660805291831b821660a05290911b1660c05262000474565b3390565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b828054620002769062000437565b90600052602060002090601f0160209004810192826200029a5760008555620002e5565b82601f10620002b557805160ff1916838001178555620002e5565b82800160010185558215620002e5579182015b82811115620002e5578251825591602001919060010190620002c8565b50620002f392915062000357565b5090565b82805482825590600052602060002090810192821562000349579160200282015b828111156200034957825180516200033891849160209091019062000268565b509160200191906001019062000318565b50620002f39291506200036e565b5b80821115620002f3576000815560010162000358565b80821115620002f35760006200038582826200038f565b506001016200036e565b5080546200039d9062000437565b6000825580601f10620003ae575050565b601f016020900490600052602060002090810190620003ce919062000357565b50565b80516001600160a01b0381168114620003e957600080fd5b919050565b60008060006060848603121562000403578283fd5b6200040e84620003d1565b92506200041e60208501620003d1565b91506200042e60408501620003d1565b90509250925092565b600181811c908216806200044c57607f821691505b602082108114156200046e57634e487b7160e01b600052602260045260246000fd5b50919050565b60805160601c60a05160601c60c05160601c614ae9620004d060003960006113d4015260008181612bd70152612c6c0152600081816111ce015281816114e90152818161172c0152818161292201526135770152614ae96000f3fe60806040526004361061033e5760003560e01c80636352211e116101ae578063a74a3e9f116100eb578063db2e1eed1161008f578063f070d81d1161006c578063f070d81d146109bd578063f2fde38b146109d0578063f3f5d36b146109f0578063fc43dbd014610a0657005b8063db2e1eed14610956578063e985e9c51461096c578063ecfc7ecc146109b557005b8063b88d4fde116100c8578063b88d4fde146108ea578063c63adb2b1461090a578063c87b56dd14610920578063da7a739f1461094057005b8063a74a3e9f1461089f578063a8818847146108b4578063a965a941146108ca57005b80638f28864411610152578063970c43101161012f578063970c43101461081f5780639daec71e1461083f5780639dc3d8121461085f578063a22cb4651461087f57005b80638f288644146107a657806395d89b41146107ea57806396e494e8146107ff57005b8063715018a61161018b578063715018a61461073d5780637a9ae240146107525780638da5cb5b146107725780638dfd1ec81461079057005b80636352211e146106dd57806367243482146106fd57806370a082311461071d57005b80632b57298b1161027c57806347b89031116102205780634f558e79116101fd5780634f558e791461065d5780634f6ccce71461067d5780635738f36f1461069d578063598acd26146106bd57005b806347b89031146105fd578063499305c41461061d5780634d58364b1461063d57005b8063396961a311610259578063396961a3146105955780633c085e12146105aa5780633fe800ef146105bd57806342842e0e146105dd57005b80632b57298b146105425780632f745c5914610562578063379607f51461058257005b806318160ddd116102e35780631f72d831116102c05780631f72d831146104ae57806323b872dd146104ce57806325e6f516146104ee5780632a55205a1461050357005b806318160ddd146104635780631c117150146104785780631e826bc01461048e57005b806306fdde031161031c57806306fdde03146103d3578063081812fc146103e85780630954305d14610420578063095ea7b31461044357005b8062d5da021461034d578063015e1a0b1461036d57806301ffc9a7146103a357005b3661034b5761034b610a41565b005b34801561035957600080fd5b5061034b6103683660046141fc565b610c0f565b34801561037957600080fd5b5061038d61038836600461422f565b610c50565b60405161039a9190614624565b60405180910390f35b3480156103af57600080fd5b506103c36103be3660046141c4565b610d89565b604051901515815260200161039a565b3480156103df57600080fd5b5061038d610dd0565b3480156103f457600080fd5b5061040861040336600461422f565b610e62565b6040516001600160a01b03909116815260200161039a565b34801561042c57600080fd5b50610435610eea565b60405190815260200161039a565b34801561044f57600080fd5b5061034b61045e36600461400d565b610efe565b34801561046f57600080fd5b50600854610435565b34801561048457600080fd5b50610435600e5481565b34801561049a57600080fd5b5061034b6104a936600461422f565b611014565b3480156104ba57600080fd5b5061034b6104c936600461422f565b61107a565b3480156104da57600080fd5b5061034b6104e9366004613f23565b61110a565b3480156104fa57600080fd5b5061038d61113b565b34801561050f57600080fd5b5061052361051e36600461429a565b6111c9565b604080516001600160a01b03909316835260208301919091520161039a565b34801561054e57600080fd5b5061038d61055d36600461422f565b611213565b34801561056e57600080fd5b5061043561057d36600461400d565b6112db565b61034b61059036600461422f565b611371565b3480156105a157600080fd5b5061034b611568565b61034b6105b836600461422f565b6115d8565b3480156105c957600080fd5b5061038d6105d836600461422f565b6117b8565b3480156105e957600080fd5b5061034b6105f8366004613f23565b611b13565b34801561060957600080fd5b5061038d6106183660046141fc565b611b2e565b34801561062957600080fd5b5061034b6106383660046140f7565b611d28565b34801561064957600080fd5b5061038d61065836600461422f565b611d65565b34801561066957600080fd5b506103c361067836600461422f565b611d90565b34801561068957600080fd5b5061043561069836600461422f565b611d9b565b3480156106a957600080fd5b5061038d6106b83660046141fc565b611e3c565b3480156106c957600080fd5b5061034b6106d836600461422f565b612056565b3480156106e957600080fd5b506104086106f836600461422f565b6120b5565b34801561070957600080fd5b5061034b610718366004614036565b61212c565b34801561072957600080fd5b50610435610738366004613ed7565b612247565b34801561074957600080fd5b5061034b6122ce565b34801561075e57600080fd5b5061034b61076d36600461422f565b612304565b34801561077e57600080fd5b50600a546001600160a01b0316610408565b34801561079c57600080fd5b50610435600c5481565b3480156107b257600080fd5b506105236107c136600461422f565b6000908152601660209081526040808320546017909252909120546001600160a01b0390911691565b3480156107f657600080fd5b5061038d612363565b34801561080b57600080fd5b506103c361081a36600461422f565b612372565b34801561082b57600080fd5b5061034b61083a36600461422f565b6123d2565b34801561084b57600080fd5b5061034b61085a36600461422f565b612431565b34801561086b57600080fd5b5061034b61087a36600461422f565b612490565b34801561088b57600080fd5b5061034b61089a366004613fd7565b6124ef565b3480156108ab57600080fd5b506104356125b4565b3480156108c057600080fd5b5061043560105481565b3480156108d657600080fd5b5061038d6108e536600461422f565b612614565b3480156108f657600080fd5b5061034b610905366004613f5e565b6126b6565b34801561091657600080fd5b5061043560125481565b34801561092c57600080fd5b5061038d61093b36600461422f565b6126ee565b34801561094c57600080fd5b50610435600f5481565b34801561096257600080fd5b50610435600d5481565b34801561097857600080fd5b506103c3610987366004613ef1565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61034b610a41565b61034b6109cb36600461425f565b612773565b3480156109dc57600080fd5b5061034b6109eb366004613ed7565b6129bb565b3480156109fc57600080fd5b5061043560115481565b348015610a1257600080fd5b50610a26610a2136600461422f565b612a53565b6040805193845260208401929092529082015260600161039a565b6002600b541415610a6d5760405162461bcd60e51b8152600401610a6490614758565b60405180910390fd5b6002600b556000610a81620151804261486b565b600d549091503490811015610ad85760405162461bcd60e51b815260206004820181905260248201527f4d7573742073656e64206d6f7265207468616e207265736572766550726963656044820152606401610a64565b610ae06125b4565b811015610b4a5760405162461bcd60e51b815260206004820152603260248201527f4d7573742073656e64206d6f7265207468616e206c61737420626964206279206044820152716d696e426964496e6372656d656e7442707360701b6064820152608401610a64565b6000828152601660205260409020546001600160a01b0316610b7857610b6e611568565b6018829055610ba6565b600082815260166020908152604080832054601790925290912054610ba6916001600160a01b031690612bc7565b600082815260166020908152604080832080546001600160a01b0319163390811790915560178352928190208490555183815284917f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c47910160405180910390a350506001600b55565b600a546001600160a01b03163314610c395760405162461bcd60e51b8152600401610a64906146d2565b8051610c4c906013906020840190613c8c565b5050565b6060610c5b82612cec565b610ca15760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b9259081a5cc81b9bdb8b595e1a5cdd195b9d604a1b6044820152606401610a64565b6000610cb4610caf846117b8565b612d09565b90506000610cc184612e7f565b610cca85611213565b610d5d60138054610cda906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d06906149a3565b8015610d535780601f10610d2857610100808354040283529160200191610d53565b820191906000526020600020905b815481529060010190602001808311610d3657829003601f168201915b5050505050611b2e565b84604051602001610d7194939291906144b1565b60408051601f19818403018152919052949350505050565b6000610d9482612fa1565b80610daf575063152a902d60e11b6001600160e01b03198316145b80610dca57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610ddf906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0b906149a3565b8015610e585780601f10610e2d57610100808354040283529160200191610e58565b820191906000526020600020905b815481529060010190602001808311610e3b57829003601f168201915b5050505050905090565b6000610e6d82612cec565b610ece5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a64565b506000908152600460205260409020546001600160a01b031690565b6000610ef9620151804261486b565b905090565b6000610f09826120b5565b9050806001600160a01b0316836001600160a01b03161415610f775760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a64565b336001600160a01b0382161480610f935750610f938133610987565b6110055760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a64565b61100f8383612fc6565b505050565b600a546001600160a01b0316331461103e5760405162461bcd60e51b8152600401610a64906146d2565b600c8190556040518181527f696ca9f32ad4aedb63d39a2bc82f3a93b74dd917d4c64f03b7dd37a2bfa79c3e906020015b60405180910390a150565b600a546001600160a01b031633146110a45760405162461bcd60e51b8152600401610a64906146d2565b6127108111156111055760405162461bcd60e51b815260206004820152602660248201527f726f79616c74794270732073686f756c642062652077697468696e205b302c2060448201526531303030305d60d01b6064820152608401610a64565b601255565b6111143382613034565b6111305760405162461bcd60e51b8152600401610a6490614707565b61100f83838361311a565b60138054611148906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611174906149a3565b80156111c15780601f10611196576101008083540402835291602001916111c1565b820191906000526020600020905b8154815290600101906020018083116111a457829003601f168201915b505050505081565b6000807f0000000000000000000000000000000000000000000000000000000000000000612710601254856111fe9190614902565b611208919061486b565b915091509250929050565b6060600080600061122385612a53565b925092509250600061123484612e7f565b9050600061124184612e7f565b9050805160011415611270578060405160200161125e9190614488565b60405160208183030381529060405290505b600061127b84612e7f565b90508051600114156112aa57806040516020016112989190614488565b60405160208183030381529060405290505b8282826040516020016112bf93929190614405565b6040516020818303038152906040529650505050505050919050565b60006112e683612247565b82106113485760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a64565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6002600b5414156113945760405162461bcd60e51b8152600401610a6490614758565b6002600b55336113ac600a546001600160a01b031690565b6001600160a01b0316148061145857506040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561141e57600080fd5b505afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190614247565b115b806114655750600c543410155b6114c45760405162461bcd60e51b815260206004820152602a60248201527f53686f756c642070617920636c61696d696e675072696365206f72206f776e206044820152691848131bdbdd0813919560b21b6064820152608401610a64565b6114cc611568565b6114d633826132c5565b3415611533576040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f19350505050158015611531573d6000803e3d6000fd5b505b604051339082907fce8230f82e484df1d81d3f449132eed44e758f95df463079b72a869f75d341cf90600090a3506001600b55565b60185480611579620151804261486b565b11801561159c57506000818152601660205260409020546001600160a01b031615155b80156115b5575060008181526017602052604090205415155b80156115c757506115c581612cec565b155b156115d5576115d5816133fd565b50565b80336115e3826120b5565b6001600160a01b0316146116095760405162461bcd60e51b8152600401610a6490614689565b3361161c600a546001600160a01b031690565b6001600160a01b0316148061163357506010543410155b61167f5760405162461bcd60e51b815260206004820152601760248201527f53686f756c64207061792065726173696e6750726963650000000000000000006044820152606401610a64565b60008281526015602052604081208054611698906149a3565b9050116116f65760405162461bcd60e51b815260206004820152602660248201527f4e6f74652073686f756c64206265206e6f6e656d707479206265666f72652065604482015265726173696e6760d01b6064820152608401610a64565b60408051602080820180845260008084528681526015909252929020905161171e9290613c8c565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f19350505050158015611774573d6000803e3d6000fd5b5061177e826120b5565b6001600160a01b0316827ff5cd03e250f4dc67cb934696b1ae84a530d007600f8c2b64cb1097e04cd49ae960405160405180910390a35050565b60606117c382612cec565b6118095760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b9259081a5cc81b9bdb8b595e1a5cdd195b9d604a1b6044820152606401610a64565b600061181483611213565b9050600061182184612614565b60408051602081019091526000808252919250905b601454811015611b0a57606061191f6014838154811061186657634e487b7160e01b600052603260045260246000fd5b90600052602060002001805461187b906149a3565b80601f01602080910402602001604051908101604052809291908181526020018280546118a7906149a3565b80156118f45780601f106118c9576101008083540402835291602001916118f4565b820191906000526020600020905b8154815290600101906020018083116118d757829003601f168201915b5050505050604051806040016040528060088152602001677b7b646174657d7d60c01b81525061361b565b1561192b575083611ad4565b611a086014838154811061194f57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054611964906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611990906149a3565b80156119dd5780601f106119b2576101008083540402835291602001916119dd565b820191906000526020600020905b8154815290600101906020018083116119c057829003601f168201915b5050505050604051806040016040528060088152602001677b7b6e6f74657d7d60c01b81525061361b565b15611a1d57611a1684611e3c565b9050611ad4565b60148281548110611a3e57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054611a53906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7f906149a3565b8015611acc5780601f10611aa157610100808354040283529160200191611acc565b820191906000526020600020905b815481529060010190602001808311611aaf57829003601f168201915b505050505090505b8281604051602001611ae7929190614332565b60405160208183030381529060405292505080611b03906149de565b9050611836565b50949350505050565b61100f838383604051806020016040528060008152506126b6565b6060816000805b8251811015611b9957828181518110611b5e57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601160f91b1415611b875781611b83816149de565b9250505b80611b91816149de565b915050611b35565b508015611d20576000818351611baf9190614825565b67ffffffffffffffff811115611bd557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611bff576020820181803683370190505b5090506000805b8451811015611d1557848181518110611c2f57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601160f91b1415611c9257601760fa1b8383611c5a816149de565b945081518110611c7a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053505b848181518110611cb257634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319168383611ccc816149de565b945081518110611cec57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611d0d816149de565b915050611c06565b509095945050505050565b509192915050565b600a546001600160a01b03163314611d525760405162461bcd60e51b8152600401610a64906146d2565b8051610c4c906014906020840190613d10565b60148181548110611d7557600080fd5b906000526020600020016000915090508054611148906149a3565b6000610dca82612cec565b6000611da660085490565b8210611e095760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a64565b60088281548110611e2a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6040805160208101909152600080825260609183915b825181101561204e57828181518110611e7b57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916600f60fa1b1415611ebd5781604051602001611ea7919061438b565b604051602081830303815290604052915061203c565b828181518110611edd57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601f60f91b1415611f095781604051602001611ea791906143b3565b828181518110611f2957634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601360f91b1415611f555781604051602001611ea7919061445f565b828181518110611f7557634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601160f91b1415611fa15781604051602001611ea791906143db565b828181518110611fc157634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916602760f81b1415611fed5781604051602001611ea79190614361565b8183828151811061200e57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b60405160200161202a929190614303565b60405160208183030381529060405291505b80612046816149de565b915050611e52565b509392505050565b600a546001600160a01b031633146120805760405162461bcd60e51b8152600401610a64906146d2565b600f8190556040518181527f6ea43baebf767c8984d2da6f4e06b71e7093fcb9d3c0c516cd51ac6b15fa11d79060200161106f565b6000818152600260205260408120546001600160a01b031680610dca5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610a64565b6002600b54141561214f5760405162461bcd60e51b8152600401610a6490614758565b6002600b55600a546001600160a01b0316331461217e5760405162461bcd60e51b8152600401610a64906146d2565b612186611568565b60005b815181101561223d5760008382815181106121b457634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008383815181106121e057634e487b7160e01b600052603260045260246000fd5b602002602001015190506121f482826132c5565b6040516001600160a01b0383169082907f6f1a5977e7036a4d672e1db1ca046ec0bd742ef9a38fe8d46823fd17dae6083190600090a3505080612236906149de565b9050612189565b50506001600b5550565b60006001600160a01b0382166122b25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610a64565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146122f85760405162461bcd60e51b8152600401610a64906146d2565b6123026000613680565b565b600a546001600160a01b0316331461232e5760405162461bcd60e51b8152600401610a64906146d2565b60118190556040518181527f808020969425956198bf055c9d59c389614dd21f915904f05b2d21ea161cd4ec9060200161106f565b606060018054610ddf906149a3565b6000612381620151804261486b565b821080156123bb57506000828152601660205260409020546001600160a01b03161580156123bb5750600082815260176020526040902054155b8015610dca57506123cb82612cec565b1592915050565b600a546001600160a01b031633146123fc5760405162461bcd60e51b8152600401610a64906146d2565b600e8190556040518181527ff4ec2a844abf83d803887787f1c1ce8de91c40e66ea4a395779beb8c0d904a419060200161106f565b600a546001600160a01b0316331461245b5760405162461bcd60e51b8152600401610a64906146d2565b600d8190556040518181527f921c658aa55473adf5c5112e48ef56de846ddb3e4e57e8888cb24a81b3b272739060200161106f565b600a546001600160a01b031633146124ba5760405162461bcd60e51b8152600401610a64906146d2565b60108190556040518181527f1b5c73c6da4bab6f305baea61b3dfd41973701830ad8e35dfdf24eba3d3d6de09060200161106f565b6001600160a01b0382163314156125485760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a64565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000806125c4620151804261486b565b90506000612710600e546127106125db9190614825565b6000848152601760205260409020546125f49190614902565b6125fe919061486b565b905080600d541115610dca5750600d5492915050565b6000818152601560205260409020805460609190612631906149a3565b80601f016020809104026020016040519081016040528092919081815260200182805461265d906149a3565b80156126aa5780601f1061267f576101008083540402835291602001916126aa565b820191906000526020600020905b81548152906001019060200180831161268d57829003601f168201915b50505050509050919050565b6126c03383613034565b6126dc5760405162461bcd60e51b8152600401610a6490614707565b6126e8848484846136d2565b50505050565b60606126f982612cec565b61273e5760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b9259081a5cc81b9bdb995e1a5cdd195b9d60521b6044820152606401610a64565b600061274c610caf84610c50565b60405160200161275c91906145a2565b60408051601f198184030181529190529392505050565b813361277e826120b5565b6001600160a01b0316146127a45760405162461bcd60e51b8152600401610a6490614689565b816011548151106128095760405162461bcd60e51b815260206004820152602960248201527f4e6f74652073686f756c642062652073686f72746572207468616e206e6f746560448201526814da5e99531a5b5a5d60ba1b6064820152608401610a64565b3361281c600a546001600160a01b031690565b6001600160a01b031614806128335750600f543410155b61287f5760405162461bcd60e51b815260206004820152601960248201527f53686f756c642070617920656e67726176696e675072696365000000000000006044820152606401610a64565b60008481526015602052604090208054612898906149a3565b1590506128f55760405162461bcd60e51b815260206004820152602560248201527f4e6f74652073686f756c6420626520656d707479206265666f726520656e67726044820152646176696e6760d81b6064820152608401610a64565b6000848152601560209081526040909120845161291492860190613c8c565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f1935050505015801561296a573d6000803e3d6000fd5b50612974846120b5565b6001600160a01b0316847fed9e0bea058528ee91b5c24513bbdb6ad21da03e6bc7108b7623af9d1231e07b856040516129ad9190614624565b60405180910390a350505050565b600a546001600160a01b031633146129e55760405162461bcd60e51b8152600401610a64906146d2565b6001600160a01b038116612a4a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a64565b6115d581613680565b60008080838162253d8c612a6a8362010bd96147e4565b612a7491906147e4565b9050600062023ab1612a8783600461487f565b612a91919061483d565b90506004612aa28262023ab161487f565b612aad9060036147e4565b612ab7919061483d565b612ac19083614921565b9150600062164b09612ad48460016147e4565b612ae090610fa061487f565b612aea919061483d565b90506004612afa826105b561487f565b612b04919061483d565b612b0e9084614921565b612b1990601f6147e4565b9250600061098f612b2b85605061487f565b612b35919061483d565b905060006050612b478361098f61487f565b612b51919061483d565b612b5b9086614921565b9050612b68600b8361483d565b9450612b7585600c61487f565b612b808360026147e4565b612b8a9190614921565b91508483612b99603187614921565b612ba490606461487f565b612bae91906147e4565b612bb891906147e4565b9a919950975095505050505050565b612bd18282613705565b610c4c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c3057600080fd5b505af1158015612c44573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506044019050602060405180830381600087803b158015612cb457600080fd5b505af1158015612cc8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100f91906141a8565b6000908152600260205260409020546001600160a01b0316151590565b6060815160001415612d2957505060408051602081019091526000815290565b6000604051806060016040528060408152602001614a746040913990506000600384516002612d589190614825565b612d62919061486b565b612d6d906004614902565b90506000612d7c826020614825565b67ffffffffffffffff811115612da257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612dcc576020820181803683370190505b509050818152600183018586518101602084015b81831015612e3a5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401612de0565b600389510660018114612e545760028114612e6557612e71565b613d3d60f01b600119830152612e71565b603d60f81b6000198301525b509398975050505050505050565b606081612ea35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612ecd5780612eb7816149de565b9150612ec69050600a8361486b565b9150612ea7565b60008167ffffffffffffffff811115612ef657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f20576020820181803683370190505b5090505b8415612f9957612f35600183614960565b9150612f42600a866149f9565b612f4d906030614825565b60f81b818381518110612f7057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612f92600a8661486b565b9450612f24565b949350505050565b60006001600160e01b0319821663780e9d6360e01b1480610dca5750610dca82613773565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612ffb826120b5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061303f82612cec565b6130a05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a64565b60006130ab836120b5565b9050806001600160a01b0316846001600160a01b031614806130e65750836001600160a01b03166130db84610e62565b6001600160a01b0316145b80612f9957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612f99565b826001600160a01b031661312d826120b5565b6001600160a01b0316146131955760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610a64565b6001600160a01b0382166131f75760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a64565b6132028383836137c3565b61320d600082612fc6565b6001600160a01b0383166000908152600360205260408120805460019290613236908490614960565b90915550506001600160a01b0382166000908152600360205260408120805460019290613264908490614825565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6132d2620151804261486b565b81106133205760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79207061737420746f6b656e496420697320636c61696d61626c6500006044820152606401610a64565b6000818152601660205260409020546001600160a01b03161580156133515750600081815260176020526040902054155b61339d5760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e49642073686f756c64206e6f742062652061756374696f6e6564006044820152606401610a64565b6133a681612cec565b156133f35760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e49642073686f756c64206e6f7420626520636c61696d65640000006044820152606401610a64565b610c4c82826137ce565b8061340b620151804261486b565b116134505760405162461bcd60e51b8152602060048201526015602482015274105d58dd1a5bdb881b9bdd081e595d08195b991959605a1b6044820152606401610a64565b6000818152601660205260409020546001600160a01b031615801590613483575060008181526017602052604090205415155b6134e35760405162461bcd60e51b815260206004820152602b60248201527f54686572652073686f756c64206265206174206c65617374206120626964206660448201526a6f7220746865206461746560a81b6064820152608401610a64565b6134ec81612cec565b156135395760405162461bcd60e51b815260206004820152601e60248201527f53686f756c64206e6f74207265636c61696d207468652061756374696f6e00006044820152606401610a64565b60008181526016602052604090205461355b906001600160a01b0316826137ce565b6000818152601760205260408082205490516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169282156108fc02929190818181858888f193505050501580156135be573d6000803e3d6000fd5b5060008181526016602090815260408083205460178352928190205490519081526001600160a01b039092169183917fc9f72b276a388619c6d185d146697036241880c36654b1a3ffdad07c24038d99910160405180910390a350565b60008151835114801561367957508160405160200161363a91906142e7565b604051602081830303815290604052805190602001208360405160200161366191906142e7565b60405160208183030381529060405280519060200120145b9392505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6136dd84848461311a565b6136e98484848461390d565b6126e85760405162461bcd60e51b8152600401610a6490614637565b6040805160008082526020820190925281906001600160a01b0385169061753090859060405161373591906142e7565b600060405180830381858888f193505050503d8060008114611d15576040519150601f19603f3d011682016040523d82523d6000602084013e611d15565b60006001600160e01b031982166380ac58cd60e01b14806137a457506001600160e01b03198216635b5e139f60e01b145b80610dca57506301ffc9a760e01b6001600160e01b0319831614610dca565b61100f838383613a1a565b6001600160a01b0382166138245760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a64565b61382d81612cec565b1561387a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a64565b613886600083836137c3565b6001600160a01b03821660009081526003602052604081208054600192906138af908490614825565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613a0f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906139519033908990889088906004016145e7565b602060405180830381600087803b15801561396b57600080fd5b505af192505050801561399b575060408051601f3d908101601f19168201909252613998918101906141e0565b60015b6139f5573d8080156139c9576040519150601f19603f3d011682016040523d82523d6000602084013e6139ce565b606091505b5080516139ed5760405162461bcd60e51b8152600401610a6490614637565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612f99565b506001949350505050565b6001600160a01b038316613a7557613a7081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613a98565b816001600160a01b0316836001600160a01b031614613a9857613a988382613ad2565b6001600160a01b038216613aaf5761100f81613b6f565b826001600160a01b0316826001600160a01b03161461100f5761100f8282613c48565b60006001613adf84612247565b613ae99190614960565b600083815260076020526040902054909150808214613b3c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613b8190600190614960565b60008381526009602052604081205460088054939450909284908110613bb757634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110613be657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613c2c57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613c5383612247565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054613c98906149a3565b90600052602060002090601f016020900481019282613cba5760008555613d00565b82601f10613cd357805160ff1916838001178555613d00565b82800160010185558215613d00579182015b82811115613d00578251825591602001919060010190613ce5565b50613d0c929150613d69565b5090565b828054828255906000526020600020908101928215613d5d579160200282015b82811115613d5d5782518051613d4d918491602090910190613c8c565b5091602001919060010190613d30565b50613d0c929150613d7e565b5b80821115613d0c5760008155600101613d6a565b80821115613d0c576000613d928282613d9b565b50600101613d7e565b508054613da7906149a3565b6000825580601f10613db7575050565b601f0160209004906000526020600020908101906115d59190613d69565b600067ffffffffffffffff831115613def57613def614a39565b613e02601f8401601f191660200161478f565b9050828152838383011115613e1657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114613e4457600080fd5b919050565b600082601f830112613e59578081fd5b81356020613e6e613e69836147c0565b61478f565b80838252828201915082860187848660051b8901011115613e8d578586fd5b855b85811015613eab57813584529284019290840190600101613e8f565b5090979650505050505050565b600082601f830112613ec8578081fd5b61367983833560208501613dd5565b600060208284031215613ee8578081fd5b61367982613e2d565b60008060408385031215613f03578081fd5b613f0c83613e2d565b9150613f1a60208401613e2d565b90509250929050565b600080600060608486031215613f37578081fd5b613f4084613e2d565b9250613f4e60208501613e2d565b9150604084013590509250925092565b60008060008060808587031215613f73578081fd5b613f7c85613e2d565b9350613f8a60208601613e2d565b925060408501359150606085013567ffffffffffffffff811115613fac578182fd5b8501601f81018713613fbc578182fd5b613fcb87823560208401613dd5565b91505092959194509250565b60008060408385031215613fe9578182fd5b613ff283613e2d565b9150602083013561400281614a4f565b809150509250929050565b6000806040838503121561401f578182fd5b61402883613e2d565b946020939093013593505050565b60008060408385031215614048578182fd5b823567ffffffffffffffff8082111561405f578384fd5b818501915085601f830112614072578384fd5b81356020614082613e69836147c0565b8083825282820191508286018a848660051b89010111156140a1578889fd5b8896505b848710156140ca576140b681613e2d565b8352600196909601959183019183016140a5565b50965050860135925050808211156140e0578283fd5b506140ed85828601613e49565b9150509250929050565b60006020808385031215614109578182fd5b823567ffffffffffffffff80821115614120578384fd5b818501915085601f830112614133578384fd5b8135614141613e69826147c0565b80828252858201915085850189878560051b8801011115614160578788fd5b875b848110156141995781358681111561417857898afd5b6141868c8a838b0101613eb8565b8552509287019290870190600101614162565b50909998505050505050505050565b6000602082840312156141b9578081fd5b815161367981614a4f565b6000602082840312156141d5578081fd5b813561367981614a5d565b6000602082840312156141f1578081fd5b815161367981614a5d565b60006020828403121561420d578081fd5b813567ffffffffffffffff811115614223578182fd5b612f9984828501613eb8565b600060208284031215614240578081fd5b5035919050565b600060208284031215614258578081fd5b5051919050565b60008060408385031215614271578182fd5b82359150602083013567ffffffffffffffff81111561428e578182fd5b6140ed85828601613eb8565b600080604083850312156142ac578182fd5b50508035926020909101359150565b600081518084526142d3816020860160208601614977565b601f01601f19169290920160200192915050565b600082516142f9818460208701614977565b9190910192915050565b60008351614315818460208801614977565b6001600160f81b0319939093169190920190815260010192915050565b60008351614344818460208801614977565b835190830190614358818360208801614977565b01949350505050565b60008251614373818460208701614977565b652661706f733b60d01b920191825250600601919050565b6000825161439d818460208701614977565b63266c743b60e01b920191825250600401919050565b600082516143c5818460208701614977565b632667743b60e01b920191825250600401919050565b600082516143ed818460208701614977565b652671756f743b60d01b920191825250600601919050565b60008451614417818460208901614977565b8083019050602d60f81b8082528551614437816001850160208a01614977565b60019201918201528351614452816002840160208801614977565b0160020195945050505050565b60008251614471818460208701614977565b6426616d703b60d81b920191825250600501919050565b600360fc1b8152600082516144a4816001850160208701614977565b9190910160010192915050565b737b226e616d65223a20225468652044617465202360601b815284516000906144e1816014850160208a01614977565b6101d160f51b6014918401918201528551614503816016840160208a01614977565b72111610113232b9b1b934b83a34b7b7111d101160691b601692909101918201528451614537816029840160208901614977565b7f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b602992909101918201526618985cd94d8d0b60ca1b60498201528351614585816050840160208801614977565b61227d60f01b605092909101918201526052019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516145da81601d850160208701614977565b91909101601d0192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061461a908301846142bb565b9695505050505050565b60208152600061367960208301846142bb565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526029908201527f43616c6c65722073686f756c6420626520746865206f776e6572206f662074686040820152686520617274776f726b60b81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156147b8576147b8614a39565b604052919050565b600067ffffffffffffffff8211156147da576147da614a39565b5060051b60200190565b600080821280156001600160ff1b038490038513161561480657614806614a0d565b600160ff1b839003841281161561481f5761481f614a0d565b50500190565b6000821982111561483857614838614a0d565b500190565b60008261484c5761484c614a23565b600160ff1b82146000198414161561486657614866614a0d565b500590565b60008261487a5761487a614a23565b500490565b60006001600160ff1b03818413828413808216868404861116156148a5576148a5614a0d565b600160ff1b848712828116878305891216156148c3576148c3614a0d565b8587129250878205871284841616156148de576148de614a0d565b878505871281841616156148f4576148f4614a0d565b505050929093029392505050565b600081600019048311821515161561491c5761491c614a0d565b500290565b60008083128015600160ff1b85018412161561493f5761493f614a0d565b6001600160ff1b038401831381161561495a5761495a614a0d565b50500390565b60008282101561497257614972614a0d565b500390565b60005b8381101561499257818101518382015260200161497a565b838111156126e85750506000910152565b600181811c908216806149b757607f821691505b602082108114156149d857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156149f2576149f2614a0d565b5060010190565b600082614a0857614a08614a23565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146115d557600080fd5b6001600160e01b0319811681146115d557600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212201cb1c75d534a032a3d35dabee516ceb4f31377bf37d3445e5c7a44aa418f85fb64736f6c634300080400333c73766720786d6c6e733d22687474703a2f2f7777772e77332e6f72672f323030302f73766722207072657365727665417370656374526174696f3d22784d696e594d696e206d656574222076696577426f783d223020302035303020353030223e3c726563742077696474683d223130302522206865696768743d2231303025222066696c6c3d22626c61636b22202f3e3c7374796c653e2e62617365207b2066696c6c3a2077686974653b20666f6e742d66616d696c793a206d6f6e6f73706163653b20646f6d696e616e742d626173656c696e653a206d6964646c653b20746578742d616e63686f723a206d6964646c653b207d3c2f7374796c653e3c7465787420783d223530252220793d223530252220666f6e742d73697a653d22353070782220636c6173733d2262617365223e54686520446174652069732061206d657461646174612d6261736564204e4654206172742070726f6a6563742061626f75742074696d652e204561636820666c656574696e672064617920776f756c6420626520696d7072696e74656420696e746f20616e204e465420617274776f726b20696d6d757461626c79206c617374696e6720666f72657665722e20546865206f776e65722063616e20656e6772617665206f722065726173652061206e6f7465206f6e2074686520617274776f726b20617320616e206164646974696f6e616c206d657461646174612e205468652044617465206973206d657461646174612e204665656c206672656520746f2075736520546865204461746520696e20616e792077617920796f752077616e742e20536565206d6f72653a2068747470733a2f2f746865646174652e6172743c2f746578743e3c7465787420783d223530252220793d223930252220666f6e742d73697a653d22313070782220636c6173733d2262617365223e",
  "deployedBytecode": "0x60806040526004361061033e5760003560e01c80636352211e116101ae578063a74a3e9f116100eb578063db2e1eed1161008f578063f070d81d1161006c578063f070d81d146109bd578063f2fde38b146109d0578063f3f5d36b146109f0578063fc43dbd014610a0657005b8063db2e1eed14610956578063e985e9c51461096c578063ecfc7ecc146109b557005b8063b88d4fde116100c8578063b88d4fde146108ea578063c63adb2b1461090a578063c87b56dd14610920578063da7a739f1461094057005b8063a74a3e9f1461089f578063a8818847146108b4578063a965a941146108ca57005b80638f28864411610152578063970c43101161012f578063970c43101461081f5780639daec71e1461083f5780639dc3d8121461085f578063a22cb4651461087f57005b80638f288644146107a657806395d89b41146107ea57806396e494e8146107ff57005b8063715018a61161018b578063715018a61461073d5780637a9ae240146107525780638da5cb5b146107725780638dfd1ec81461079057005b80636352211e146106dd57806367243482146106fd57806370a082311461071d57005b80632b57298b1161027c57806347b89031116102205780634f558e79116101fd5780634f558e791461065d5780634f6ccce71461067d5780635738f36f1461069d578063598acd26146106bd57005b806347b89031146105fd578063499305c41461061d5780634d58364b1461063d57005b8063396961a311610259578063396961a3146105955780633c085e12146105aa5780633fe800ef146105bd57806342842e0e146105dd57005b80632b57298b146105425780632f745c5914610562578063379607f51461058257005b806318160ddd116102e35780631f72d831116102c05780631f72d831146104ae57806323b872dd146104ce57806325e6f516146104ee5780632a55205a1461050357005b806318160ddd146104635780631c117150146104785780631e826bc01461048e57005b806306fdde031161031c57806306fdde03146103d3578063081812fc146103e85780630954305d14610420578063095ea7b31461044357005b8062d5da021461034d578063015e1a0b1461036d57806301ffc9a7146103a357005b3661034b5761034b610a41565b005b34801561035957600080fd5b5061034b6103683660046141fc565b610c0f565b34801561037957600080fd5b5061038d61038836600461422f565b610c50565b60405161039a9190614624565b60405180910390f35b3480156103af57600080fd5b506103c36103be3660046141c4565b610d89565b604051901515815260200161039a565b3480156103df57600080fd5b5061038d610dd0565b3480156103f457600080fd5b5061040861040336600461422f565b610e62565b6040516001600160a01b03909116815260200161039a565b34801561042c57600080fd5b50610435610eea565b60405190815260200161039a565b34801561044f57600080fd5b5061034b61045e36600461400d565b610efe565b34801561046f57600080fd5b50600854610435565b34801561048457600080fd5b50610435600e5481565b34801561049a57600080fd5b5061034b6104a936600461422f565b611014565b3480156104ba57600080fd5b5061034b6104c936600461422f565b61107a565b3480156104da57600080fd5b5061034b6104e9366004613f23565b61110a565b3480156104fa57600080fd5b5061038d61113b565b34801561050f57600080fd5b5061052361051e36600461429a565b6111c9565b604080516001600160a01b03909316835260208301919091520161039a565b34801561054e57600080fd5b5061038d61055d36600461422f565b611213565b34801561056e57600080fd5b5061043561057d36600461400d565b6112db565b61034b61059036600461422f565b611371565b3480156105a157600080fd5b5061034b611568565b61034b6105b836600461422f565b6115d8565b3480156105c957600080fd5b5061038d6105d836600461422f565b6117b8565b3480156105e957600080fd5b5061034b6105f8366004613f23565b611b13565b34801561060957600080fd5b5061038d6106183660046141fc565b611b2e565b34801561062957600080fd5b5061034b6106383660046140f7565b611d28565b34801561064957600080fd5b5061038d61065836600461422f565b611d65565b34801561066957600080fd5b506103c361067836600461422f565b611d90565b34801561068957600080fd5b5061043561069836600461422f565b611d9b565b3480156106a957600080fd5b5061038d6106b83660046141fc565b611e3c565b3480156106c957600080fd5b5061034b6106d836600461422f565b612056565b3480156106e957600080fd5b506104086106f836600461422f565b6120b5565b34801561070957600080fd5b5061034b610718366004614036565b61212c565b34801561072957600080fd5b50610435610738366004613ed7565b612247565b34801561074957600080fd5b5061034b6122ce565b34801561075e57600080fd5b5061034b61076d36600461422f565b612304565b34801561077e57600080fd5b50600a546001600160a01b0316610408565b34801561079c57600080fd5b50610435600c5481565b3480156107b257600080fd5b506105236107c136600461422f565b6000908152601660209081526040808320546017909252909120546001600160a01b0390911691565b3480156107f657600080fd5b5061038d612363565b34801561080b57600080fd5b506103c361081a36600461422f565b612372565b34801561082b57600080fd5b5061034b61083a36600461422f565b6123d2565b34801561084b57600080fd5b5061034b61085a36600461422f565b612431565b34801561086b57600080fd5b5061034b61087a36600461422f565b612490565b34801561088b57600080fd5b5061034b61089a366004613fd7565b6124ef565b3480156108ab57600080fd5b506104356125b4565b3480156108c057600080fd5b5061043560105481565b3480156108d657600080fd5b5061038d6108e536600461422f565b612614565b3480156108f657600080fd5b5061034b610905366004613f5e565b6126b6565b34801561091657600080fd5b5061043560125481565b34801561092c57600080fd5b5061038d61093b36600461422f565b6126ee565b34801561094c57600080fd5b50610435600f5481565b34801561096257600080fd5b50610435600d5481565b34801561097857600080fd5b506103c3610987366004613ef1565b6001600160a01b03918216600090815260056020908152604080832093909416825291909152205460ff1690565b61034b610a41565b61034b6109cb36600461425f565b612773565b3480156109dc57600080fd5b5061034b6109eb366004613ed7565b6129bb565b3480156109fc57600080fd5b5061043560115481565b348015610a1257600080fd5b50610a26610a2136600461422f565b612a53565b6040805193845260208401929092529082015260600161039a565b6002600b541415610a6d5760405162461bcd60e51b8152600401610a6490614758565b60405180910390fd5b6002600b556000610a81620151804261486b565b600d549091503490811015610ad85760405162461bcd60e51b815260206004820181905260248201527f4d7573742073656e64206d6f7265207468616e207265736572766550726963656044820152606401610a64565b610ae06125b4565b811015610b4a5760405162461bcd60e51b815260206004820152603260248201527f4d7573742073656e64206d6f7265207468616e206c61737420626964206279206044820152716d696e426964496e6372656d656e7442707360701b6064820152608401610a64565b6000828152601660205260409020546001600160a01b0316610b7857610b6e611568565b6018829055610ba6565b600082815260166020908152604080832054601790925290912054610ba6916001600160a01b031690612bc7565b600082815260166020908152604080832080546001600160a01b0319163390811790915560178352928190208490555183815284917f0e54eff26401bf69b81b26f60bd85ef47f5d85275c1d268d84f68d6897431c47910160405180910390a350506001600b55565b600a546001600160a01b03163314610c395760405162461bcd60e51b8152600401610a64906146d2565b8051610c4c906013906020840190613c8c565b5050565b6060610c5b82612cec565b610ca15760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b9259081a5cc81b9bdb8b595e1a5cdd195b9d604a1b6044820152606401610a64565b6000610cb4610caf846117b8565b612d09565b90506000610cc184612e7f565b610cca85611213565b610d5d60138054610cda906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610d06906149a3565b8015610d535780601f10610d2857610100808354040283529160200191610d53565b820191906000526020600020905b815481529060010190602001808311610d3657829003601f168201915b5050505050611b2e565b84604051602001610d7194939291906144b1565b60408051601f19818403018152919052949350505050565b6000610d9482612fa1565b80610daf575063152a902d60e11b6001600160e01b03198316145b80610dca57506301ffc9a760e01b6001600160e01b03198316145b92915050565b606060008054610ddf906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054610e0b906149a3565b8015610e585780601f10610e2d57610100808354040283529160200191610e58565b820191906000526020600020905b815481529060010190602001808311610e3b57829003601f168201915b5050505050905090565b6000610e6d82612cec565b610ece5760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a20617070726f76656420717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a64565b506000908152600460205260409020546001600160a01b031690565b6000610ef9620151804261486b565b905090565b6000610f09826120b5565b9050806001600160a01b0316836001600160a01b03161415610f775760405162461bcd60e51b815260206004820152602160248201527f4552433732313a20617070726f76616c20746f2063757272656e74206f776e656044820152603960f91b6064820152608401610a64565b336001600160a01b0382161480610f935750610f938133610987565b6110055760405162461bcd60e51b815260206004820152603860248201527f4552433732313a20617070726f76652063616c6c6572206973206e6f74206f7760448201527f6e6572206e6f7220617070726f76656420666f7220616c6c00000000000000006064820152608401610a64565b61100f8383612fc6565b505050565b600a546001600160a01b0316331461103e5760405162461bcd60e51b8152600401610a64906146d2565b600c8190556040518181527f696ca9f32ad4aedb63d39a2bc82f3a93b74dd917d4c64f03b7dd37a2bfa79c3e906020015b60405180910390a150565b600a546001600160a01b031633146110a45760405162461bcd60e51b8152600401610a64906146d2565b6127108111156111055760405162461bcd60e51b815260206004820152602660248201527f726f79616c74794270732073686f756c642062652077697468696e205b302c2060448201526531303030305d60d01b6064820152608401610a64565b601255565b6111143382613034565b6111305760405162461bcd60e51b8152600401610a6490614707565b61100f83838361311a565b60138054611148906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611174906149a3565b80156111c15780601f10611196576101008083540402835291602001916111c1565b820191906000526020600020905b8154815290600101906020018083116111a457829003601f168201915b505050505081565b6000807f0000000000000000000000000000000000000000000000000000000000000000612710601254856111fe9190614902565b611208919061486b565b915091509250929050565b6060600080600061122385612a53565b925092509250600061123484612e7f565b9050600061124184612e7f565b9050805160011415611270578060405160200161125e9190614488565b60405160208183030381529060405290505b600061127b84612e7f565b90508051600114156112aa57806040516020016112989190614488565b60405160208183030381529060405290505b8282826040516020016112bf93929190614405565b6040516020818303038152906040529650505050505050919050565b60006112e683612247565b82106113485760405162461bcd60e51b815260206004820152602b60248201527f455243373231456e756d657261626c653a206f776e657220696e646578206f7560448201526a74206f6620626f756e647360a81b6064820152608401610a64565b506001600160a01b03919091166000908152600660209081526040808320938352929052205490565b6002600b5414156113945760405162461bcd60e51b8152600401610a6490614758565b6002600b55336113ac600a546001600160a01b031690565b6001600160a01b0316148061145857506040516370a0823160e01b81523360048201526000907f00000000000000000000000000000000000000000000000000000000000000006001600160a01b0316906370a082319060240160206040518083038186803b15801561141e57600080fd5b505afa158015611432573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114569190614247565b115b806114655750600c543410155b6114c45760405162461bcd60e51b815260206004820152602a60248201527f53686f756c642070617920636c61696d696e675072696365206f72206f776e206044820152691848131bdbdd0813919560b21b6064820152608401610a64565b6114cc611568565b6114d633826132c5565b3415611533576040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f19350505050158015611531573d6000803e3d6000fd5b505b604051339082907fce8230f82e484df1d81d3f449132eed44e758f95df463079b72a869f75d341cf90600090a3506001600b55565b60185480611579620151804261486b565b11801561159c57506000818152601660205260409020546001600160a01b031615155b80156115b5575060008181526017602052604090205415155b80156115c757506115c581612cec565b155b156115d5576115d5816133fd565b50565b80336115e3826120b5565b6001600160a01b0316146116095760405162461bcd60e51b8152600401610a6490614689565b3361161c600a546001600160a01b031690565b6001600160a01b0316148061163357506010543410155b61167f5760405162461bcd60e51b815260206004820152601760248201527f53686f756c64207061792065726173696e6750726963650000000000000000006044820152606401610a64565b60008281526015602052604081208054611698906149a3565b9050116116f65760405162461bcd60e51b815260206004820152602660248201527f4e6f74652073686f756c64206265206e6f6e656d707479206265666f72652065604482015265726173696e6760d01b6064820152608401610a64565b60408051602080820180845260008084528681526015909252929020905161171e9290613c8c565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f19350505050158015611774573d6000803e3d6000fd5b5061177e826120b5565b6001600160a01b0316827ff5cd03e250f4dc67cb934696b1ae84a530d007600f8c2b64cb1097e04cd49ae960405160405180910390a35050565b60606117c382612cec565b6118095760405162461bcd60e51b81526020600482015260176024820152761d1bdad95b9259081a5cc81b9bdb8b595e1a5cdd195b9d604a1b6044820152606401610a64565b600061181483611213565b9050600061182184612614565b60408051602081019091526000808252919250905b601454811015611b0a57606061191f6014838154811061186657634e487b7160e01b600052603260045260246000fd5b90600052602060002001805461187b906149a3565b80601f01602080910402602001604051908101604052809291908181526020018280546118a7906149a3565b80156118f45780601f106118c9576101008083540402835291602001916118f4565b820191906000526020600020905b8154815290600101906020018083116118d757829003601f168201915b5050505050604051806040016040528060088152602001677b7b646174657d7d60c01b81525061361b565b1561192b575083611ad4565b611a086014838154811061194f57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054611964906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611990906149a3565b80156119dd5780601f106119b2576101008083540402835291602001916119dd565b820191906000526020600020905b8154815290600101906020018083116119c057829003601f168201915b5050505050604051806040016040528060088152602001677b7b6e6f74657d7d60c01b81525061361b565b15611a1d57611a1684611e3c565b9050611ad4565b60148281548110611a3e57634e487b7160e01b600052603260045260246000fd5b906000526020600020018054611a53906149a3565b80601f0160208091040260200160405190810160405280929190818152602001828054611a7f906149a3565b8015611acc5780601f10611aa157610100808354040283529160200191611acc565b820191906000526020600020905b815481529060010190602001808311611aaf57829003601f168201915b505050505090505b8281604051602001611ae7929190614332565b60405160208183030381529060405292505080611b03906149de565b9050611836565b50949350505050565b61100f838383604051806020016040528060008152506126b6565b6060816000805b8251811015611b9957828181518110611b5e57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601160f91b1415611b875781611b83816149de565b9250505b80611b91816149de565b915050611b35565b508015611d20576000818351611baf9190614825565b67ffffffffffffffff811115611bd557634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015611bff576020820181803683370190505b5090506000805b8451811015611d1557848181518110611c2f57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601160f91b1415611c9257601760fa1b8383611c5a816149de565b945081518110611c7a57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a9053505b848181518110611cb257634e487b7160e01b600052603260045260246000fd5b01602001516001600160f81b0319168383611ccc816149de565b945081518110611cec57634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a90535080611d0d816149de565b915050611c06565b509095945050505050565b509192915050565b600a546001600160a01b03163314611d525760405162461bcd60e51b8152600401610a64906146d2565b8051610c4c906014906020840190613d10565b60148181548110611d7557600080fd5b906000526020600020016000915090508054611148906149a3565b6000610dca82612cec565b6000611da660085490565b8210611e095760405162461bcd60e51b815260206004820152602c60248201527f455243373231456e756d657261626c653a20676c6f62616c20696e646578206f60448201526b7574206f6620626f756e647360a01b6064820152608401610a64565b60088281548110611e2a57634e487b7160e01b600052603260045260246000fd5b90600052602060002001549050919050565b6040805160208101909152600080825260609183915b825181101561204e57828181518110611e7b57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916600f60fa1b1415611ebd5781604051602001611ea7919061438b565b604051602081830303815290604052915061203c565b828181518110611edd57634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601f60f91b1415611f095781604051602001611ea791906143b3565b828181518110611f2957634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601360f91b1415611f555781604051602001611ea7919061445f565b828181518110611f7557634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916601160f91b1415611fa15781604051602001611ea791906143db565b828181518110611fc157634e487b7160e01b600052603260045260246000fd5b6020910101516001600160f81b031916602760f81b1415611fed5781604051602001611ea79190614361565b8183828151811061200e57634e487b7160e01b600052603260045260246000fd5b602001015160f81c60f81b60405160200161202a929190614303565b60405160208183030381529060405291505b80612046816149de565b915050611e52565b509392505050565b600a546001600160a01b031633146120805760405162461bcd60e51b8152600401610a64906146d2565b600f8190556040518181527f6ea43baebf767c8984d2da6f4e06b71e7093fcb9d3c0c516cd51ac6b15fa11d79060200161106f565b6000818152600260205260408120546001600160a01b031680610dca5760405162461bcd60e51b815260206004820152602960248201527f4552433732313a206f776e657220717565727920666f72206e6f6e657869737460448201526832b73a103a37b5b2b760b91b6064820152608401610a64565b6002600b54141561214f5760405162461bcd60e51b8152600401610a6490614758565b6002600b55600a546001600160a01b0316331461217e5760405162461bcd60e51b8152600401610a64906146d2565b612186611568565b60005b815181101561223d5760008382815181106121b457634e487b7160e01b600052603260045260246000fd5b6020026020010151905060008383815181106121e057634e487b7160e01b600052603260045260246000fd5b602002602001015190506121f482826132c5565b6040516001600160a01b0383169082907f6f1a5977e7036a4d672e1db1ca046ec0bd742ef9a38fe8d46823fd17dae6083190600090a3505080612236906149de565b9050612189565b50506001600b5550565b60006001600160a01b0382166122b25760405162461bcd60e51b815260206004820152602a60248201527f4552433732313a2062616c616e636520717565727920666f7220746865207a65604482015269726f206164647265737360b01b6064820152608401610a64565b506001600160a01b031660009081526003602052604090205490565b600a546001600160a01b031633146122f85760405162461bcd60e51b8152600401610a64906146d2565b6123026000613680565b565b600a546001600160a01b0316331461232e5760405162461bcd60e51b8152600401610a64906146d2565b60118190556040518181527f808020969425956198bf055c9d59c389614dd21f915904f05b2d21ea161cd4ec9060200161106f565b606060018054610ddf906149a3565b6000612381620151804261486b565b821080156123bb57506000828152601660205260409020546001600160a01b03161580156123bb5750600082815260176020526040902054155b8015610dca57506123cb82612cec565b1592915050565b600a546001600160a01b031633146123fc5760405162461bcd60e51b8152600401610a64906146d2565b600e8190556040518181527ff4ec2a844abf83d803887787f1c1ce8de91c40e66ea4a395779beb8c0d904a419060200161106f565b600a546001600160a01b0316331461245b5760405162461bcd60e51b8152600401610a64906146d2565b600d8190556040518181527f921c658aa55473adf5c5112e48ef56de846ddb3e4e57e8888cb24a81b3b272739060200161106f565b600a546001600160a01b031633146124ba5760405162461bcd60e51b8152600401610a64906146d2565b60108190556040518181527f1b5c73c6da4bab6f305baea61b3dfd41973701830ad8e35dfdf24eba3d3d6de09060200161106f565b6001600160a01b0382163314156125485760405162461bcd60e51b815260206004820152601960248201527f4552433732313a20617070726f766520746f2063616c6c6572000000000000006044820152606401610a64565b3360008181526005602090815260408083206001600160a01b03871680855290835292819020805460ff191686151590811790915590519081529192917f17307eab39ab6107e8899845ad3d59bd9653f200f220920489ca2b5937696c31910160405180910390a35050565b6000806125c4620151804261486b565b90506000612710600e546127106125db9190614825565b6000848152601760205260409020546125f49190614902565b6125fe919061486b565b905080600d541115610dca5750600d5492915050565b6000818152601560205260409020805460609190612631906149a3565b80601f016020809104026020016040519081016040528092919081815260200182805461265d906149a3565b80156126aa5780601f1061267f576101008083540402835291602001916126aa565b820191906000526020600020905b81548152906001019060200180831161268d57829003601f168201915b50505050509050919050565b6126c03383613034565b6126dc5760405162461bcd60e51b8152600401610a6490614707565b6126e8848484846136d2565b50505050565b60606126f982612cec565b61273e5760405162461bcd60e51b81526020600482015260166024820152751d1bdad95b9259081a5cc81b9bdb995e1a5cdd195b9d60521b6044820152606401610a64565b600061274c610caf84610c50565b60405160200161275c91906145a2565b60408051601f198184030181529190529392505050565b813361277e826120b5565b6001600160a01b0316146127a45760405162461bcd60e51b8152600401610a6490614689565b816011548151106128095760405162461bcd60e51b815260206004820152602960248201527f4e6f74652073686f756c642062652073686f72746572207468616e206e6f746560448201526814da5e99531a5b5a5d60ba1b6064820152608401610a64565b3361281c600a546001600160a01b031690565b6001600160a01b031614806128335750600f543410155b61287f5760405162461bcd60e51b815260206004820152601960248201527f53686f756c642070617920656e67726176696e675072696365000000000000006044820152606401610a64565b60008481526015602052604090208054612898906149a3565b1590506128f55760405162461bcd60e51b815260206004820152602560248201527f4e6f74652073686f756c6420626520656d707479206265666f726520656e67726044820152646176696e6760d81b6064820152608401610a64565b6000848152601560209081526040909120845161291492860190613c8c565b506040516001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016903480156108fc02916000818181858888f1935050505015801561296a573d6000803e3d6000fd5b50612974846120b5565b6001600160a01b0316847fed9e0bea058528ee91b5c24513bbdb6ad21da03e6bc7108b7623af9d1231e07b856040516129ad9190614624565b60405180910390a350505050565b600a546001600160a01b031633146129e55760405162461bcd60e51b8152600401610a64906146d2565b6001600160a01b038116612a4a5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608401610a64565b6115d581613680565b60008080838162253d8c612a6a8362010bd96147e4565b612a7491906147e4565b9050600062023ab1612a8783600461487f565b612a91919061483d565b90506004612aa28262023ab161487f565b612aad9060036147e4565b612ab7919061483d565b612ac19083614921565b9150600062164b09612ad48460016147e4565b612ae090610fa061487f565b612aea919061483d565b90506004612afa826105b561487f565b612b04919061483d565b612b0e9084614921565b612b1990601f6147e4565b9250600061098f612b2b85605061487f565b612b35919061483d565b905060006050612b478361098f61487f565b612b51919061483d565b612b5b9086614921565b9050612b68600b8361483d565b9450612b7585600c61487f565b612b808360026147e4565b612b8a9190614921565b91508483612b99603187614921565b612ba490606461487f565b612bae91906147e4565b612bb891906147e4565b9a919950975095505050505050565b612bd18282613705565b610c4c577f00000000000000000000000000000000000000000000000000000000000000006001600160a01b031663d0e30db0826040518263ffffffff1660e01b81526004016000604051808303818588803b158015612c3057600080fd5b505af1158015612c44573d6000803e3d6000fd5b505060405163a9059cbb60e01b81526001600160a01b038681166004830152602482018690527f000000000000000000000000000000000000000000000000000000000000000016935063a9059cbb92506044019050602060405180830381600087803b158015612cb457600080fd5b505af1158015612cc8573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061100f91906141a8565b6000908152600260205260409020546001600160a01b0316151590565b6060815160001415612d2957505060408051602081019091526000815290565b6000604051806060016040528060408152602001614a746040913990506000600384516002612d589190614825565b612d62919061486b565b612d6d906004614902565b90506000612d7c826020614825565b67ffffffffffffffff811115612da257634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612dcc576020820181803683370190505b509050818152600183018586518101602084015b81831015612e3a5760039283018051603f601282901c811687015160f890811b8552600c83901c8216880151811b6001860152600683901c8216880151811b60028601529116860151901b93820193909352600401612de0565b600389510660018114612e545760028114612e6557612e71565b613d3d60f01b600119830152612e71565b603d60f81b6000198301525b509398975050505050505050565b606081612ea35750506040805180820190915260018152600360fc1b602082015290565b8160005b8115612ecd5780612eb7816149de565b9150612ec69050600a8361486b565b9150612ea7565b60008167ffffffffffffffff811115612ef657634e487b7160e01b600052604160045260246000fd5b6040519080825280601f01601f191660200182016040528015612f20576020820181803683370190505b5090505b8415612f9957612f35600183614960565b9150612f42600a866149f9565b612f4d906030614825565b60f81b818381518110612f7057634e487b7160e01b600052603260045260246000fd5b60200101906001600160f81b031916908160001a905350612f92600a8661486b565b9450612f24565b949350505050565b60006001600160e01b0319821663780e9d6360e01b1480610dca5750610dca82613773565b600081815260046020526040902080546001600160a01b0319166001600160a01b0384169081179091558190612ffb826120b5565b6001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b92560405160405180910390a45050565b600061303f82612cec565b6130a05760405162461bcd60e51b815260206004820152602c60248201527f4552433732313a206f70657261746f7220717565727920666f72206e6f6e657860448201526b34b9ba32b73a103a37b5b2b760a11b6064820152608401610a64565b60006130ab836120b5565b9050806001600160a01b0316846001600160a01b031614806130e65750836001600160a01b03166130db84610e62565b6001600160a01b0316145b80612f9957506001600160a01b0380821660009081526005602090815260408083209388168352929052205460ff16612f99565b826001600160a01b031661312d826120b5565b6001600160a01b0316146131955760405162461bcd60e51b815260206004820152602960248201527f4552433732313a207472616e73666572206f6620746f6b656e2074686174206960448201526839903737ba1037bbb760b91b6064820152608401610a64565b6001600160a01b0382166131f75760405162461bcd60e51b8152602060048201526024808201527f4552433732313a207472616e7366657220746f20746865207a65726f206164646044820152637265737360e01b6064820152608401610a64565b6132028383836137c3565b61320d600082612fc6565b6001600160a01b0383166000908152600360205260408120805460019290613236908490614960565b90915550506001600160a01b0382166000908152600360205260408120805460019290613264908490614825565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b0386811691821790925591518493918716917fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef91a4505050565b6132d2620151804261486b565b81106133205760405162461bcd60e51b815260206004820152601e60248201527f4f6e6c79207061737420746f6b656e496420697320636c61696d61626c6500006044820152606401610a64565b6000818152601660205260409020546001600160a01b03161580156133515750600081815260176020526040902054155b61339d5760405162461bcd60e51b815260206004820152601f60248201527f746f6b656e49642073686f756c64206e6f742062652061756374696f6e6564006044820152606401610a64565b6133a681612cec565b156133f35760405162461bcd60e51b815260206004820152601d60248201527f746f6b656e49642073686f756c64206e6f7420626520636c61696d65640000006044820152606401610a64565b610c4c82826137ce565b8061340b620151804261486b565b116134505760405162461bcd60e51b8152602060048201526015602482015274105d58dd1a5bdb881b9bdd081e595d08195b991959605a1b6044820152606401610a64565b6000818152601660205260409020546001600160a01b031615801590613483575060008181526017602052604090205415155b6134e35760405162461bcd60e51b815260206004820152602b60248201527f54686572652073686f756c64206265206174206c65617374206120626964206660448201526a6f7220746865206461746560a81b6064820152608401610a64565b6134ec81612cec565b156135395760405162461bcd60e51b815260206004820152601e60248201527f53686f756c64206e6f74207265636c61696d207468652061756374696f6e00006044820152606401610a64565b60008181526016602052604090205461355b906001600160a01b0316826137ce565b6000818152601760205260408082205490516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000169282156108fc02929190818181858888f193505050501580156135be573d6000803e3d6000fd5b5060008181526016602090815260408083205460178352928190205490519081526001600160a01b039092169183917fc9f72b276a388619c6d185d146697036241880c36654b1a3ffdad07c24038d99910160405180910390a350565b60008151835114801561367957508160405160200161363a91906142e7565b604051602081830303815290604052805190602001208360405160200161366191906142e7565b60405160208183030381529060405280519060200120145b9392505050565b600a80546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e090600090a35050565b6136dd84848461311a565b6136e98484848461390d565b6126e85760405162461bcd60e51b8152600401610a6490614637565b6040805160008082526020820190925281906001600160a01b0385169061753090859060405161373591906142e7565b600060405180830381858888f193505050503d8060008114611d15576040519150601f19603f3d011682016040523d82523d6000602084013e611d15565b60006001600160e01b031982166380ac58cd60e01b14806137a457506001600160e01b03198216635b5e139f60e01b145b80610dca57506301ffc9a760e01b6001600160e01b0319831614610dca565b61100f838383613a1a565b6001600160a01b0382166138245760405162461bcd60e51b815260206004820181905260248201527f4552433732313a206d696e7420746f20746865207a65726f20616464726573736044820152606401610a64565b61382d81612cec565b1561387a5760405162461bcd60e51b815260206004820152601c60248201527f4552433732313a20746f6b656e20616c7265616479206d696e746564000000006044820152606401610a64565b613886600083836137c3565b6001600160a01b03821660009081526003602052604081208054600192906138af908490614825565b909155505060008181526002602052604080822080546001600160a01b0319166001600160a01b03861690811790915590518392907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef908290a45050565b60006001600160a01b0384163b15613a0f57604051630a85bd0160e11b81526001600160a01b0385169063150b7a02906139519033908990889088906004016145e7565b602060405180830381600087803b15801561396b57600080fd5b505af192505050801561399b575060408051601f3d908101601f19168201909252613998918101906141e0565b60015b6139f5573d8080156139c9576040519150601f19603f3d011682016040523d82523d6000602084013e6139ce565b606091505b5080516139ed5760405162461bcd60e51b8152600401610a6490614637565b805181602001fd5b6001600160e01b031916630a85bd0160e11b149050612f99565b506001949350505050565b6001600160a01b038316613a7557613a7081600880546000838152600960205260408120829055600182018355919091527ff3f7a9fe364faab93b216da50a3214154f22a0a2b415b23a84c8169e8b636ee30155565b613a98565b816001600160a01b0316836001600160a01b031614613a9857613a988382613ad2565b6001600160a01b038216613aaf5761100f81613b6f565b826001600160a01b0316826001600160a01b03161461100f5761100f8282613c48565b60006001613adf84612247565b613ae99190614960565b600083815260076020526040902054909150808214613b3c576001600160a01b03841660009081526006602090815260408083208584528252808320548484528184208190558352600790915290208190555b5060009182526007602090815260408084208490556001600160a01b039094168352600681528383209183525290812055565b600854600090613b8190600190614960565b60008381526009602052604081205460088054939450909284908110613bb757634e487b7160e01b600052603260045260246000fd5b906000526020600020015490508060088381548110613be657634e487b7160e01b600052603260045260246000fd5b6000918252602080832090910192909255828152600990915260408082208490558582528120556008805480613c2c57634e487b7160e01b600052603160045260246000fd5b6001900381819060005260206000200160009055905550505050565b6000613c5383612247565b6001600160a01b039093166000908152600660209081526040808320868452825280832085905593825260079052919091209190915550565b828054613c98906149a3565b90600052602060002090601f016020900481019282613cba5760008555613d00565b82601f10613cd357805160ff1916838001178555613d00565b82800160010185558215613d00579182015b82811115613d00578251825591602001919060010190613ce5565b50613d0c929150613d69565b5090565b828054828255906000526020600020908101928215613d5d579160200282015b82811115613d5d5782518051613d4d918491602090910190613c8c565b5091602001919060010190613d30565b50613d0c929150613d7e565b5b80821115613d0c5760008155600101613d6a565b80821115613d0c576000613d928282613d9b565b50600101613d7e565b508054613da7906149a3565b6000825580601f10613db7575050565b601f0160209004906000526020600020908101906115d59190613d69565b600067ffffffffffffffff831115613def57613def614a39565b613e02601f8401601f191660200161478f565b9050828152838383011115613e1657600080fd5b828260208301376000602084830101529392505050565b80356001600160a01b0381168114613e4457600080fd5b919050565b600082601f830112613e59578081fd5b81356020613e6e613e69836147c0565b61478f565b80838252828201915082860187848660051b8901011115613e8d578586fd5b855b85811015613eab57813584529284019290840190600101613e8f565b5090979650505050505050565b600082601f830112613ec8578081fd5b61367983833560208501613dd5565b600060208284031215613ee8578081fd5b61367982613e2d565b60008060408385031215613f03578081fd5b613f0c83613e2d565b9150613f1a60208401613e2d565b90509250929050565b600080600060608486031215613f37578081fd5b613f4084613e2d565b9250613f4e60208501613e2d565b9150604084013590509250925092565b60008060008060808587031215613f73578081fd5b613f7c85613e2d565b9350613f8a60208601613e2d565b925060408501359150606085013567ffffffffffffffff811115613fac578182fd5b8501601f81018713613fbc578182fd5b613fcb87823560208401613dd5565b91505092959194509250565b60008060408385031215613fe9578182fd5b613ff283613e2d565b9150602083013561400281614a4f565b809150509250929050565b6000806040838503121561401f578182fd5b61402883613e2d565b946020939093013593505050565b60008060408385031215614048578182fd5b823567ffffffffffffffff8082111561405f578384fd5b818501915085601f830112614072578384fd5b81356020614082613e69836147c0565b8083825282820191508286018a848660051b89010111156140a1578889fd5b8896505b848710156140ca576140b681613e2d565b8352600196909601959183019183016140a5565b50965050860135925050808211156140e0578283fd5b506140ed85828601613e49565b9150509250929050565b60006020808385031215614109578182fd5b823567ffffffffffffffff80821115614120578384fd5b818501915085601f830112614133578384fd5b8135614141613e69826147c0565b80828252858201915085850189878560051b8801011115614160578788fd5b875b848110156141995781358681111561417857898afd5b6141868c8a838b0101613eb8565b8552509287019290870190600101614162565b50909998505050505050505050565b6000602082840312156141b9578081fd5b815161367981614a4f565b6000602082840312156141d5578081fd5b813561367981614a5d565b6000602082840312156141f1578081fd5b815161367981614a5d565b60006020828403121561420d578081fd5b813567ffffffffffffffff811115614223578182fd5b612f9984828501613eb8565b600060208284031215614240578081fd5b5035919050565b600060208284031215614258578081fd5b5051919050565b60008060408385031215614271578182fd5b82359150602083013567ffffffffffffffff81111561428e578182fd5b6140ed85828601613eb8565b600080604083850312156142ac578182fd5b50508035926020909101359150565b600081518084526142d3816020860160208601614977565b601f01601f19169290920160200192915050565b600082516142f9818460208701614977565b9190910192915050565b60008351614315818460208801614977565b6001600160f81b0319939093169190920190815260010192915050565b60008351614344818460208801614977565b835190830190614358818360208801614977565b01949350505050565b60008251614373818460208701614977565b652661706f733b60d01b920191825250600601919050565b6000825161439d818460208701614977565b63266c743b60e01b920191825250600401919050565b600082516143c5818460208701614977565b632667743b60e01b920191825250600401919050565b600082516143ed818460208701614977565b652671756f743b60d01b920191825250600601919050565b60008451614417818460208901614977565b8083019050602d60f81b8082528551614437816001850160208a01614977565b60019201918201528351614452816002840160208801614977565b0160020195945050505050565b60008251614471818460208701614977565b6426616d703b60d81b920191825250600501919050565b600360fc1b8152600082516144a4816001850160208701614977565b9190910160010192915050565b737b226e616d65223a20225468652044617465202360601b815284516000906144e1816014850160208a01614977565b6101d160f51b6014918401918201528551614503816016840160208a01614977565b72111610113232b9b1b934b83a34b7b7111d101160691b601692909101918201528451614537816029840160208901614977565b7f222c2022696d616765223a2022646174613a696d6167652f7376672b786d6c3b602992909101918201526618985cd94d8d0b60ca1b60498201528351614585816050840160208801614977565b61227d60f01b605092909101918201526052019695505050505050565b7f646174613a6170706c69636174696f6e2f6a736f6e3b6261736536342c0000008152600082516145da81601d850160208701614977565b91909101601d0192915050565b6001600160a01b038581168252841660208201526040810183905260806060820181905260009061461a908301846142bb565b9695505050505050565b60208152600061367960208301846142bb565b60208082526032908201527f4552433732313a207472616e7366657220746f206e6f6e20455243373231526560408201527131b2b4bb32b91034b6b83632b6b2b73a32b960711b606082015260800190565b60208082526029908201527f43616c6c65722073686f756c6420626520746865206f776e6572206f662074686040820152686520617274776f726b60b81b606082015260800190565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b60208082526031908201527f4552433732313a207472616e736665722063616c6c6572206973206e6f74206f6040820152701ddb995c881b9bdc88185c1c1c9bdd9959607a1b606082015260800190565b6020808252601f908201527f5265656e7472616e637947756172643a207265656e7472616e742063616c6c00604082015260600190565b604051601f8201601f1916810167ffffffffffffffff811182821017156147b8576147b8614a39565b604052919050565b600067ffffffffffffffff8211156147da576147da614a39565b5060051b60200190565b600080821280156001600160ff1b038490038513161561480657614806614a0d565b600160ff1b839003841281161561481f5761481f614a0d565b50500190565b6000821982111561483857614838614a0d565b500190565b60008261484c5761484c614a23565b600160ff1b82146000198414161561486657614866614a0d565b500590565b60008261487a5761487a614a23565b500490565b60006001600160ff1b03818413828413808216868404861116156148a5576148a5614a0d565b600160ff1b848712828116878305891216156148c3576148c3614a0d565b8587129250878205871284841616156148de576148de614a0d565b878505871281841616156148f4576148f4614a0d565b505050929093029392505050565b600081600019048311821515161561491c5761491c614a0d565b500290565b60008083128015600160ff1b85018412161561493f5761493f614a0d565b6001600160ff1b038401831381161561495a5761495a614a0d565b50500390565b60008282101561497257614972614a0d565b500390565b60005b8381101561499257818101518382015260200161497a565b838111156126e85750506000910152565b600181811c908216806149b757607f821691505b602082108114156149d857634e487b7160e01b600052602260045260246000fd5b50919050565b60006000198214156149f2576149f2614a0d565b5060010190565b600082614a0857614a08614a23565b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052604160045260246000fd5b80151581146115d557600080fd5b6001600160e01b0319811681146115d557600080fdfe4142434445464748494a4b4c4d4e4f505152535455565758595a6162636465666768696a6b6c6d6e6f707172737475767778797a303132333435363738392b2fa26469706673582212201cb1c75d534a032a3d35dabee516ceb4f31377bf37d3445e5c7a44aa418f85fb64736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "approve(address,uint256)": {
        "details": "See {IERC721-approve}."
      },
      "balanceOf(address)": {
        "details": "See {IERC721-balanceOf}."
      },
      "getApproved(uint256)": {
        "details": "See {IERC721-getApproved}."
      },
      "isApprovedForAll(address,address)": {
        "details": "See {IERC721-isApprovedForAll}."
      },
      "name()": {
        "details": "See {IERC721Metadata-name}."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "ownerOf(uint256)": {
        "details": "See {IERC721-ownerOf}."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "royaltyInfo(uint256,uint256)": {
        "details": "Called with the sale price to determine how much royalty is owed and to whom.",
        "params": {
          "salePrice": "- the sale price of the NFT asset specified by `tokenId`",
          "tokenId": "- the NFT asset queried for royalty information"
        },
        "returns": {
          "receiver": "- address of who should be sent the royalty payment",
          "royaltyAmount": "- the royalty payment amount for `salePrice`"
        }
      },
      "safeTransferFrom(address,address,uint256)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "safeTransferFrom(address,address,uint256,bytes)": {
        "details": "See {IERC721-safeTransferFrom}."
      },
      "setApprovalForAll(address,bool)": {
        "details": "See {IERC721-setApprovalForAll}."
      },
      "symbol()": {
        "details": "See {IERC721Metadata-symbol}."
      },
      "tokenByIndex(uint256)": {
        "details": "See {IERC721Enumerable-tokenByIndex}."
      },
      "tokenOfOwnerByIndex(address,uint256)": {
        "details": "See {IERC721Enumerable-tokenOfOwnerByIndex}."
      },
      "tokenURI(uint256)": {
        "details": "See {IERC721Metadata-tokenURI}."
      },
      "totalSupply()": {
        "details": "See {IERC721Enumerable-totalSupply}."
      },
      "transferFrom(address,address,uint256)": {
        "details": "See {IERC721-transferFrom}."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 2479,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_name",
        "offset": 0,
        "slot": "0",
        "type": "t_string_storage"
      },
      {
        "astId": 2481,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_symbol",
        "offset": 0,
        "slot": "1",
        "type": "t_string_storage"
      },
      {
        "astId": 2485,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_owners",
        "offset": 0,
        "slot": "2",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2489,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_balances",
        "offset": 0,
        "slot": "3",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2493,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_tokenApprovals",
        "offset": 0,
        "slot": "4",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 2499,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_operatorApprovals",
        "offset": 0,
        "slot": "5",
        "type": "t_mapping(t_address,t_mapping(t_address,t_bool))"
      },
      {
        "astId": 3418,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_ownedTokens",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_address,t_mapping(t_uint256,t_uint256))"
      },
      {
        "astId": 3422,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_ownedTokensIndex",
        "offset": 0,
        "slot": "7",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 3425,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_allTokens",
        "offset": 0,
        "slot": "8",
        "type": "t_array(t_uint256)dyn_storage"
      },
      {
        "astId": 3429,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_allTokensIndex",
        "offset": 0,
        "slot": "9",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 7,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_owner",
        "offset": 0,
        "slot": "10",
        "type": "t_address"
      },
      {
        "astId": 431,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_status",
        "offset": 0,
        "slot": "11",
        "type": "t_uint256"
      },
      {
        "astId": 6428,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "claimingPrice",
        "offset": 0,
        "slot": "12",
        "type": "t_uint256"
      },
      {
        "astId": 6431,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "reservePrice",
        "offset": 0,
        "slot": "13",
        "type": "t_uint256"
      },
      {
        "astId": 6434,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "minBidIncrementBps",
        "offset": 0,
        "slot": "14",
        "type": "t_uint256"
      },
      {
        "astId": 6437,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "engravingPrice",
        "offset": 0,
        "slot": "15",
        "type": "t_uint256"
      },
      {
        "astId": 6440,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "erasingPrice",
        "offset": 0,
        "slot": "16",
        "type": "t_uint256"
      },
      {
        "astId": 6443,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "noteSizeLimit",
        "offset": 0,
        "slot": "17",
        "type": "t_uint256"
      },
      {
        "astId": 6446,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "royaltyBps",
        "offset": 0,
        "slot": "18",
        "type": "t_uint256"
      },
      {
        "astId": 6449,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "tokenDescription",
        "offset": 0,
        "slot": "19",
        "type": "t_string_storage"
      },
      {
        "astId": 6458,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "svgImageTemplate",
        "offset": 0,
        "slot": "20",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 6534,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_notes",
        "offset": 0,
        "slot": "21",
        "type": "t_mapping(t_uint256,t_string_storage)"
      },
      {
        "astId": 6538,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_highestBidder",
        "offset": 0,
        "slot": "22",
        "type": "t_mapping(t_uint256,t_address)"
      },
      {
        "astId": 6542,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_highestBid",
        "offset": 0,
        "slot": "23",
        "type": "t_mapping(t_uint256,t_uint256)"
      },
      {
        "astId": 6545,
        "contract": "contracts/TheDate.sol:TheDate",
        "label": "_lastUnchaimedAuctionedTokenId",
        "offset": 0,
        "slot": "24",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)dyn_storage": {
        "base": "t_uint256",
        "encoding": "dynamic_array",
        "label": "uint256[]",
        "numberOfBytes": "32"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_bool)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => bool)",
        "numberOfBytes": "32",
        "value": "t_bool"
      },
      "t_mapping(t_address,t_mapping(t_address,t_bool))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(address => bool))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_bool)"
      },
      "t_mapping(t_address,t_mapping(t_uint256,t_uint256))": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => mapping(uint256 => uint256))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_uint256,t_uint256)"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_uint256,t_address)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => address)",
        "numberOfBytes": "32",
        "value": "t_address"
      },
      "t_mapping(t_uint256,t_string_storage)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => string)",
        "numberOfBytes": "32",
        "value": "t_string_storage"
      },
      "t_mapping(t_uint256,t_uint256)": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}